
Feeder_2mmV2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  0000291e  000029b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000291e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020e  00800144  00800144  000029f6  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  000029f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002a58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006d8  00000000  00000000  00002a98  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e94d  00000000  00000000  00003170  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003148  00000000  00000000  00011abd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003b81  00000000  00000000  00014c05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001208  00000000  00000000  00018788  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000034ea  00000000  00000000  00019990  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004cf1  00000000  00000000  0001ce7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000600  00000000  00000000  00021b6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__dtors_end>
       4:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <__vector_1>
       8:	0c 94 32 0e 	jmp	0x1c64	; 0x1c64 <__vector_2>
       c:	0c 94 a3 01 	jmp	0x346	; 0x346 <__vector_3>
      10:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__vector_4>
      14:	0c 94 36 02 	jmp	0x46c	; 0x46c <__vector_5>
      18:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      1c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      20:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      24:	0c 94 31 07 	jmp	0xe62	; 0xe62 <__vector_9>
      28:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      2c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      30:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      34:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      38:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      3c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      40:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__vector_16>
      44:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      48:	0c 94 99 0c 	jmp	0x1932	; 0x1932 <__vector_18>
      4c:	0c 94 cb 0c 	jmp	0x1996	; 0x1996 <__vector_19>
      50:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      54:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      58:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      5c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      60:	0c 94 ef 12 	jmp	0x25de	; 0x25de <__vector_24>
      64:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      68:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      6c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      70:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      74:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      78:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      7c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      80:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      84:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      88:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      8c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      90:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      94:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      98:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      9c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      a0:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      a4:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      a8:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      ac:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>
      b0:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__bad_interrupt>

000000b4 <__trampolines_end>:
      b4:	00 00       	nop
      b6:	00 08       	sbc	r0, r0
      b8:	00 02       	muls	r16, r16
      ba:	01 00       	.word	0x0001	; ????
      bc:	00 03       	mulsu	r16, r16
      be:	04 07       	cpc	r16, r20
	...

000000c8 <digital_pin_to_bit_mask_PGM>:
      c8:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      d8:	04 08 10 20                                         ... 

000000dc <digital_pin_to_port_PGM>:
      dc:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      ec:	03 03 03 03                                         ....

000000f0 <port_to_output_PGM>:
      f0:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000fa <port_to_mode_PGM>:
      fa:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000104 <__ctors_start>:
     104:	43 07       	cpc	r20, r19
     106:	fb 0c       	add	r15, r11
     108:	5b 11       	cpse	r21, r11

0000010a <__ctors_end>:
     10a:	67 07       	cpc	r22, r23

0000010c <__dtors_end>:
     10c:	11 24       	eor	r1, r1
     10e:	1f be       	out	0x3f, r1	; 63
     110:	cf ef       	ldi	r28, 0xFF	; 255
     112:	d8 e0       	ldi	r29, 0x08	; 8
     114:	de bf       	out	0x3e, r29	; 62
     116:	cd bf       	out	0x3d, r28	; 61

00000118 <__do_copy_data>:
     118:	11 e0       	ldi	r17, 0x01	; 1
     11a:	a0 e0       	ldi	r26, 0x00	; 0
     11c:	b1 e0       	ldi	r27, 0x01	; 1
     11e:	ee e1       	ldi	r30, 0x1E	; 30
     120:	f9 e2       	ldi	r31, 0x29	; 41
     122:	02 c0       	rjmp	.+4      	; 0x128 <__do_copy_data+0x10>
     124:	05 90       	lpm	r0, Z+
     126:	0d 92       	st	X+, r0
     128:	a4 34       	cpi	r26, 0x44	; 68
     12a:	b1 07       	cpc	r27, r17
     12c:	d9 f7       	brne	.-10     	; 0x124 <__do_copy_data+0xc>

0000012e <__do_clear_bss>:
     12e:	23 e0       	ldi	r18, 0x03	; 3
     130:	a4 e4       	ldi	r26, 0x44	; 68
     132:	b1 e0       	ldi	r27, 0x01	; 1
     134:	01 c0       	rjmp	.+2      	; 0x138 <.do_clear_bss_start>

00000136 <.do_clear_bss_loop>:
     136:	1d 92       	st	X+, r1

00000138 <.do_clear_bss_start>:
     138:	a2 35       	cpi	r26, 0x52	; 82
     13a:	b2 07       	cpc	r27, r18
     13c:	e1 f7       	brne	.-8      	; 0x136 <.do_clear_bss_loop>

0000013e <__do_global_ctors>:
     13e:	10 e0       	ldi	r17, 0x00	; 0
     140:	c5 e8       	ldi	r28, 0x85	; 133
     142:	d0 e0       	ldi	r29, 0x00	; 0
     144:	04 c0       	rjmp	.+8      	; 0x14e <__do_global_ctors+0x10>
     146:	21 97       	sbiw	r28, 0x01	; 1
     148:	fe 01       	movw	r30, r28
     14a:	0e 94 66 14 	call	0x28cc	; 0x28cc <__tablejump2__>
     14e:	c2 38       	cpi	r28, 0x82	; 130
     150:	d1 07       	cpc	r29, r17
     152:	c9 f7       	brne	.-14     	; 0x146 <__do_global_ctors+0x8>
     154:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <main>
     158:	0c 94 82 14 	jmp	0x2904	; 0x2904 <__do_global_dtors>

0000015c <__bad_interrupt>:
     15c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000160 <_ZN6Motor1D1Ev>:
Motor1::Motor1()
{
} //Motor1

// default destructor
Motor1::~Motor1()
     160:	08 95       	ret

00000162 <_ZN6Motor1C1Ehh>:
{
} //~Motor1

Motor1::Motor1(byte pin1, byte pin2)
{
	_pin1=pin1;//here we store the pin number in private variable _pin
     162:	fc 01       	movw	r30, r24
     164:	60 83       	st	Z, r22
	_pin2=pin2;
     166:	41 83       	std	Z+1, r20	; 0x01
     168:	08 95       	ret

0000016a <_ZN6Motor15beginEv>:
}

void Motor1::begin() //this initializes the pin
{
     16a:	fc 01       	movw	r30, r24
	DDRB |=(1 << _pin1) | (1 << _pin2); //pin as output   pinMode(_pin, OUTPUT); sau definit si in limbaj arduino
     16c:	94 b1       	in	r25, 0x04	; 4
     16e:	21 e0       	ldi	r18, 0x01	; 1
     170:	30 e0       	ldi	r19, 0x00	; 0
     172:	a9 01       	movw	r20, r18
     174:	00 80       	ld	r0, Z
     176:	02 c0       	rjmp	.+4      	; 0x17c <_ZN6Motor15beginEv+0x12>
     178:	44 0f       	add	r20, r20
     17a:	55 1f       	adc	r21, r21
     17c:	0a 94       	dec	r0
     17e:	e2 f7       	brpl	.-8      	; 0x178 <_ZN6Motor15beginEv+0xe>
     180:	01 80       	ldd	r0, Z+1	; 0x01
     182:	02 c0       	rjmp	.+4      	; 0x188 <_ZN6Motor15beginEv+0x1e>
     184:	22 0f       	add	r18, r18
     186:	33 1f       	adc	r19, r19
     188:	0a 94       	dec	r0
     18a:	e2 f7       	brpl	.-8      	; 0x184 <_ZN6Motor15beginEv+0x1a>
     18c:	24 2b       	or	r18, r20
     18e:	29 2b       	or	r18, r25
     190:	24 b9       	out	0x04, r18	; 4
     192:	08 95       	ret

00000194 <_ZN6Motor17forwardEh>:
}

void Motor1::forward(byte speed1) //this returns the current status
{
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	ec 01       	movw	r28, r24
	_speed1=255-speed1;
     19a:	60 95       	com	r22
     19c:	6a 83       	std	Y+2, r22	; 0x02
	analogWrite(m_forward, 255);
     19e:	6f ef       	ldi	r22, 0xFF	; 255
     1a0:	70 e0       	ldi	r23, 0x00	; 0
     1a2:	89 e0       	ldi	r24, 0x09	; 9
     1a4:	0e 94 56 0f 	call	0x1eac	; 0x1eac <analogWrite>
	analogWrite(m_reverse, _speed1);
     1a8:	6a 81       	ldd	r22, Y+2	; 0x02
     1aa:	70 e0       	ldi	r23, 0x00	; 0
     1ac:	8a e0       	ldi	r24, 0x0A	; 10
}
     1ae:	df 91       	pop	r29
     1b0:	cf 91       	pop	r28

void Motor1::forward(byte speed1) //this returns the current status
{
	_speed1=255-speed1;
	analogWrite(m_forward, 255);
	analogWrite(m_reverse, _speed1);
     1b2:	0c 94 56 0f 	jmp	0x1eac	; 0x1eac <analogWrite>

000001b6 <_ZN6Motor17reverseEh>:
}

void Motor1::reverse(byte speed2) //this returns the current status
{
	_speed2=255-speed2;
     1b6:	60 95       	com	r22
     1b8:	fc 01       	movw	r30, r24
     1ba:	63 83       	std	Z+3, r22	; 0x03
	analogWrite(m_forward, _speed2);
     1bc:	70 e0       	ldi	r23, 0x00	; 0
     1be:	89 e0       	ldi	r24, 0x09	; 9
     1c0:	0e 94 56 0f 	call	0x1eac	; 0x1eac <analogWrite>
	analogWrite(m_reverse, 255);
     1c4:	6f ef       	ldi	r22, 0xFF	; 255
     1c6:	70 e0       	ldi	r23, 0x00	; 0
     1c8:	8a e0       	ldi	r24, 0x0A	; 10
     1ca:	0c 94 56 0f 	jmp	0x1eac	; 0x1eac <analogWrite>

000001ce <_ZN6Motor17brakingEv>:
}

void Motor1::braking() //this returns the current status
{
	analogWrite(m_forward, 255);
     1ce:	6f ef       	ldi	r22, 0xFF	; 255
     1d0:	70 e0       	ldi	r23, 0x00	; 0
     1d2:	89 e0       	ldi	r24, 0x09	; 9
     1d4:	0e 94 56 0f 	call	0x1eac	; 0x1eac <analogWrite>
	analogWrite(m_reverse, 255);
     1d8:	6f ef       	ldi	r22, 0xFF	; 255
     1da:	70 e0       	ldi	r23, 0x00	; 0
     1dc:	8a e0       	ldi	r24, 0x0A	; 10
     1de:	0e 94 56 0f 	call	0x1eac	; 0x1eac <analogWrite>
	delay(10);
     1e2:	6a e0       	ldi	r22, 0x0A	; 10
     1e4:	70 e0       	ldi	r23, 0x00	; 0
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	0c 94 d4 0e 	jmp	0x1da8	; 0x1da8 <delay>

000001ee <_Z14doEncoderMotorv>:
		cli();
		p=(pasul+1-encoderMotorPos)*(-flag_directie);
		sei();
		return p;
	}
}
     1ee:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <ff+0x1>
     1f2:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <ff>
     1f6:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <ff+0x2>
     1fa:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <ff+0x1>
     1fe:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
     202:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <ff+0x2>
     206:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
     20a:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <flag_directie>
     20e:	81 30       	cpi	r24, 0x01	; 1
     210:	31 f4       	brne	.+12     	; 0x21e <_Z14doEncoderMotorv+0x30>
     212:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <encoderMotorPos>
     216:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <encoderMotorPos+0x1>
     21a:	01 96       	adiw	r24, 0x01	; 1
     21c:	14 c0       	rjmp	.+40     	; 0x246 <_Z14doEncoderMotorv+0x58>
     21e:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <flag_directie>
     222:	8f 3f       	cpi	r24, 0xFF	; 255
     224:	31 f4       	brne	.+12     	; 0x232 <_Z14doEncoderMotorv+0x44>
     226:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <encoderMotorPos>
     22a:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <encoderMotorPos+0x1>
     22e:	01 97       	sbiw	r24, 0x01	; 1
     230:	0a c0       	rjmp	.+20     	; 0x246 <_Z14doEncoderMotorv+0x58>
     232:	88 e4       	ldi	r24, 0x48	; 72
     234:	91 e0       	ldi	r25, 0x01	; 1
     236:	0e 94 a8 09 	call	0x1350	; 0x1350 <_ZN13EncoderMotor18directieEv>
     23a:	20 91 d7 01 	lds	r18, 0x01D7	; 0x8001d7 <encoderMotorPos>
     23e:	30 91 d8 01 	lds	r19, 0x01D8	; 0x8001d8 <encoderMotorPos+0x1>
     242:	82 0f       	add	r24, r18
     244:	93 1f       	adc	r25, r19
     246:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <encoderMotorPos+0x1>
     24a:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <encoderMotorPos>
     24e:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <pasul>
     252:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <pasul+0x1>
     256:	20 91 d7 01 	lds	r18, 0x01D7	; 0x8001d7 <encoderMotorPos>
     25a:	30 91 d8 01 	lds	r19, 0x01D8	; 0x8001d8 <encoderMotorPos+0x1>
     25e:	ac 01       	movw	r20, r24
     260:	4f 5f       	subi	r20, 0xFF	; 255
     262:	5f 4f       	sbci	r21, 0xFF	; 255
     264:	42 17       	cp	r20, r18
     266:	53 07       	cpc	r21, r19
     268:	31 f4       	brne	.+12     	; 0x276 <_Z14doEncoderMotorv+0x88>
     26a:	21 e0       	ldi	r18, 0x01	; 1
     26c:	30 e0       	ldi	r19, 0x00	; 0
     26e:	30 93 d8 01 	sts	0x01D8, r19	; 0x8001d8 <encoderMotorPos+0x1>
     272:	20 93 d7 01 	sts	0x01D7, r18	; 0x8001d7 <encoderMotorPos>
     276:	20 91 d7 01 	lds	r18, 0x01D7	; 0x8001d7 <encoderMotorPos>
     27a:	30 91 d8 01 	lds	r19, 0x01D8	; 0x8001d8 <encoderMotorPos+0x1>
     27e:	96 95       	lsr	r25
     280:	87 95       	ror	r24
     282:	82 17       	cp	r24, r18
     284:	93 07       	cpc	r25, r19
     286:	61 f4       	brne	.+24     	; 0x2a0 <_Z14doEncoderMotorv+0xb2>
     288:	8e e4       	ldi	r24, 0x4E	; 78
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	0e 94 94 09 	call	0x1328	; 0x1328 <_ZN7Button16statusEv>
     290:	81 11       	cpse	r24, r1
     292:	06 c0       	rjmp	.+12     	; 0x2a0 <_Z14doEncoderMotorv+0xb2>
     294:	8c e4       	ldi	r24, 0x4C	; 76
     296:	91 e0       	ldi	r25, 0x01	; 1
     298:	0e 94 94 09 	call	0x1328	; 0x1328 <_ZN7Button16statusEv>
     29c:	88 23       	and	r24, r24
     29e:	c9 f0       	breq	.+50     	; 0x2d2 <_Z14doEncoderMotorv+0xe4>
     2a0:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <flag_power>
     2a4:	81 11       	cpse	r24, r1
     2a6:	06 c0       	rjmp	.+12     	; 0x2b4 <_Z14doEncoderMotorv+0xc6>
     2a8:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <encoderMotorPos>
     2ac:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <encoderMotorPos+0x1>
     2b0:	01 97       	sbiw	r24, 0x01	; 1
     2b2:	91 f0       	breq	.+36     	; 0x2d8 <_Z14doEncoderMotorv+0xea>
     2b4:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <encoderMotorPos>
     2b8:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <encoderMotorPos+0x1>
     2bc:	89 2b       	or	r24, r25
     2be:	d9 f4       	brne	.+54     	; 0x2f6 <_Z14doEncoderMotorv+0x108>
     2c0:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <pasul>
     2c4:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <pasul+0x1>
     2c8:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <encoderMotorPos+0x1>
     2cc:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <encoderMotorPos>
     2d0:	08 95       	ret
     2d2:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <flag_power>
     2d6:	e4 cf       	rjmp	.-56     	; 0x2a0 <_Z14doEncoderMotorv+0xb2>
     2d8:	80 e5       	ldi	r24, 0x50	; 80
     2da:	91 e0       	ldi	r25, 0x01	; 1
     2dc:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_ZN6Motor17brakingEv>
     2e0:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <flag_directie>
     2e4:	86 e5       	ldi	r24, 0x56	; 86
     2e6:	91 e0       	ldi	r25, 0x01	; 1
     2e8:	0e 94 dd 09 	call	0x13ba	; 0x13ba <_ZN4Led13offEv>
     2ec:	84 e5       	ldi	r24, 0x54	; 84
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN4Led12onEv>
     2f4:	df cf       	rjmp	.-66     	; 0x2b4 <_Z14doEncoderMotorv+0xc6>
     2f6:	08 95       	ret

000002f8 <_Z14doEncoderRoatav>:
     2f8:	88 e4       	ldi	r24, 0x48	; 72
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	0e 94 a8 09 	call	0x1350	; 0x1350 <_ZN13EncoderMotor18directieEv>
     300:	01 97       	sbiw	r24, 0x01	; 1
     302:	f1 f4       	brne	.+60     	; 0x340 <_Z14doEncoderRoatav+0x48>
     304:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <kk>
     308:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <kk+0x1>
     30c:	20 91 d7 01 	lds	r18, 0x01D7	; 0x8001d7 <encoderMotorPos>
     310:	30 91 d8 01 	lds	r19, 0x01D8	; 0x8001d8 <encoderMotorPos+0x1>
     314:	fc 01       	movw	r30, r24
     316:	ed 59       	subi	r30, 0x9D	; 157
     318:	fe 4f       	sbci	r31, 0xFE	; 254
     31a:	20 83       	st	Z, r18
     31c:	01 96       	adiw	r24, 0x01	; 1
     31e:	83 36       	cpi	r24, 0x63	; 99
     320:	91 05       	cpc	r25, r1
     322:	29 f0       	breq	.+10     	; 0x32e <_Z14doEncoderRoatav+0x36>
     324:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <kk+0x1>
     328:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <kk>
     32c:	04 c0       	rjmp	.+8      	; 0x336 <_Z14doEncoderRoatav+0x3e>
     32e:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <kk+0x1>
     332:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <kk>
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <flag_roata>
     33c:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <flag_trimiteI2C>
     340:	08 95       	ret

00000342 <_ZN11EEPROMClass4readEi.isra.2>:
     342:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <eeprom_read_byte>

00000346 <__vector_3>:
     346:	1f 92       	push	r1
     348:	0f 92       	push	r0
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	0f 92       	push	r0
     34e:	11 24       	eor	r1, r1
     350:	2f 93       	push	r18
     352:	3f 93       	push	r19
     354:	4f 93       	push	r20
     356:	5f 93       	push	r21
     358:	6f 93       	push	r22
     35a:	7f 93       	push	r23
     35c:	8f 93       	push	r24
     35e:	9f 93       	push	r25
     360:	af 93       	push	r26
     362:	bf 93       	push	r27
     364:	ef 93       	push	r30
     366:	ff 93       	push	r31
     368:	8a e4       	ldi	r24, 0x4A	; 74
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <_ZN10SenzorCap16statusEv>
     370:	88 23       	and	r24, r24
     372:	a9 f0       	breq	.+42     	; 0x39e <__vector_3+0x58>
     374:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <flag_directie>
     378:	81 11       	cpse	r24, r1
     37a:	11 c0       	rjmp	.+34     	; 0x39e <__vector_3+0x58>
     37c:	84 ef       	ldi	r24, 0xF4	; 244
     37e:	91 e0       	ldi	r25, 0x01	; 1
     380:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <delayMicroseconds>
     384:	8a e4       	ldi	r24, 0x4A	; 74
     386:	91 e0       	ldi	r25, 0x01	; 1
     388:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <_ZN10SenzorCap16statusEv>
     38c:	88 23       	and	r24, r24
     38e:	39 f0       	breq	.+14     	; 0x39e <__vector_3+0x58>
     390:	86 e5       	ldi	r24, 0x56	; 86
     392:	91 e0       	ldi	r25, 0x01	; 1
     394:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN4Led12onEv>
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <flag_directie>
     39e:	ff 91       	pop	r31
     3a0:	ef 91       	pop	r30
     3a2:	bf 91       	pop	r27
     3a4:	af 91       	pop	r26
     3a6:	9f 91       	pop	r25
     3a8:	8f 91       	pop	r24
     3aa:	7f 91       	pop	r23
     3ac:	6f 91       	pop	r22
     3ae:	5f 91       	pop	r21
     3b0:	4f 91       	pop	r20
     3b2:	3f 91       	pop	r19
     3b4:	2f 91       	pop	r18
     3b6:	0f 90       	pop	r0
     3b8:	0f be       	out	0x3f, r0	; 63
     3ba:	0f 90       	pop	r0
     3bc:	1f 90       	pop	r1
     3be:	18 95       	reti

000003c0 <__vector_4>:
     3c0:	1f 92       	push	r1
     3c2:	0f 92       	push	r0
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	0f 92       	push	r0
     3c8:	11 24       	eor	r1, r1
     3ca:	2f 93       	push	r18
     3cc:	3f 93       	push	r19
     3ce:	4f 93       	push	r20
     3d0:	5f 93       	push	r21
     3d2:	6f 93       	push	r22
     3d4:	7f 93       	push	r23
     3d6:	8f 93       	push	r24
     3d8:	9f 93       	push	r25
     3da:	af 93       	push	r26
     3dc:	bf 93       	push	r27
     3de:	ef 93       	push	r30
     3e0:	ff 93       	push	r31
     3e2:	32 9b       	sbis	0x06, 2	; 6
     3e4:	03 c0       	rjmp	.+6      	; 0x3ec <__vector_4+0x2c>
     3e6:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <flag_low_voltage>
     3ea:	2f c0       	rjmp	.+94     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <flag_low_voltage>
     3f2:	86 e5       	ldi	r24, 0x56	; 86
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	0e 94 dd 09 	call	0x13ba	; 0x13ba <_ZN4Led13offEv>
     3fa:	84 e5       	ldi	r24, 0x54	; 84
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	0e 94 dd 09 	call	0x13ba	; 0x13ba <_ZN4Led13offEv>
     402:	80 e5       	ldi	r24, 0x50	; 80
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_ZN6Motor17brakingEv>
     40a:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <encoderMotorPos>
     40e:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <encoderMotorPos+0x1>
     412:	60 91 ce 01 	lds	r22, 0x01CE	; 0x8001ce <pasul>
     416:	70 91 cf 01 	lds	r23, 0x01CF	; 0x8001cf <pasul+0x1>
     41a:	0e 94 1c 14 	call	0x2838	; 0x2838 <__udivmodhi4>
     41e:	68 2f       	mov	r22, r24
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	0e 94 74 14 	call	0x28e8	; 0x28e8 <eeprom_write_byte>
     428:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <encoderMotorPos>
     42c:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <encoderMotorPos+0x1>
     430:	60 91 ce 01 	lds	r22, 0x01CE	; 0x8001ce <pasul>
     434:	70 91 cf 01 	lds	r23, 0x01CF	; 0x8001cf <pasul+0x1>
     438:	0e 94 1c 14 	call	0x2838	; 0x2838 <__udivmodhi4>
     43c:	69 2f       	mov	r22, r25
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 74 14 	call	0x28e8	; 0x28e8 <eeprom_write_byte>
     446:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <flag_directie>
     44a:	ff 91       	pop	r31
     44c:	ef 91       	pop	r30
     44e:	bf 91       	pop	r27
     450:	af 91       	pop	r26
     452:	9f 91       	pop	r25
     454:	8f 91       	pop	r24
     456:	7f 91       	pop	r23
     458:	6f 91       	pop	r22
     45a:	5f 91       	pop	r21
     45c:	4f 91       	pop	r20
     45e:	3f 91       	pop	r19
     460:	2f 91       	pop	r18
     462:	0f 90       	pop	r0
     464:	0f be       	out	0x3f, r0	; 63
     466:	0f 90       	pop	r0
     468:	1f 90       	pop	r1
     46a:	18 95       	reti

0000046c <__vector_5>:
     46c:	1f 92       	push	r1
     46e:	0f 92       	push	r0
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	0f 92       	push	r0
     474:	11 24       	eor	r1, r1
     476:	2f 93       	push	r18
     478:	3f 93       	push	r19
     47a:	4f 93       	push	r20
     47c:	5f 93       	push	r21
     47e:	6f 93       	push	r22
     480:	7f 93       	push	r23
     482:	8f 93       	push	r24
     484:	9f 93       	push	r25
     486:	af 93       	push	r26
     488:	bf 93       	push	r27
     48a:	cf 93       	push	r28
     48c:	ef 93       	push	r30
     48e:	ff 93       	push	r31
     490:	c9 b1       	in	r28, 0x09	; 9
     492:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <portDhistory>
     496:	c8 27       	eor	r28, r24
     498:	89 b1       	in	r24, 0x09	; 9
     49a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <portDhistory>
     49e:	c7 ff       	sbrs	r28, 7
     4a0:	0d c0       	rjmp	.+26     	; 0x4bc <__vector_5+0x50>
     4a2:	8c e4       	ldi	r24, 0x4C	; 76
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	0e 94 94 09 	call	0x1328	; 0x1328 <_ZN7Button16statusEv>
     4aa:	88 23       	and	r24, r24
     4ac:	39 f0       	breq	.+14     	; 0x4bc <__vector_5+0x50>
     4ae:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <flag_directie>
     4b2:	81 11       	cpse	r24, r1
     4b4:	03 c0       	rjmp	.+6      	; 0x4bc <__vector_5+0x50>
     4b6:	8f ef       	ldi	r24, 0xFF	; 255
     4b8:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <flag_directie>
     4bc:	c6 ff       	sbrs	r28, 6
     4be:	0d c0       	rjmp	.+26     	; 0x4da <__vector_5+0x6e>
     4c0:	8e e4       	ldi	r24, 0x4E	; 78
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	0e 94 94 09 	call	0x1328	; 0x1328 <_ZN7Button16statusEv>
     4c8:	88 23       	and	r24, r24
     4ca:	39 f0       	breq	.+14     	; 0x4da <__vector_5+0x6e>
     4cc:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <flag_directie>
     4d0:	81 11       	cpse	r24, r1
     4d2:	03 c0       	rjmp	.+6      	; 0x4da <__vector_5+0x6e>
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <flag_directie>
     4da:	ff 91       	pop	r31
     4dc:	ef 91       	pop	r30
     4de:	cf 91       	pop	r28
     4e0:	bf 91       	pop	r27
     4e2:	af 91       	pop	r26
     4e4:	9f 91       	pop	r25
     4e6:	8f 91       	pop	r24
     4e8:	7f 91       	pop	r23
     4ea:	6f 91       	pop	r22
     4ec:	5f 91       	pop	r21
     4ee:	4f 91       	pop	r20
     4f0:	3f 91       	pop	r19
     4f2:	2f 91       	pop	r18
     4f4:	0f 90       	pop	r0
     4f6:	0f be       	out	0x3f, r0	; 63
     4f8:	0f 90       	pop	r0
     4fa:	1f 90       	pop	r1
     4fc:	18 95       	reti

000004fe <_Z11pasi_ramasiv>:
     4fe:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <flag_directie>
     502:	81 30       	cpi	r24, 0x01	; 1
     504:	a1 f4       	brne	.+40     	; 0x52e <_Z11pasi_ramasiv+0x30>
     506:	f8 94       	cli
     508:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <encoderMotorPos>
     50c:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <encoderMotorPos+0x1>
     510:	40 91 d6 01 	lds	r20, 0x01D6	; 0x8001d6 <flag_directie>
     514:	20 91 ce 01 	lds	r18, 0x01CE	; 0x8001ce <pasul>
     518:	30 91 cf 01 	lds	r19, 0x01CF	; 0x8001cf <pasul+0x1>
     51c:	28 1b       	sub	r18, r24
     51e:	39 0b       	sbc	r19, r25
     520:	42 03       	mulsu	r20, r18
     522:	c0 01       	movw	r24, r0
     524:	43 9f       	mul	r20, r19
     526:	90 0d       	add	r25, r0
     528:	11 24       	eor	r1, r1
     52a:	78 94       	sei
     52c:	08 95       	ret
     52e:	f8 94       	cli
     530:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <flag_directie>
     534:	40 91 d7 01 	lds	r20, 0x01D7	; 0x8001d7 <encoderMotorPos>
     538:	50 91 d8 01 	lds	r21, 0x01D8	; 0x8001d8 <encoderMotorPos+0x1>
     53c:	99 27       	eor	r25, r25
     53e:	81 95       	neg	r24
     540:	0c f4       	brge	.+2      	; 0x544 <_Z11pasi_ramasiv+0x46>
     542:	90 95       	com	r25
     544:	84 9f       	mul	r24, r20
     546:	90 01       	movw	r18, r0
     548:	85 9f       	mul	r24, r21
     54a:	30 0d       	add	r19, r0
     54c:	94 9f       	mul	r25, r20
     54e:	30 0d       	add	r19, r0
     550:	11 24       	eor	r1, r1
     552:	78 94       	sei
     554:	c9 01       	movw	r24, r18
     556:	08 95       	ret

00000558 <_Z3pidf>:

int pid(float viteza_referinta){
     558:	4f 92       	push	r4
     55a:	5f 92       	push	r5
     55c:	6f 92       	push	r6
     55e:	7f 92       	push	r7
     560:	8f 92       	push	r8
     562:	9f 92       	push	r9
     564:	af 92       	push	r10
     566:	bf 92       	push	r11
     568:	cf 92       	push	r12
     56a:	df 92       	push	r13
     56c:	ef 92       	push	r14
     56e:	ff 92       	push	r15
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	00 d0       	rcall	.+0      	; 0x576 <_Z3pidf+0x1e>
     576:	00 d0       	rcall	.+0      	; 0x578 <_Z3pidf+0x20>
     578:	cd b7       	in	r28, 0x3d	; 61
     57a:	de b7       	in	r29, 0x3e	; 62
     57c:	6b 01       	movw	r12, r22
     57e:	7c 01       	movw	r14, r24
	static int output;
	static unsigned int z;
	static const float dt=3;//perioada_esantionare

	cli();
     580:	f8 94       	cli
	t = millis()-lastMilli;
     582:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <millis>
     586:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <lastMilli>
     58a:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <lastMilli+0x1>
     58e:	62 1b       	sub	r22, r18
     590:	73 0b       	sbc	r23, r19
     592:	70 93 ca 01 	sts	0x01CA, r23	; 0x8001ca <t+0x1>
     596:	60 93 c9 01 	sts	0x01C9, r22	; 0x8001c9 <t>
	z = millis()-lastMilli2;//timpul scurs de la utima apelare a functiei
     59a:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <millis>
     59e:	20 91 e2 01 	lds	r18, 0x01E2	; 0x8001e2 <lastMilli2>
     5a2:	30 91 e3 01 	lds	r19, 0x01E3	; 0x8001e3 <lastMilli2+0x1>
     5a6:	62 1b       	sub	r22, r18
     5a8:	73 0b       	sbc	r23, r19
     5aa:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <_ZZ3pidfE1z+0x1>
     5ae:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <_ZZ3pidfE1z>
	sei();
     5b2:	78 94       	sei
	
	if (z > dt)//daca au trecut .... milisec atunci se masoara
     5b4:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <_ZZ3pidfE1z>
     5b8:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <_ZZ3pidfE1z+0x1>
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	0e 94 17 0b 	call	0x162e	; 0x162e <__floatunsisf>
     5c4:	20 e0       	ldi	r18, 0x00	; 0
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	40 e4       	ldi	r20, 0x40	; 64
     5ca:	50 e4       	ldi	r21, 0x40	; 64
     5cc:	0e 94 c9 0b 	call	0x1792	; 0x1792 <__gesf2>
     5d0:	18 16       	cp	r1, r24
     5d2:	0c f0       	brlt	.+2      	; 0x5d6 <_Z3pidf+0x7e>
     5d4:	e3 c0       	rjmp	.+454    	; 0x79c <_Z3pidf+0x244>
		float Viteza_masurata;
		static float error;
		static float derivative;

		
		cli();
     5d6:	f8 94       	cli
		lastMilli2 = millis();
     5d8:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <millis>
     5dc:	60 93 e2 01 	sts	0x01E2, r22	; 0x8001e2 <lastMilli2>
     5e0:	70 93 e3 01 	sts	0x01E3, r23	; 0x8001e3 <lastMilli2+0x1>
     5e4:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <lastMilli2+0x2>
     5e8:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <lastMilli2+0x3>
		sei();
     5ec:	78 94       	sei
		
		Viteza_masurata=2158/ff[2];//filtrare viteza masurata
     5ee:	60 90 62 01 	lds	r6, 0x0162	; 0x800162 <ff+0x2>
     5f2:	71 2c       	mov	r7, r1
		error=viteza_referinta-Viteza_masurata/100;//setpoint - measured_value
     5f4:	8e e6       	ldi	r24, 0x6E	; 110
     5f6:	98 e0       	ldi	r25, 0x08	; 8
     5f8:	b3 01       	movw	r22, r6
     5fa:	0e 94 30 14 	call	0x2860	; 0x2860 <__divmodhi4>
     5fe:	07 2e       	mov	r0, r23
     600:	00 0c       	add	r0, r0
     602:	88 0b       	sbc	r24, r24
     604:	99 0b       	sbc	r25, r25
     606:	0e 94 19 0b 	call	0x1632	; 0x1632 <__floatsisf>
     60a:	20 e0       	ldi	r18, 0x00	; 0
     60c:	30 e0       	ldi	r19, 0x00	; 0
     60e:	48 ec       	ldi	r20, 0xC8	; 200
     610:	52 e4       	ldi	r21, 0x42	; 66
     612:	0e 94 6f 0a 	call	0x14de	; 0x14de <__divsf3>
     616:	9b 01       	movw	r18, r22
     618:	ac 01       	movw	r20, r24
     61a:	c7 01       	movw	r24, r14
     61c:	b6 01       	movw	r22, r12
     61e:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__subsf3>
     622:	4b 01       	movw	r8, r22
     624:	5c 01       	movw	r10, r24
		integral = integral + error * dt;
     626:	20 e0       	ldi	r18, 0x00	; 0
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	40 e4       	ldi	r20, 0x40	; 64
     62c:	50 e4       	ldi	r21, 0x40	; 64
     62e:	0e 94 ce 0b 	call	0x179c	; 0x179c <__mulsf3>
     632:	20 91 da 01 	lds	r18, 0x01DA	; 0x8001da <integral>
     636:	30 91 db 01 	lds	r19, 0x01DB	; 0x8001db <integral+0x1>
     63a:	40 91 dc 01 	lds	r20, 0x01DC	; 0x8001dc <integral+0x2>
     63e:	50 91 dd 01 	lds	r21, 0x01DD	; 0x8001dd <integral+0x3>
     642:	0e 94 fe 09 	call	0x13fc	; 0x13fc <__addsf3>
     646:	6b 01       	movw	r12, r22
     648:	7c 01       	movw	r14, r24
     64a:	60 93 da 01 	sts	0x01DA, r22	; 0x8001da <integral>
     64e:	70 93 db 01 	sts	0x01DB, r23	; 0x8001db <integral+0x1>
     652:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <integral+0x2>
     656:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <integral+0x3>
		derivative = (64.7/(ff[0]+ff[1]+ff[2]) - previous_error) / dt;
		output = Kp * error + Ki * integral + Kd * derivative;
     65a:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <ff>
     65e:	60 91 61 01 	lds	r22, 0x0161	; 0x800161 <ff+0x1>
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	68 0f       	add	r22, r24
     666:	71 1d       	adc	r23, r1
     668:	66 0d       	add	r22, r6
     66a:	77 1d       	adc	r23, r7
     66c:	07 2e       	mov	r0, r23
     66e:	00 0c       	add	r0, r0
     670:	88 0b       	sbc	r24, r24
     672:	99 0b       	sbc	r25, r25
     674:	0e 94 19 0b 	call	0x1632	; 0x1632 <__floatsisf>
     678:	9b 01       	movw	r18, r22
     67a:	ac 01       	movw	r20, r24
     67c:	66 e6       	ldi	r22, 0x66	; 102
     67e:	76 e6       	ldi	r23, 0x66	; 102
     680:	81 e8       	ldi	r24, 0x81	; 129
     682:	92 e4       	ldi	r25, 0x42	; 66
     684:	0e 94 6f 0a 	call	0x14de	; 0x14de <__divsf3>
     688:	20 91 de 01 	lds	r18, 0x01DE	; 0x8001de <previous_error>
     68c:	30 91 df 01 	lds	r19, 0x01DF	; 0x8001df <previous_error+0x1>
     690:	40 91 e0 01 	lds	r20, 0x01E0	; 0x8001e0 <previous_error+0x2>
     694:	50 91 e1 01 	lds	r21, 0x01E1	; 0x8001e1 <previous_error+0x3>
     698:	0e 94 fd 09 	call	0x13fa	; 0x13fa <__subsf3>
     69c:	20 e0       	ldi	r18, 0x00	; 0
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	40 e4       	ldi	r20, 0x40	; 64
     6a2:	50 e4       	ldi	r21, 0x40	; 64
     6a4:	0e 94 6f 0a 	call	0x14de	; 0x14de <__divsf3>
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	40 e2       	ldi	r20, 0x20	; 32
     6ae:	52 e4       	ldi	r21, 0x42	; 66
     6b0:	0e 94 ce 0b 	call	0x179c	; 0x179c <__mulsf3>
     6b4:	69 83       	std	Y+1, r22	; 0x01
     6b6:	7a 83       	std	Y+2, r23	; 0x02
     6b8:	8b 83       	std	Y+3, r24	; 0x03
     6ba:	9c 83       	std	Y+4, r25	; 0x04
     6bc:	20 e0       	ldi	r18, 0x00	; 0
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	4c e8       	ldi	r20, 0x8C	; 140
     6c2:	52 e4       	ldi	r21, 0x42	; 66
     6c4:	c5 01       	movw	r24, r10
     6c6:	b4 01       	movw	r22, r8
     6c8:	0e 94 ce 0b 	call	0x179c	; 0x179c <__mulsf3>
     6cc:	2b 01       	movw	r4, r22
     6ce:	3c 01       	movw	r6, r24
     6d0:	20 e0       	ldi	r18, 0x00	; 0
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	40 e2       	ldi	r20, 0x20	; 32
     6d6:	51 e4       	ldi	r21, 0x41	; 65
     6d8:	c7 01       	movw	r24, r14
     6da:	b6 01       	movw	r22, r12
     6dc:	0e 94 ce 0b 	call	0x179c	; 0x179c <__mulsf3>
     6e0:	9b 01       	movw	r18, r22
     6e2:	ac 01       	movw	r20, r24
     6e4:	c3 01       	movw	r24, r6
     6e6:	b2 01       	movw	r22, r4
     6e8:	0e 94 fe 09 	call	0x13fc	; 0x13fc <__addsf3>
     6ec:	9b 01       	movw	r18, r22
     6ee:	ac 01       	movw	r20, r24
     6f0:	69 81       	ldd	r22, Y+1	; 0x01
     6f2:	7a 81       	ldd	r23, Y+2	; 0x02
     6f4:	8b 81       	ldd	r24, Y+3	; 0x03
     6f6:	9c 81       	ldd	r25, Y+4	; 0x04
     6f8:	0e 94 fe 09 	call	0x13fc	; 0x13fc <__addsf3>
     6fc:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <__fixsfsi>
     700:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <__data_end+0x1>
     704:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <__data_end>
		previous_error = error;
     708:	80 92 de 01 	sts	0x01DE, r8	; 0x8001de <previous_error>
     70c:	90 92 df 01 	sts	0x01DF, r9	; 0x8001df <previous_error+0x1>
     710:	a0 92 e0 01 	sts	0x01E0, r10	; 0x8001e0 <previous_error+0x2>
     714:	b0 92 e1 01 	sts	0x01E1, r11	; 0x8001e1 <previous_error+0x3>
		//_______________
		

		if (output > 255)
     718:	6f 3f       	cpi	r22, 0xFF	; 255
     71a:	71 05       	cpc	r23, r1
     71c:	a1 f0       	breq	.+40     	; 0x746 <_Z3pidf+0x1ee>
     71e:	9c f0       	brlt	.+38     	; 0x746 <_Z3pidf+0x1ee>
		{
			output=255;
     720:	8f ef       	ldi	r24, 0xFF	; 255
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <__data_end+0x1>
     728:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
			integral = 22;
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	a0 eb       	ldi	r26, 0xB0	; 176
     732:	b1 e4       	ldi	r27, 0x41	; 65
     734:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <integral>
     738:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <integral+0x1>
     73c:	a0 93 dc 01 	sts	0x01DC, r26	; 0x8001dc <integral+0x2>
     740:	b0 93 dd 01 	sts	0x01DD, r27	; 0x8001dd <integral+0x3>
     744:	17 c0       	rjmp	.+46     	; 0x774 <_Z3pidf+0x21c>
		}
		else if (output < 0)
     746:	77 ff       	sbrs	r23, 7
     748:	15 c0       	rjmp	.+42     	; 0x774 <_Z3pidf+0x21c>
		{
			output=0;
     74a:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <__data_end+0x1>
     74e:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
			if (integral<0)	   {integral=0;  }
     752:	20 e0       	ldi	r18, 0x00	; 0
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	a9 01       	movw	r20, r18
     758:	c7 01       	movw	r24, r14
     75a:	b6 01       	movw	r22, r12
     75c:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__cmpsf2>
     760:	87 ff       	sbrs	r24, 7
     762:	08 c0       	rjmp	.+16     	; 0x774 <_Z3pidf+0x21c>
     764:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <integral>
     768:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <integral+0x1>
     76c:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <integral+0x2>
     770:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <integral+0x3>
		}
		if (flag_directie == 1)
     774:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <flag_directie>
     778:	81 30       	cpi	r24, 0x01	; 1
     77a:	31 f4       	brne	.+12     	; 0x788 <_Z3pidf+0x230>
		{
			mot.forward(output);
     77c:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <__data_end>
     780:	80 e5       	ldi	r24, 0x50	; 80
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	0e 94 ca 00 	call	0x194	; 0x194 <_ZN6Motor17forwardEh>
		}
		if (flag_directie == -1)
     788:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <flag_directie>
     78c:	8f 3f       	cpi	r24, 0xFF	; 255
     78e:	31 f4       	brne	.+12     	; 0x79c <_Z3pidf+0x244>
		{
			mot.reverse(output);
     790:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <__data_end>
     794:	80 e5       	ldi	r24, 0x50	; 80
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	0e 94 db 00 	call	0x1b6	; 0x1b6 <_ZN6Motor17reverseEh>
		

//comandai2c(10, int(encoder_motor.directie()));//begin transmission, send (adress, int), end transmission
	}
	return output;
}
     79c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
     7a0:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <__data_end+0x1>
     7a4:	0f 90       	pop	r0
     7a6:	0f 90       	pop	r0
     7a8:	0f 90       	pop	r0
     7aa:	0f 90       	pop	r0
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	ff 90       	pop	r15
     7b2:	ef 90       	pop	r14
     7b4:	df 90       	pop	r13
     7b6:	cf 90       	pop	r12
     7b8:	bf 90       	pop	r11
     7ba:	af 90       	pop	r10
     7bc:	9f 90       	pop	r9
     7be:	8f 90       	pop	r8
     7c0:	7f 90       	pop	r7
     7c2:	6f 90       	pop	r6
     7c4:	5f 90       	pop	r5
     7c6:	4f 90       	pop	r4
     7c8:	08 95       	ret

000007ca <_Z14activare_motorv>:
 				flag_trimiteI2C=1;
	}
	//comandai2c(10, int(encoderMotorPos));//begin transmission, send (adress, int), end transmission
}

int activare_motor(){ // forward
     7ca:	cf 92       	push	r12
     7cc:	df 92       	push	r13
     7ce:	ef 92       	push	r14
     7d0:	ff 92       	push	r15
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
	if((flag_directie |= 0 || senzor_cap.status() == 1) && flag_low_voltage == 0){ //))))))))))))))))) if(flag_directie == 1 && buton_black.status()==0){
     7d6:	8a e4       	ldi	r24, 0x4A	; 74
     7d8:	91 e0       	ldi	r25, 0x01	; 1
     7da:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <_ZN10SenzorCap16statusEv>
     7de:	90 91 d6 01 	lds	r25, 0x01D6	; 0x8001d6 <flag_directie>
     7e2:	89 2b       	or	r24, r25
     7e4:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <flag_directie>
     7e8:	88 23       	and	r24, r24
     7ea:	09 f4       	brne	.+2      	; 0x7ee <_Z14activare_motorv+0x24>
     7ec:	32 c1       	rjmp	.+612    	; 0xa52 <__stack+0x153>
     7ee:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <flag_low_voltage>
     7f2:	81 11       	cpse	r24, r1
     7f4:	2e c1       	rjmp	.+604    	; 0xa52 <__stack+0x153>
		if (buton_red.status()== 1 || buton_black.status()== 1) {			delay(250); 		}
     7f6:	8e e4       	ldi	r24, 0x4E	; 78
     7f8:	91 e0       	ldi	r25, 0x01	; 1
     7fa:	0e 94 94 09 	call	0x1328	; 0x1328 <_ZN7Button16statusEv>
     7fe:	81 11       	cpse	r24, r1
     800:	06 c0       	rjmp	.+12     	; 0x80e <_Z14activare_motorv+0x44>
     802:	8c e4       	ldi	r24, 0x4C	; 76
     804:	91 e0       	ldi	r25, 0x01	; 1
     806:	0e 94 94 09 	call	0x1328	; 0x1328 <_ZN7Button16statusEv>
     80a:	88 23       	and	r24, r24
     80c:	31 f0       	breq	.+12     	; 0x81a <_Z14activare_motorv+0x50>
     80e:	6a ef       	ldi	r22, 0xFA	; 250
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <delay>
		while (senzor_cap.status() == 1) { //senzor cap activ, se aprinde ledul si se asteapta sa se retraga
     81a:	8a e4       	ldi	r24, 0x4A	; 74
     81c:	91 e0       	ldi	r25, 0x01	; 1
     81e:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <_ZN10SenzorCap16statusEv>
     822:	88 23       	and	r24, r24
     824:	29 f0       	breq	.+10     	; 0x830 <_Z14activare_motorv+0x66>
			led_red.on();
     826:	86 e5       	ldi	r24, 0x56	; 86
     828:	91 e0       	ldi	r25, 0x01	; 1
     82a:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN4Led12onEv>
     82e:	f5 cf       	rjmp	.-22     	; 0x81a <_Z14activare_motorv+0x50>
		}
		flag_power=1;
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <flag_power>
		if (buton_red.status()== 1 &&  buton_black.status()== 1)
     836:	8e e4       	ldi	r24, 0x4E	; 78
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	0e 94 94 09 	call	0x1328	; 0x1328 <_ZN7Button16statusEv>
     83e:	88 23       	and	r24, r24
     840:	31 f0       	breq	.+12     	; 0x84e <_Z14activare_motorv+0x84>
     842:	8c e4       	ldi	r24, 0x4C	; 76
     844:	91 e0       	ldi	r25, 0x01	; 1
     846:	0e 94 94 09 	call	0x1328	; 0x1328 <_ZN7Button16statusEv>
     84a:	81 11       	cpse	r24, r1
     84c:	8f c0       	rjmp	.+286    	; 0x96c <__stack+0x6d>
		{
			flag_directie=0;
			flag_power=0;
		}
		led_red.on();
     84e:	86 e5       	ldi	r24, 0x56	; 86
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN4Led12onEv>
		led_green.off();
     856:	84 e5       	ldi	r24, 0x54	; 84
     858:	91 e0       	ldi	r25, 0x01	; 1
     85a:	0e 94 dd 09 	call	0x13ba	; 0x13ba <_ZN4Led13offEv>
		//verificare pozitie motor si calculare urmatorul stop
		

		//soft start
		cli();
     85e:	f8 94       	cli
		lastMilli=millis();
     860:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <millis>
     864:	60 93 d0 01 	sts	0x01D0, r22	; 0x8001d0 <lastMilli>
     868:	70 93 d1 01 	sts	0x01D1, r23	; 0x8001d1 <lastMilli+0x1>
     86c:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <lastMilli+0x2>
     870:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <lastMilli+0x3>
		lastMilli2 = millis();
     874:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <millis>
     878:	60 93 e2 01 	sts	0x01E2, r22	; 0x8001e2 <lastMilli2>
     87c:	70 93 e3 01 	sts	0x01E3, r23	; 0x8001e3 <lastMilli2+0x1>
     880:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <lastMilli2+0x2>
     884:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <lastMilli2+0x3>
		t = millis()-lastMilli;
     888:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <millis>
     88c:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <lastMilli>
     890:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <lastMilli+0x1>
     894:	62 1b       	sub	r22, r18
     896:	73 0b       	sbc	r23, r19
     898:	70 93 ca 01 	sts	0x01CA, r23	; 0x8001ca <t+0x1>
     89c:	60 93 c9 01 	sts	0x01C9, r22	; 0x8001c9 <t>
		sei();
     8a0:	78 94       	sei
		float a = acceleratia; //acceleratia
		int timp_acceleratie;
		if (pasul >125)
     8a2:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <pasul>
     8a6:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <pasul+0x1>
     8aa:	8e 37       	cpi	r24, 0x7E	; 126
     8ac:	91 05       	cpc	r25, r1
     8ae:	18 f4       	brcc	.+6      	; 0x8b6 <_Z14activare_motorv+0xec>
		{
			timp_acceleratie = 145;
		}
		else
		{
			timp_acceleratie = 90;
     8b0:	ca e5       	ldi	r28, 0x5A	; 90
     8b2:	d0 e0       	ldi	r29, 0x00	; 0
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <_Z14activare_motorv+0xf0>
		sei();
		float a = acceleratia; //acceleratia
		int timp_acceleratie;
		if (pasul >125)
		{
			timp_acceleratie = 145;
     8b6:	c1 e9       	ldi	r28, 0x91	; 145
     8b8:	d0 e0       	ldi	r29, 0x00	; 0
		{
			timp_acceleratie = 90;
		}
		
		int pozitie_deceleratie;
		cli();
     8ba:	f8 94       	cli
		encoderlast=encoderMotorPos;
     8bc:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <encoderMotorPos>
     8c0:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <encoderMotorPos+0x1>
     8c4:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <encoderlast+0x1>
     8c8:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <encoderlast>
		sei();
     8cc:	78 94       	sei
		float v; //viteza
		float d; //distanta

		//secventa 1 accelerare
		while((t < timp_acceleratie) && (flag_low_voltage ==0) )   //timp_acceleratie
     8ce:	60 91 c9 01 	lds	r22, 0x01C9	; 0x8001c9 <t>
     8d2:	70 91 ca 01 	lds	r23, 0x01CA	; 0x8001ca <t+0x1>
     8d6:	6c 17       	cp	r22, r28
     8d8:	7d 07       	cpc	r23, r29
     8da:	88 f4       	brcc	.+34     	; 0x8fe <_Z14activare_motorv+0x134>
     8dc:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <flag_low_voltage>
     8e0:	81 11       	cpse	r24, r1
     8e2:	0d c0       	rjmp	.+26     	; 0x8fe <_Z14activare_motorv+0x134>
		{
			v=a*t;
			pid(v);// calculare pid si comanda motor
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	0e 94 17 0b 	call	0x162e	; 0x162e <__floatunsisf>
     8ec:	2f e6       	ldi	r18, 0x6F	; 111
     8ee:	32 e1       	ldi	r19, 0x12	; 18
     8f0:	43 e8       	ldi	r20, 0x83	; 131
     8f2:	5c e3       	ldi	r21, 0x3C	; 60
     8f4:	0e 94 ce 0b 	call	0x179c	; 0x179c <__mulsf3>
     8f8:	0e 94 ac 02 	call	0x558	; 0x558 <_Z3pidf>
     8fc:	e8 cf       	rjmp	.-48     	; 0x8ce <_Z14activare_motorv+0x104>
		}
		//secventa 1 end accelerare

		//secventa 2 constant speed
		cli();
     8fe:	f8 94       	cli
		lastMilli=millis();
     900:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <millis>
     904:	60 93 d0 01 	sts	0x01D0, r22	; 0x8001d0 <lastMilli>
     908:	70 93 d1 01 	sts	0x01D1, r23	; 0x8001d1 <lastMilli+0x1>
     90c:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <lastMilli+0x2>
     910:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <lastMilli+0x3>
		t = millis()-lastMilli;
     914:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <millis>
     918:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <lastMilli>
     91c:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <lastMilli+0x1>
     920:	62 1b       	sub	r22, r18
     922:	73 0b       	sbc	r23, r19
     924:	70 93 ca 01 	sts	0x01CA, r23	; 0x8001ca <t+0x1>
     928:	60 93 c9 01 	sts	0x01C9, r22	; 0x8001c9 <t>
		sei();
     92c:	78 94       	sei
		v=a*timp_acceleratie;
     92e:	be 01       	movw	r22, r28
     930:	dd 0f       	add	r29, r29
     932:	88 0b       	sbc	r24, r24
     934:	99 0b       	sbc	r25, r25
     936:	0e 94 19 0b 	call	0x1632	; 0x1632 <__floatsisf>
     93a:	2f e6       	ldi	r18, 0x6F	; 111
     93c:	32 e1       	ldi	r19, 0x12	; 18
     93e:	43 e8       	ldi	r20, 0x83	; 131
     940:	5c e3       	ldi	r21, 0x3C	; 60
     942:	0e 94 ce 0b 	call	0x179c	; 0x179c <__mulsf3>
     946:	6b 01       	movw	r12, r22
     948:	7c 01       	movw	r14, r24
		d=((a*timp_acceleratie)/2)*timp_acceleratie;
		pozitie_deceleratie = 50;
		while(((pasi_ramasi() >= pozitie_deceleratie) || (flag_power == 1)) && (flag_low_voltage == 0) ) // >=pozitie_deceleratie
     94a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_Z11pasi_ramasiv>
     94e:	c2 97       	sbiw	r24, 0x32	; 50
     950:	20 f4       	brcc	.+8      	; 0x95a <__stack+0x5b>
     952:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <flag_power>
     956:	88 23       	and	r24, r24
     958:	71 f0       	breq	.+28     	; 0x976 <__stack+0x77>
     95a:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <flag_low_voltage>
     95e:	81 11       	cpse	r24, r1
     960:	0a c0       	rjmp	.+20     	; 0x976 <__stack+0x77>
		{
			pid(v);
     962:	c7 01       	movw	r24, r14
     964:	b6 01       	movw	r22, r12
     966:	0e 94 ac 02 	call	0x558	; 0x558 <_Z3pidf>
     96a:	ef cf       	rjmp	.-34     	; 0x94a <__stack+0x4b>
			led_red.on();
		}
		flag_power=1;
		if (buton_red.status()== 1 &&  buton_black.status()== 1)
		{
			flag_directie=0;
     96c:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <flag_directie>
			flag_power=0;
     970:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <flag_power>
     974:	6c cf       	rjmp	.-296    	; 0x84e <_Z14activare_motorv+0x84>
		{
			pid(v);
		}
		//secventa 2 end constant speed
		//secventa 3 deccelerare
		cli();
     976:	f8 94       	cli
		lastMilli=millis();
     978:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <millis>
     97c:	60 93 d0 01 	sts	0x01D0, r22	; 0x8001d0 <lastMilli>
     980:	70 93 d1 01 	sts	0x01D1, r23	; 0x8001d1 <lastMilli+0x1>
     984:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <lastMilli+0x2>
     988:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <lastMilli+0x3>
		t = millis()-lastMilli;
     98c:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <millis>
     990:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <lastMilli>
     994:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <lastMilli+0x1>
     998:	62 1b       	sub	r22, r18
     99a:	73 0b       	sbc	r23, r19
     99c:	70 93 ca 01 	sts	0x01CA, r23	; 0x8001ca <t+0x1>
     9a0:	60 93 c9 01 	sts	0x01C9, r22	; 0x8001c9 <t>
		sei();
     9a4:	78 94       	sei
		while(pasi_ramasi() >= 5){//
     9a6:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_Z11pasi_ramasiv>
     9aa:	05 97       	sbiw	r24, 0x05	; 5
     9ac:	68 f1       	brcs	.+90     	; 0xa08 <__stack+0x109>
			v=sqrt((pasi_ramasi()-3)*2*acceleratia);//viteza de referinta se calculeaza in funcie de distanta ramasa v(d)
     9ae:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_Z11pasi_ramasiv>
     9b2:	83 50       	subi	r24, 0x03	; 3
     9b4:	90 48       	sbci	r25, 0x80	; 128
     9b6:	bc 01       	movw	r22, r24
     9b8:	66 0f       	add	r22, r22
     9ba:	77 1f       	adc	r23, r23
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	0e 94 17 0b 	call	0x162e	; 0x162e <__floatunsisf>
     9c4:	2f e6       	ldi	r18, 0x6F	; 111
     9c6:	32 e1       	ldi	r19, 0x12	; 18
     9c8:	43 e8       	ldi	r20, 0x83	; 131
     9ca:	5c e3       	ldi	r21, 0x3C	; 60
     9cc:	0e 94 ce 0b 	call	0x179c	; 0x179c <__mulsf3>
     9d0:	0e 94 41 0c 	call	0x1882	; 0x1882 <sqrt>
     9d4:	6b 01       	movw	r12, r22
     9d6:	7c 01       	movw	r14, r24
			if (v < 0.1)
     9d8:	2d ec       	ldi	r18, 0xCD	; 205
     9da:	3c ec       	ldi	r19, 0xCC	; 204
     9dc:	4c ec       	ldi	r20, 0xCC	; 204
     9de:	5d e3       	ldi	r21, 0x3D	; 61
     9e0:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__cmpsf2>
     9e4:	87 ff       	sbrs	r24, 7
     9e6:	07 c0       	rjmp	.+14     	; 0x9f6 <__stack+0xf7>
			{
				v=0.1;
     9e8:	8d ec       	ldi	r24, 0xCD	; 205
     9ea:	c8 2e       	mov	r12, r24
     9ec:	8c ec       	ldi	r24, 0xCC	; 204
     9ee:	d8 2e       	mov	r13, r24
     9f0:	ed 2c       	mov	r14, r13
     9f2:	8d e3       	ldi	r24, 0x3D	; 61
     9f4:	f8 2e       	mov	r15, r24
			}
			pid(v);//pwm_motor=pid(v3);
     9f6:	c7 01       	movw	r24, r14
     9f8:	b6 01       	movw	r22, r12
     9fa:	0e 94 ac 02 	call	0x558	; 0x558 <_Z3pidf>
     9fe:	d3 cf       	rjmp	.-90     	; 0x9a6 <__stack+0xa7>
		//secventa 4 - viteza constanta la oprire

		do
		{
			pid(v); //viteza-referinta v4 = 0.1
		} while ((flag_directie |= 0) && (flag_low_voltage == 0));
     a00:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <flag_low_voltage>
     a04:	81 11       	cpse	r24, r1
     a06:	0c c0       	rjmp	.+24     	; 0xa20 <__stack+0x121>

		//secventa 4 - viteza constanta la oprire

		do
		{
			pid(v); //viteza-referinta v4 = 0.1
     a08:	6d ec       	ldi	r22, 0xCD	; 205
     a0a:	7c ec       	ldi	r23, 0xCC	; 204
     a0c:	8c ec       	ldi	r24, 0xCC	; 204
     a0e:	9d e3       	ldi	r25, 0x3D	; 61
     a10:	0e 94 ac 02 	call	0x558	; 0x558 <_Z3pidf>
		} while ((flag_directie |= 0) && (flag_low_voltage == 0));
     a14:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <flag_directie>
     a18:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <flag_directie>
     a1c:	81 11       	cpse	r24, r1
     a1e:	f0 cf       	rjmp	.-32     	; 0xa00 <__stack+0x101>
		//secventa 4 end viteza constanta la oprire
		flag_trimiteI2C=1;
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <flag_trimiteI2C>
		previous_error=0;//eroarea cumulata de la pid se reseteaza
     a26:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <previous_error>
     a2a:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <previous_error+0x1>
     a2e:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <previous_error+0x2>
     a32:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <previous_error+0x3>
		integral=0;//eroarea cumulata de la pid se reseteaza
     a36:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <integral>
     a3a:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <integral+0x1>
     a3e:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <integral+0x2>
     a42:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <integral+0x3>
		ff[0]=0;
     a46:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <ff>
		ff[1]=0;
     a4a:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <ff+0x1>
		ff[2]=0;
     a4e:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <ff+0x2>
// 		 				Wire.beginTransmission(10);
// 						Wire.write(encoderMotorPos);
// 		 				Wire.endTransmission();
	}
	return 0;
}
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	df 91       	pop	r29
     a58:	cf 91       	pop	r28
     a5a:	ff 90       	pop	r15
     a5c:	ef 90       	pop	r14
     a5e:	df 90       	pop	r13
     a60:	cf 90       	pop	r12
     a62:	08 95       	ret

00000a64 <_Z19reset_pid_variablesv>:
	}
	return output;
}

void reset_pid_variables(){
	previous_error=0;//eroarea cumulata de la pid se reseteaza
     a64:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <previous_error>
     a68:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <previous_error+0x1>
     a6c:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <previous_error+0x2>
     a70:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <previous_error+0x3>
	integral=0;//eroarea cumulata de la pid se reseteaza
     a74:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <integral>
     a78:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <integral+0x1>
     a7c:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <integral+0x2>
     a80:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <integral+0x3>
	ff[0]=0;
     a84:	e0 e6       	ldi	r30, 0x60	; 96
     a86:	f1 e0       	ldi	r31, 0x01	; 1
     a88:	10 82       	st	Z, r1
	ff[1]=0;
     a8a:	11 82       	std	Z+1, r1	; 0x01
	ff[2]=0;
     a8c:	12 82       	std	Z+2, r1	; 0x02
     a8e:	08 95       	ret

00000a90 <_Z16comands_handlingv>:
		flag_acknoledge_i2c  = 0;
	}
	return 0;
}

int comands_handling() {
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
	uint8_t command, parameter;
	command = command_recived_i2c[2];
	parameter = command_recived_i2c[3];
     a94:	c0 91 5b 01 	lds	r28, 0x015B	; 0x80015b <command_recived_i2c+0x3>
	int micro_step;
	int steps_forward;
	int steps_back;
	int step_size;
	int ecoder_plus_1;//numar de micropasi de ajustat inainte
	switch (command) {
     a98:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <command_recived_i2c+0x2>
     a9c:	8d 34       	cpi	r24, 0x4D	; 77
     a9e:	01 f1       	breq	.+64     	; 0xae0 <_Z16comands_handlingv+0x50>
     aa0:	38 f4       	brcc	.+14     	; 0xab0 <_Z16comands_handlingv+0x20>
     aa2:	85 34       	cpi	r24, 0x45	; 69
     aa4:	09 f4       	brne	.+2      	; 0xaa8 <_Z16comands_handlingv+0x18>
     aa6:	4f c0       	rjmp	.+158    	; 0xb46 <_Z16comands_handlingv+0xb6>
     aa8:	86 34       	cpi	r24, 0x46	; 70
     aaa:	09 f4       	brne	.+2      	; 0xaae <_Z16comands_handlingv+0x1e>
     aac:	4c c0       	rjmp	.+152    	; 0xb46 <_Z16comands_handlingv+0xb6>
     aae:	4d c0       	rjmp	.+154    	; 0xb4a <_Z16comands_handlingv+0xba>
     ab0:	80 35       	cpi	r24, 0x50	; 80
     ab2:	21 f0       	breq	.+8      	; 0xabc <_Z16comands_handlingv+0x2c>
     ab4:	82 35       	cpi	r24, 0x52	; 82
     ab6:	09 f4       	brne	.+2      	; 0xaba <_Z16comands_handlingv+0x2a>
     ab8:	46 c0       	rjmp	.+140    	; 0xb46 <_Z16comands_handlingv+0xb6>
     aba:	47 c0       	rjmp	.+142    	; 0xb4a <_Z16comands_handlingv+0xba>
		case 0x50: //setare marime pas
		lungime_pas_mm = parameter; //dimensiunea pasului in mm
     abc:	c0 93 cc 01 	sts	0x01CC, r28	; 0x8001cc <lungime_pas_mm>
		pasul = lungime_pas_mm*125/2;
     ac0:	2d e7       	ldi	r18, 0x7D	; 125
     ac2:	c2 9f       	mul	r28, r18
     ac4:	c0 01       	movw	r24, r0
     ac6:	11 24       	eor	r1, r1
     ac8:	95 95       	asr	r25
     aca:	87 95       	ror	r24
     acc:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <pasul+0x1>
     ad0:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <pasul>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator const uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     ad4:	6c 2f       	mov	r22, r28
     ad6:	8e e6       	ldi	r24, 0x6E	; 110
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	0e 94 74 14 	call	0x28e8	; 0x28e8 <eeprom_write_byte>
     ade:	33 c0       	rjmp	.+102    	; 0xb46 <_Z16comands_handlingv+0xb6>
		flag_acknoledge_i2c = 1;
		break;
		
		case 0x4D:      //ajustaare micro pasi
		micro_step = parameter;
		led_red.on();
     ae0:	86 e5       	ldi	r24, 0x56	; 86
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN4Led12onEv>
		cli();
     ae8:	f8 94       	cli
		ecoder_plus_1= encoderMotorPos + micro_step;
     aea:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <encoderMotorPos>
     aee:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <encoderMotorPos+0x1>
     af2:	9c 01       	movw	r18, r24
     af4:	2c 0f       	add	r18, r28
     af6:	31 1d       	adc	r19, r1
     af8:	e9 01       	movw	r28, r18
		sei();
     afa:	78 94       	sei
		while (ecoder_plus_1 > encoderMotorPos)
     afc:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <encoderMotorPos>
     b00:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <encoderMotorPos+0x1>
     b04:	8c 17       	cp	r24, r28
     b06:	9d 07       	cpc	r25, r29
     b08:	38 f4       	brcc	.+14     	; 0xb18 <_Z16comands_handlingv+0x88>
		{
			pid(0.1);
     b0a:	6d ec       	ldi	r22, 0xCD	; 205
     b0c:	7c ec       	ldi	r23, 0xCC	; 204
     b0e:	8c ec       	ldi	r24, 0xCC	; 204
     b10:	9d e3       	ldi	r25, 0x3D	; 61
     b12:	0e 94 ac 02 	call	0x558	; 0x558 <_Z3pidf>
		micro_step = parameter;
		led_red.on();
		cli();
		ecoder_plus_1= encoderMotorPos + micro_step;
		sei();
		while (ecoder_plus_1 > encoderMotorPos)
     b16:	f2 cf       	rjmp	.-28     	; 0xafc <_Z16comands_handlingv+0x6c>
		{
			pid(0.1);
		}
		mot.braking();
     b18:	80 e5       	ldi	r24, 0x50	; 80
     b1a:	91 e0       	ldi	r25, 0x01	; 1
     b1c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_ZN6Motor17brakingEv>
		led_red.off();
     b20:	86 e5       	ldi	r24, 0x56	; 86
     b22:	91 e0       	ldi	r25, 0x01	; 1
     b24:	0e 94 dd 09 	call	0x13ba	; 0x13ba <_ZN4Led13offEv>
		delay(25);
     b28:	69 e1       	ldi	r22, 0x19	; 25
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <delay>
		cli();
     b34:	f8 94       	cli
		encoderMotorPos=1;
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <encoderMotorPos+0x1>
     b3e:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <encoderMotorPos>
		sei();
     b42:	78 94       	sei
     b44:	03 c0       	rjmp	.+6      	; 0xb4c <_Z16comands_handlingv+0xbc>
		break;
		
		case 0x45:       //evacuare feeder
		step_size = parameter;
		//flag step_back= TRUE;
		flag_acknoledge_i2c = 1;
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	01 c0       	rjmp	.+2      	; 0xb4c <_Z16comands_handlingv+0xbc>
		break;
		default:
		// if nothing else matches, do the default
		flag_acknoledge_i2c = 2;
     b4a:	82 e0       	ldi	r24, 0x02	; 2
     b4c:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <flag_acknoledge_i2c>
		break;
	}
	return 0;
}
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	df 91       	pop	r29
     b56:	cf 91       	pop	r28
     b58:	08 95       	ret

00000b5a <_Z13sleep_enablefv>:

int sleep_enablef(){// going to sleep is voltage BOD detection
	cli();
     b5a:	f8 94       	cli
	if ((flag_low_voltage == 1) || !(PINC & (1 << PINC2)) )//  verificare pin de brownout tensiune
     b5c:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <flag_low_voltage>
     b60:	81 30       	cpi	r24, 0x01	; 1
     b62:	39 f0       	breq	.+14     	; 0xb72 <_Z13sleep_enablefv+0x18>
     b64:	32 9b       	sbis	0x06, 2	; 6
     b66:	05 c0       	rjmp	.+10     	; 0xb72 <_Z13sleep_enablefv+0x18>
		led_red.off();
		flag_directie=0;
		flag_low_voltage = 0;
	}
	else{
		led_green.on();
     b68:	84 e5       	ldi	r24, 0x54	; 84
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN4Led12onEv>
     b70:	38 c0       	rjmp	.+112    	; 0xbe2 <_Z13sleep_enablefv+0x88>

int sleep_enablef(){// going to sleep is voltage BOD detection
	cli();
	if ((flag_low_voltage == 1) || !(PINC & (1 << PINC2)) )//  verificare pin de brownout tensiune
	{
		mot.braking();
     b72:	80 e5       	ldi	r24, 0x50	; 80
     b74:	91 e0       	ldi	r25, 0x01	; 1
     b76:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_ZN6Motor17brakingEv>
		led_red.off();
     b7a:	86 e5       	ldi	r24, 0x56	; 86
     b7c:	91 e0       	ldi	r25, 0x01	; 1
     b7e:	0e 94 dd 09 	call	0x13ba	; 0x13ba <_ZN4Led13offEv>
		led_green.off();
     b82:	84 e5       	ldi	r24, 0x54	; 84
     b84:	91 e0       	ldi	r25, 0x01	; 1
     b86:	0e 94 dd 09 	call	0x13ba	; 0x13ba <_ZN4Led13offEv>
		set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     b8a:	83 b7       	in	r24, 0x33	; 51
     b8c:	81 7f       	andi	r24, 0xF1	; 241
     b8e:	84 60       	ori	r24, 0x04	; 4
     b90:	83 bf       	out	0x33, r24	; 51
		PCICR &= ~(1 << PCIE2) & ~(1 << PCIE0);//disable interrup pcie2 si pcie1
     b92:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
     b96:	8a 7f       	andi	r24, 0xFA	; 250
     b98:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
		sleep_enable();
     b9c:	83 b7       	in	r24, 0x33	; 51
     b9e:	81 60       	ori	r24, 0x01	; 1
     ba0:	83 bf       	out	0x33, r24	; 51
		sei();
     ba2:	78 94       	sei
		sleep_cpu();
     ba4:	88 95       	sleep
		sleep_disable();
     ba6:	83 b7       	in	r24, 0x33	; 51
     ba8:	8e 7f       	andi	r24, 0xFE	; 254
     baa:	83 bf       	out	0x33, r24	; 51
		//cli();
		//CLKPR &= ~(1<<CLKPS0);
		//CLKPR &= ~(1<<CLKPCE);  // disable change of the clock prescaler
		//sei();
		PCICR |= (1 << PCIE2) | (1 << PCIE0);//enable interrup pcie2 si pcie1
     bac:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
     bb0:	85 60       	ori	r24, 0x05	; 5
     bb2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
		led_green.on();
     bb6:	84 e5       	ldi	r24, 0x54	; 84
     bb8:	91 e0       	ldi	r25, 0x01	; 1
     bba:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN4Led12onEv>
		led_red.on();
     bbe:	86 e5       	ldi	r24, 0x56	; 86
     bc0:	91 e0       	ldi	r25, 0x01	; 1
     bc2:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN4Led12onEv>
		delay(250);
     bc6:	6a ef       	ldi	r22, 0xFA	; 250
     bc8:	70 e0       	ldi	r23, 0x00	; 0
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <delay>
		//clear interrupt flags
		// 		EIFR |= (1<<INTF0);
		// 		PCIFR |= (1<<PCIF0) | (1<<PCIF2);
		led_red.off();
     bd2:	86 e5       	ldi	r24, 0x56	; 86
     bd4:	91 e0       	ldi	r25, 0x01	; 1
     bd6:	0e 94 dd 09 	call	0x13ba	; 0x13ba <_ZN4Led13offEv>
		flag_directie=0;
     bda:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <flag_directie>
		flag_low_voltage = 0;
     bde:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <flag_low_voltage>
	}
	else{
		led_green.on();
	}
	sei();
     be2:	78 94       	sei
	return 0;
}
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	08 95       	ret

00000bea <_Z23citire_secventa_butoaneh>:


uint8_t citire_secventa_butoane(uint8_t a) {
     bea:	cf 92       	push	r12
     bec:	df 92       	push	r13
     bee:	ff 92       	push	r15
     bf0:	0f 93       	push	r16
     bf2:	1f 93       	push	r17
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
     bf8:	f8 2e       	mov	r15, r24
	int8_t v = 0;
	int i = 0;
	int8_t j = 2;
     bfa:	c2 e0       	ldi	r28, 0x02	; 2
}


uint8_t citire_secventa_butoane(uint8_t a) {
	int8_t v = 0;
	int i = 0;
     bfc:	00 e0       	ldi	r16, 0x00	; 0
     bfe:	10 e0       	ldi	r17, 0x00	; 0
	return 0;
}


uint8_t citire_secventa_butoane(uint8_t a) {
	int8_t v = 0;
     c00:	d0 e0       	ldi	r29, 0x00	; 0
	int i = 0;
	int8_t j = 2;
	while ( (j > -1) && (i < 1000)) {
		if (flag_directie == 1) {
			v |= (1 << j);
     c02:	cc 24       	eor	r12, r12
     c04:	c3 94       	inc	r12
     c06:	d1 2c       	mov	r13, r1
uint8_t citire_secventa_butoane(uint8_t a) {
	int8_t v = 0;
	int i = 0;
	int8_t j = 2;
	while ( (j > -1) && (i < 1000)) {
		if (flag_directie == 1) {
     c08:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <flag_directie>
     c0c:	81 30       	cpi	r24, 0x01	; 1
     c0e:	61 f4       	brne	.+24     	; 0xc28 <_Z23citire_secventa_butoaneh+0x3e>
			v |= (1 << j);
     c10:	c6 01       	movw	r24, r12
     c12:	0c 2e       	mov	r0, r28
     c14:	01 c0       	rjmp	.+2      	; 0xc18 <_Z23citire_secventa_butoaneh+0x2e>
     c16:	88 0f       	add	r24, r24
     c18:	0a 94       	dec	r0
     c1a:	ea f7       	brpl	.-6      	; 0xc16 <_Z23citire_secventa_butoaneh+0x2c>
     c1c:	d8 2b       	or	r29, r24
			flag_directie = 0;
     c1e:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <flag_directie>
			j--;
     c22:	c1 50       	subi	r28, 0x01	; 1
			i = 0;
     c24:	00 e0       	ldi	r16, 0x00	; 0
     c26:	10 e0       	ldi	r17, 0x00	; 0
		}
		if (flag_directie == -1) {
     c28:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <flag_directie>
     c2c:	8f 3f       	cpi	r24, 0xFF	; 255
     c2e:	69 f4       	brne	.+26     	; 0xc4a <_Z23citire_secventa_butoaneh+0x60>
			v &= ~(1 << j);
     c30:	c6 01       	movw	r24, r12
     c32:	0c 2e       	mov	r0, r28
     c34:	01 c0       	rjmp	.+2      	; 0xc38 <_Z23citire_secventa_butoaneh+0x4e>
     c36:	88 0f       	add	r24, r24
     c38:	0a 94       	dec	r0
     c3a:	ea f7       	brpl	.-6      	; 0xc36 <_Z23citire_secventa_butoaneh+0x4c>
     c3c:	80 95       	com	r24
     c3e:	d8 23       	and	r29, r24
			flag_directie = 0;
     c40:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <flag_directie>
			j--;
     c44:	c1 50       	subi	r28, 0x01	; 1
			i = 0;
     c46:	00 e0       	ldi	r16, 0x00	; 0
     c48:	10 e0       	ldi	r17, 0x00	; 0
		}
		if (j == -1) {
     c4a:	cf 3f       	cpi	r28, 0xFF	; 255
     c4c:	09 f4       	brne	.+2      	; 0xc50 <_Z23citire_secventa_butoaneh+0x66>
			a = v;
     c4e:	fd 2e       	mov	r15, r29
		}
		i++;
     c50:	0f 5f       	subi	r16, 0xFF	; 255
     c52:	1f 4f       	sbci	r17, 0xFF	; 255
		delay(10);
     c54:	6a e0       	ldi	r22, 0x0A	; 10
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <delay>

uint8_t citire_secventa_butoane(uint8_t a) {
	int8_t v = 0;
	int i = 0;
	int8_t j = 2;
	while ( (j > -1) && (i < 1000)) {
     c60:	c7 fd       	sbrc	r28, 7
     c62:	04 c0       	rjmp	.+8      	; 0xc6c <_Z23citire_secventa_butoaneh+0x82>
     c64:	08 3e       	cpi	r16, 0xE8	; 232
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	18 07       	cpc	r17, r24
     c6a:	74 f2       	brlt	.-100    	; 0xc08 <_Z23citire_secventa_butoaneh+0x1e>
		}
		i++;
		delay(10);
	}
	return a;
}
     c6c:	8f 2d       	mov	r24, r15
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	1f 91       	pop	r17
     c74:	0f 91       	pop	r16
     c76:	ff 90       	pop	r15
     c78:	df 90       	pop	r13
     c7a:	cf 90       	pop	r12
     c7c:	08 95       	ret

00000c7e <_Z18press_both_buttonsv>:
	ff[1]=0;
	ff[2]=0;
}


void press_both_buttons(){//verificare daca se intra in mod de reglare pozitie
     c7e:	ef 92       	push	r14
     c80:	ff 92       	push	r15
     c82:	0f 93       	push	r16
     c84:	1f 93       	push	r17
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29
	if (buton_red.status() == 1 && buton_black.status() == 1) //ambele butoane apasate
     c8a:	8e e4       	ldi	r24, 0x4E	; 78
     c8c:	91 e0       	ldi	r25, 0x01	; 1
     c8e:	0e 94 94 09 	call	0x1328	; 0x1328 <_ZN7Button16statusEv>
     c92:	88 23       	and	r24, r24
     c94:	09 f4       	brne	.+2      	; 0xc98 <_Z18press_both_buttonsv+0x1a>
     c96:	de c0       	rjmp	.+444    	; 0xe54 <_Z18press_both_buttonsv+0x1d6>
     c98:	8c e4       	ldi	r24, 0x4C	; 76
     c9a:	91 e0       	ldi	r25, 0x01	; 1
     c9c:	0e 94 94 09 	call	0x1328	; 0x1328 <_ZN7Button16statusEv>
     ca0:	88 23       	and	r24, r24
     ca2:	09 f4       	brne	.+2      	; 0xca6 <_Z18press_both_buttonsv+0x28>
     ca4:	d7 c0       	rjmp	.+430    	; 0xe54 <_Z18press_both_buttonsv+0x1d6>
	{
		int n;
		float d;
		boolean flag_mod_setare_pozitie;
		led_red.on(); //se aprind ambele leduri
     ca6:	86 e5       	ldi	r24, 0x56	; 86
     ca8:	91 e0       	ldi	r25, 0x01	; 1
     caa:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN4Led12onEv>
		while (buton_red.status() == 1 || buton_black.status() == 1) {
     cae:	8e e4       	ldi	r24, 0x4E	; 78
     cb0:	91 e0       	ldi	r25, 0x01	; 1
     cb2:	0e 94 94 09 	call	0x1328	; 0x1328 <_ZN7Button16statusEv>
     cb6:	81 11       	cpse	r24, r1
     cb8:	b6 c0       	rjmp	.+364    	; 0xe26 <_Z18press_both_buttonsv+0x1a8>
     cba:	8c e4       	ldi	r24, 0x4C	; 76
     cbc:	91 e0       	ldi	r25, 0x01	; 1
     cbe:	0e 94 94 09 	call	0x1328	; 0x1328 <_ZN7Button16statusEv>
     cc2:	81 11       	cpse	r24, r1
     cc4:	b0 c0       	rjmp	.+352    	; 0xe26 <_Z18press_both_buttonsv+0x1a8>
					while (ecoder_plus_1 > encoderMotorPos)
					{
						pid(0.1);
					}
					mot.braking();
					encoderMotorPos=1;
     cc6:	01 e0       	ldi	r16, 0x01	; 1
     cc8:	10 e0       	ldi	r17, 0x00	; 0
				switch (cod_butoane) {
					case 1:
					led_red.on();
					delay(1000);
					cod_butoane = citire_secventa_butoane(8);
					if(cod_butoane >= 8){lungime_pas_mm=2;}
     cca:	d2 e0       	ldi	r29, 0x02	; 2
		}
		
		//ajustare microstep
		while (flag_mod_setare_pozitie == true)// daca flag_mod_setare_pozitie este adevarat, atunci se intra in mod de reglare pozitie
		{
			led_red.off();
     ccc:	86 e5       	ldi	r24, 0x56	; 86
     cce:	91 e0       	ldi	r25, 0x01	; 1

			}
		}
		
		//ajustare microstep
		while (flag_mod_setare_pozitie == true)// daca flag_mod_setare_pozitie este adevarat, atunci se intra in mod de reglare pozitie
     cd0:	cc 23       	and	r28, r28
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <_Z18press_both_buttonsv+0x58>
     cd4:	a0 c0       	rjmp	.+320    	; 0xe16 <_Z18press_both_buttonsv+0x198>
		{
			led_red.off();
     cd6:	0e 94 dd 09 	call	0x13ba	; 0x13ba <_ZN4Led13offEv>
			while (flag_directie == 1) {
     cda:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <flag_directie>
     cde:	81 30       	cpi	r24, 0x01	; 1
     ce0:	09 f0       	breq	.+2      	; 0xce4 <_Z18press_both_buttonsv+0x66>
     ce2:	4e c0       	rjmp	.+156    	; 0xd80 <_Z18press_both_buttonsv+0x102>
				if (buton_red.status() == 1)//daca buton rosu este apasat atunci se inainteaza o pozitie
     ce4:	8e e4       	ldi	r24, 0x4E	; 78
     ce6:	91 e0       	ldi	r25, 0x01	; 1
     ce8:	0e 94 94 09 	call	0x1328	; 0x1328 <_ZN7Button16statusEv>
     cec:	88 23       	and	r24, r24
     cee:	69 f1       	breq	.+90     	; 0xd4a <_Z18press_both_buttonsv+0xcc>
				{
					led_red.on();
     cf0:	86 e5       	ldi	r24, 0x56	; 86
     cf2:	91 e0       	ldi	r25, 0x01	; 1
     cf4:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN4Led12onEv>
					cli();
     cf8:	f8 94       	cli
					int ecoder_plus_1= encoderMotorPos + 1;
     cfa:	e0 90 d7 01 	lds	r14, 0x01D7	; 0x8001d7 <encoderMotorPos>
     cfe:	f0 90 d8 01 	lds	r15, 0x01D8	; 0x8001d8 <encoderMotorPos+0x1>
     d02:	2f ef       	ldi	r18, 0xFF	; 255
     d04:	e2 1a       	sub	r14, r18
     d06:	f2 0a       	sbc	r15, r18
					sei();
     d08:	78 94       	sei
					while (ecoder_plus_1 > encoderMotorPos)
     d0a:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <encoderMotorPos>
     d0e:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <encoderMotorPos+0x1>
     d12:	8e 15       	cp	r24, r14
     d14:	9f 05       	cpc	r25, r15
     d16:	38 f4       	brcc	.+14     	; 0xd26 <_Z18press_both_buttonsv+0xa8>
					{
						pid(0.1);
     d18:	6d ec       	ldi	r22, 0xCD	; 205
     d1a:	7c ec       	ldi	r23, 0xCC	; 204
     d1c:	8c ec       	ldi	r24, 0xCC	; 204
     d1e:	9d e3       	ldi	r25, 0x3D	; 61
     d20:	0e 94 ac 02 	call	0x558	; 0x558 <_Z3pidf>
				{
					led_red.on();
					cli();
					int ecoder_plus_1= encoderMotorPos + 1;
					sei();
					while (ecoder_plus_1 > encoderMotorPos)
     d24:	f2 cf       	rjmp	.-28     	; 0xd0a <_Z18press_both_buttonsv+0x8c>
					{
						pid(0.1);
					}
					mot.braking();
     d26:	80 e5       	ldi	r24, 0x50	; 80
     d28:	91 e0       	ldi	r25, 0x01	; 1
     d2a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <_ZN6Motor17brakingEv>
					encoderMotorPos=1;
     d2e:	10 93 d8 01 	sts	0x01D8, r17	; 0x8001d8 <encoderMotorPos+0x1>
     d32:	00 93 d7 01 	sts	0x01D7, r16	; 0x8001d7 <encoderMotorPos>
					led_red.off();
     d36:	86 e5       	ldi	r24, 0x56	; 86
     d38:	91 e0       	ldi	r25, 0x01	; 1
     d3a:	0e 94 dd 09 	call	0x13ba	; 0x13ba <_ZN4Led13offEv>
					delay(100);
     d3e:	64 e6       	ldi	r22, 0x64	; 100
     d40:	70 e0       	ldi	r23, 0x00	; 0
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <delay>
				}
				if (buton_black.status() == 1) {
     d4a:	8c e4       	ldi	r24, 0x4C	; 76
     d4c:	91 e0       	ldi	r25, 0x01	; 1
     d4e:	0e 94 94 09 	call	0x1328	; 0x1328 <_ZN7Button16statusEv>
     d52:	88 23       	and	r24, r24
     d54:	09 f4       	brne	.+2      	; 0xd58 <_Z18press_both_buttonsv+0xda>
     d56:	c1 cf       	rjmp	.-126    	; 0xcda <_Z18press_both_buttonsv+0x5c>
					cli();
     d58:	f8 94       	cli
					encoderMotorPos=1;
     d5a:	10 93 d8 01 	sts	0x01D8, r17	; 0x8001d8 <encoderMotorPos+0x1>
     d5e:	00 93 d7 01 	sts	0x01D7, r16	; 0x8001d7 <encoderMotorPos>
					sei();
     d62:	78 94       	sei
					led_green.on();
     d64:	84 e5       	ldi	r24, 0x54	; 84
     d66:	91 e0       	ldi	r25, 0x01	; 1
     d68:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN4Led12onEv>
					delay(500);
     d6c:	64 ef       	ldi	r22, 0xF4	; 244
     d6e:	71 e0       	ldi	r23, 0x01	; 1
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <delay>
					flag_mod_setare_pozitie = false;
					flag_directie=0;
     d78:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <flag_directie>
					cli();
					encoderMotorPos=1;
					sei();
					led_green.on();
					delay(500);
					flag_mod_setare_pozitie = false;
     d7c:	c0 e0       	ldi	r28, 0x00	; 0
     d7e:	ad cf       	rjmp	.-166    	; 0xcda <_Z18press_both_buttonsv+0x5c>
					flag_directie=0;
				}
			}
			//cod de la butoane
			if (flag_directie == -1) {
     d80:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <flag_directie>
     d84:	8f 3f       	cpi	r24, 0xFF	; 255
     d86:	09 f0       	breq	.+2      	; 0xd8a <_Z18press_both_buttonsv+0x10c>
     d88:	a1 cf       	rjmp	.-190    	; 0xccc <_Z18press_both_buttonsv+0x4e>
				cod_butoane = citire_secventa_butoane(cod_butoane);
     d8a:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <cod_butoane>
     d8e:	0e 94 f5 05 	call	0xbea	; 0xbea <_Z23citire_secventa_butoaneh>
     d92:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <cod_butoane>
					//golire feeder:
					flag_mod_setare_pozitie = false;
					break;
					default:
					//iesire
					flag_mod_setare_pozitie = false;
     d96:	c0 e0       	ldi	r28, 0x00	; 0
				}
			}
			//cod de la butoane
			if (flag_directie == -1) {
				cod_butoane = citire_secventa_butoane(cod_butoane);
				switch (cod_butoane) {
     d98:	81 30       	cpi	r24, 0x01	; 1
     d9a:	71 f0       	breq	.+28     	; 0xdb8 <_Z18press_both_buttonsv+0x13a>
     d9c:	82 30       	cpi	r24, 0x02	; 2
     d9e:	09 f0       	breq	.+2      	; 0xda2 <_Z18press_both_buttonsv+0x124>
     da0:	95 cf       	rjmp	.-214    	; 0xccc <_Z18press_both_buttonsv+0x4e>
					EEPROM.write(110, lungime_pas_mm);
					led_red.off();
					flag_mod_setare_pozitie = false;
					break;
					case 2:
					led_red.on();
     da2:	86 e5       	ldi	r24, 0x56	; 86
     da4:	91 e0       	ldi	r25, 0x01	; 1
     da6:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN4Led12onEv>
					delay(500);
     daa:	64 ef       	ldi	r22, 0xF4	; 244
     dac:	71 e0       	ldi	r23, 0x01	; 1
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <delay>
     db6:	29 c0       	rjmp	.+82     	; 0xe0a <_Z18press_both_buttonsv+0x18c>
			//cod de la butoane
			if (flag_directie == -1) {
				cod_butoane = citire_secventa_butoane(cod_butoane);
				switch (cod_butoane) {
					case 1:
					led_red.on();
     db8:	86 e5       	ldi	r24, 0x56	; 86
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN4Led12onEv>
					delay(1000);
     dc0:	68 ee       	ldi	r22, 0xE8	; 232
     dc2:	73 e0       	ldi	r23, 0x03	; 3
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <delay>
					cod_butoane = citire_secventa_butoane(8);
     dcc:	88 e0       	ldi	r24, 0x08	; 8
     dce:	0e 94 f5 05 	call	0xbea	; 0xbea <_Z23citire_secventa_butoaneh>
     dd2:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <cod_butoane>
					if(cod_butoane >= 8){lungime_pas_mm=2;}
     dd6:	88 30       	cpi	r24, 0x08	; 8
     dd8:	18 f0       	brcs	.+6      	; 0xde0 <_Z18press_both_buttonsv+0x162>
     dda:	d0 93 cc 01 	sts	0x01CC, r29	; 0x8001cc <lungime_pas_mm>
     dde:	05 c0       	rjmp	.+10     	; 0xdea <_Z18press_both_buttonsv+0x16c>
					else {lungime_pas_mm = 4+4*cod_butoane;}
     de0:	88 0f       	add	r24, r24
     de2:	88 0f       	add	r24, r24
     de4:	8c 5f       	subi	r24, 0xFC	; 252
     de6:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <lungime_pas_mm>
					pasul = lungime_pas_mm*125/2;
     dea:	60 91 cc 01 	lds	r22, 0x01CC	; 0x8001cc <lungime_pas_mm>
     dee:	2d e7       	ldi	r18, 0x7D	; 125
     df0:	62 9f       	mul	r22, r18
     df2:	c0 01       	movw	r24, r0
     df4:	11 24       	eor	r1, r1
     df6:	95 95       	asr	r25
     df8:	87 95       	ror	r24
     dfa:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <pasul+0x1>
     dfe:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <pasul>
     e02:	8e e6       	ldi	r24, 0x6E	; 110
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	0e 94 74 14 	call	0x28e8	; 0x28e8 <eeprom_write_byte>
					flag_mod_setare_pozitie = false;
					break;
					case 2:
					led_red.on();
					delay(500);
					led_red.off();
     e0a:	86 e5       	ldi	r24, 0x56	; 86
     e0c:	91 e0       	ldi	r25, 0x01	; 1
     e0e:	0e 94 dd 09 	call	0x13ba	; 0x13ba <_ZN4Led13offEv>
     e12:	c0 e0       	ldi	r28, 0x00	; 0
     e14:	5b cf       	rjmp	.-330    	; 0xccc <_Z18press_both_buttonsv+0x4e>
			}
			
		}
		led_red.off();
	}
}
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	1f 91       	pop	r17
     e1c:	0f 91       	pop	r16
     e1e:	ff 90       	pop	r15
     e20:	ef 90       	pop	r14
					break;
				}
			}
			
		}
		led_red.off();
     e22:	0c 94 dd 09 	jmp	0x13ba	; 0x13ba <_ZN4Led13offEv>
		int n;
		float d;
		boolean flag_mod_setare_pozitie;
		led_red.on(); //se aprind ambele leduri
		while (buton_red.status() == 1 || buton_black.status() == 1) {
			delay(250);
     e26:	6a ef       	ldi	r22, 0xFA	; 250
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <delay>
			n = n + 1;
     e32:	0f 5f       	subi	r16, 0xFF	; 255
     e34:	1f 4f       	sbci	r17, 0xFF	; 255
			if (n >= 6) {  //daca a treut timpul de 1500 ms atunci se sting ambele leduri
     e36:	06 30       	cpi	r16, 0x06	; 6
     e38:	11 05       	cpc	r17, r1
     e3a:	54 f0       	brlt	.+20     	; 0xe50 <_Z18press_both_buttonsv+0x1d2>
				led_green.off();
     e3c:	84 e5       	ldi	r24, 0x54	; 84
     e3e:	91 e0       	ldi	r25, 0x01	; 1
     e40:	0e 94 dd 09 	call	0x13ba	; 0x13ba <_ZN4Led13offEv>
				led_red.off();
     e44:	86 e5       	ldi	r24, 0x56	; 86
     e46:	91 e0       	ldi	r25, 0x01	; 1
     e48:	0e 94 dd 09 	call	0x13ba	; 0x13ba <_ZN4Led13offEv>
				flag_mod_setare_pozitie = true;
     e4c:	c1 e0       	ldi	r28, 0x01	; 1
     e4e:	2f cf       	rjmp	.-418    	; 0xcae <_Z18press_both_buttonsv+0x30>
			}
			else{
				flag_mod_setare_pozitie = false;
     e50:	c0 e0       	ldi	r28, 0x00	; 0
     e52:	2d cf       	rjmp	.-422    	; 0xcae <_Z18press_both_buttonsv+0x30>
			}
			
		}
		led_red.off();
	}
}
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	1f 91       	pop	r17
     e5a:	0f 91       	pop	r16
     e5c:	ff 90       	pop	r15
     e5e:	ef 90       	pop	r14
     e60:	08 95       	ret

00000e62 <__vector_9>:
	return a;
}
 
 
 ///Timer2 overflow interrupt
 ISR (TIMER2_OVF_vect){
     e62:	1f 92       	push	r1
     e64:	0f 92       	push	r0
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	0f 92       	push	r0
     e6a:	11 24       	eor	r1, r1
     e6c:	8f 93       	push	r24
 	TCNT2 = 205; //set timer new=205 C8
     e6e:	8d ec       	ldi	r24, 0xCD	; 205
     e70:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
	ff[2] = 255;
     e74:	8f ef       	ldi	r24, 0xFF	; 255
     e76:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <ff+0x2>
 }
     e7a:	8f 91       	pop	r24
     e7c:	0f 90       	pop	r0
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	0f 90       	pop	r0
     e82:	1f 90       	pop	r1
     e84:	18 95       	reti

00000e86 <_GLOBAL__sub_I_encoderlast>:


//creare obiecte----------------------------------

//instantiere outputs
Led1 led_red(PORTD4);
     e86:	64 e0       	ldi	r22, 0x04	; 4
     e88:	86 e5       	ldi	r24, 0x56	; 86
     e8a:	91 e0       	ldi	r25, 0x01	; 1
     e8c:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN4Led1C1Eh>
Led1 led_green(PORTD5);
     e90:	65 e0       	ldi	r22, 0x05	; 5
     e92:	84 e5       	ldi	r24, 0x54	; 84
     e94:	91 e0       	ldi	r25, 0x01	; 1
     e96:	0e 94 bb 09 	call	0x1376	; 0x1376 <_ZN4Led1C1Eh>
Motor1 mot(PORTB1, PORTB2);
     e9a:	42 e0       	ldi	r20, 0x02	; 2
     e9c:	61 e0       	ldi	r22, 0x01	; 1
     e9e:	80 e5       	ldi	r24, 0x50	; 80
     ea0:	91 e0       	ldi	r25, 0x01	; 1
     ea2:	0e 94 b1 00 	call	0x162	; 0x162 <_ZN6Motor1C1Ehh>

//instantiere inputs
Button1 buton_red(PORTD6);
     ea6:	66 e0       	ldi	r22, 0x06	; 6
     ea8:	8e e4       	ldi	r24, 0x4E	; 78
     eaa:	91 e0       	ldi	r25, 0x01	; 1
     eac:	0e 94 81 09 	call	0x1302	; 0x1302 <_ZN7Button1C1Eh>
Button1 buton_black(PORTD7);
     eb0:	67 e0       	ldi	r22, 0x07	; 7
     eb2:	8c e4       	ldi	r24, 0x4C	; 76
     eb4:	91 e0       	ldi	r25, 0x01	; 1
     eb6:	0e 94 81 09 	call	0x1302	; 0x1302 <_ZN7Button1C1Eh>
SenzorCap1 senzor_cap(PORTB0);
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	8a e4       	ldi	r24, 0x4A	; 74
     ebe:	91 e0       	ldi	r25, 0x01	; 1
     ec0:	0e 94 ed 09 	call	0x13da	; 0x13da <_ZN10SenzorCap1C1Eh>
EncoderMotor1 encoder_motor(PORTC3);
     ec4:	63 e0       	ldi	r22, 0x03	; 3
     ec6:	88 e4       	ldi	r24, 0x48	; 72
     ec8:	91 e0       	ldi	r25, 0x01	; 1
     eca:	0c 94 a5 09 	jmp	0x134a	; 0x134a <_ZN13EncoderMotor1C1Eh>

00000ece <_GLOBAL__sub_D_encoderlast>:
     ece:	88 e4       	ldi	r24, 0x48	; 72
     ed0:	91 e0       	ldi	r25, 0x01	; 1
     ed2:	0e 94 a4 09 	call	0x1348	; 0x1348 <_ZN13EncoderMotor1D1Ev>
Motor1 mot(PORTB1, PORTB2);

//instantiere inputs
Button1 buton_red(PORTD6);
Button1 buton_black(PORTD7);
SenzorCap1 senzor_cap(PORTB0);
     ed6:	8a e4       	ldi	r24, 0x4A	; 74
     ed8:	91 e0       	ldi	r25, 0x01	; 1
     eda:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <_ZN10SenzorCap1D1Ev>
Led1 led_green(PORTD5);
Motor1 mot(PORTB1, PORTB2);

//instantiere inputs
Button1 buton_red(PORTD6);
Button1 buton_black(PORTD7);
     ede:	8c e4       	ldi	r24, 0x4C	; 76
     ee0:	91 e0       	ldi	r25, 0x01	; 1
     ee2:	0e 94 80 09 	call	0x1300	; 0x1300 <_ZN7Button1D1Ev>
Led1 led_red(PORTD4);
Led1 led_green(PORTD5);
Motor1 mot(PORTB1, PORTB2);

//instantiere inputs
Button1 buton_red(PORTD6);
     ee6:	8e e4       	ldi	r24, 0x4E	; 78
     ee8:	91 e0       	ldi	r25, 0x01	; 1
     eea:	0e 94 80 09 	call	0x1300	; 0x1300 <_ZN7Button1D1Ev>
//creare obiecte----------------------------------

//instantiere outputs
Led1 led_red(PORTD4);
Led1 led_green(PORTD5);
Motor1 mot(PORTB1, PORTB2);
     eee:	80 e5       	ldi	r24, 0x50	; 80
     ef0:	91 e0       	ldi	r25, 0x01	; 1
     ef2:	0e 94 b0 00 	call	0x160	; 0x160 <_ZN6Motor1D1Ev>

//creare obiecte----------------------------------

//instantiere outputs
Led1 led_red(PORTD4);
Led1 led_green(PORTD5);
     ef6:	84 e5       	ldi	r24, 0x54	; 84
     ef8:	91 e0       	ldi	r25, 0x01	; 1
     efa:	0e 94 ba 09 	call	0x1374	; 0x1374 <_ZN4Led1D1Ev>


//creare obiecte----------------------------------

//instantiere outputs
Led1 led_red(PORTD4);
     efe:	86 e5       	ldi	r24, 0x56	; 86
     f00:	91 e0       	ldi	r25, 0x01	; 1
     f02:	0c 94 ba 09 	jmp	0x1374	; 0x1374 <_ZN4Led1D1Ev>

00000f06 <_Z10trimiteI2Ci>:
	//flag_directie = teste();
	//teste end--------------------------------
	delayMicroseconds(50);
}

int trimiteI2C(int i){
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
	if (flag_trimiteI2C == 1)
     f0a:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <flag_trimiteI2C>
     f0e:	88 23       	and	r24, r24
     f10:	11 f1       	breq	.+68     	; 0xf56 <_Z10trimiteI2Ci+0x50>
     f12:	c3 e6       	ldi	r28, 0x63	; 99
     f14:	d1 e0       	ldi	r29, 0x01	; 1
	// 	dtostrf(encoderMotorPos, 3, 2, k);  //convers the float or integer to a string. (floatVar, minStringWidthIncDecimalPoint, numVarsAfterDecimal, empty array);
	{
		for(int j=0;j<kk;j++){
     f16:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <kk>
     f1a:	30 91 c8 01 	lds	r19, 0x01C8	; 0x8001c8 <kk+0x1>
     f1e:	ce 01       	movw	r24, r28
     f20:	83 56       	subi	r24, 0x63	; 99
     f22:	91 40       	sbci	r25, 0x01	; 1
     f24:	82 17       	cp	r24, r18
     f26:	93 07       	cpc	r25, r19
     f28:	80 f4       	brcc	.+32     	; 0xf4a <_Z10trimiteI2Ci+0x44>
			Wire.beginTransmission(10);
     f2a:	6a e0       	ldi	r22, 0x0A	; 10
     f2c:	70 e0       	ldi	r23, 0x00	; 0
     f2e:	8e e8       	ldi	r24, 0x8E	; 142
     f30:	92 e0       	ldi	r25, 0x02	; 2
     f32:	0e 94 3e 11 	call	0x227c	; 0x227c <_ZN7TwoWire17beginTransmissionEi>
			Wire.write(ii[j]);
     f36:	69 91       	ld	r22, Y+
     f38:	8e e8       	ldi	r24, 0x8E	; 142
     f3a:	92 e0       	ldi	r25, 0x02	; 2
     f3c:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <_ZN7TwoWire5writeEh>
			Wire.endTransmission();
     f40:	8e e8       	ldi	r24, 0x8E	; 142
     f42:	92 e0       	ldi	r25, 0x02	; 2
     f44:	0e 94 53 11 	call	0x22a6	; 0x22a6 <_ZN7TwoWire15endTransmissionEv>
     f48:	e6 cf       	rjmp	.-52     	; 0xf16 <_Z10trimiteI2Ci+0x10>
		}
		kk=0;
     f4a:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <kk+0x1>
     f4e:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <kk>
		flag_trimiteI2C=0;
     f52:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <flag_trimiteI2C>
	}
	return 0;
}
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	08 95       	ret

00000f60 <_Z12receiveEventi>:
		}
		led_red.off();
	}
}

void receiveEvent(int howMany) {
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	c8 e5       	ldi	r28, 0x58	; 88
     f66:	d1 e0       	ldi	r29, 0x01	; 1
	int j = 0;
	while (0 < Wire.available()) { // loop through all but the last
     f68:	8e e8       	ldi	r24, 0x8E	; 142
     f6a:	92 e0       	ldi	r25, 0x02	; 2
     f6c:	0e 94 49 10 	call	0x2092	; 0x2092 <_ZN7TwoWire9availableEv>
     f70:	18 16       	cp	r1, r24
     f72:	19 06       	cpc	r1, r25
     f74:	34 f4       	brge	.+12     	; 0xf82 <_Z12receiveEventi+0x22>
		command_recived_i2c[j] = Wire.read(); // receive byte as a character
     f76:	8e e8       	ldi	r24, 0x8E	; 142
     f78:	92 e0       	ldi	r25, 0x02	; 2
     f7a:	0e 94 51 10 	call	0x20a2	; 0x20a2 <_ZN7TwoWire4readEv>
     f7e:	89 93       	st	Y+, r24
	}
}

void receiveEvent(int howMany) {
	int j = 0;
	while (0 < Wire.available()) { // loop through all but the last
     f80:	f3 cf       	rjmp	.-26     	; 0xf68 <_Z12receiveEventi+0x8>
		command_recived_i2c[j] = Wire.read(); // receive byte as a character
		j++;
	}
	if (adress_b2 == command_recived_i2c[0] && adress_b3 == command_recived_i2c[1]) {
     f82:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <command_recived_i2c>
     f86:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <adress_b2>
     f8a:	98 13       	cpse	r25, r24
     f8c:	0a c0       	rjmp	.+20     	; 0xfa2 <_Z12receiveEventi+0x42>
     f8e:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <command_recived_i2c+0x1>
     f92:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <adress_b3>
     f96:	98 13       	cpse	r25, r24
     f98:	04 c0       	rjmp	.+8      	; 0xfa2 <_Z12receiveEventi+0x42>
		comands_handling();
	}
}
     f9a:	df 91       	pop	r29
     f9c:	cf 91       	pop	r28
	while (0 < Wire.available()) { // loop through all but the last
		command_recived_i2c[j] = Wire.read(); // receive byte as a character
		j++;
	}
	if (adress_b2 == command_recived_i2c[0] && adress_b3 == command_recived_i2c[1]) {
		comands_handling();
     f9e:	0c 94 48 05 	jmp	0xa90	; 0xa90 <_Z16comands_handlingv>
	}
}
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	08 95       	ret

00000fa8 <_Z17send_i2c_responsev>:

int send_i2c_response()
{
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	00 d0       	rcall	.+0      	; 0xfae <_Z17send_i2c_responsev+0x6>
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <_Z17send_i2c_responsev+0x8>
     fb0:	1f 92       	push	r1
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
	if (flag_acknoledge_i2c  != 0) {
     fb6:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <flag_acknoledge_i2c>
     fba:	88 23       	and	r24, r24
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <_Z17send_i2c_responsev+0x18>
     fbe:	40 c0       	rjmp	.+128    	; 0x1040 <_Z17send_i2c_responsev+0x98>
		delay(10);
     fc0:	6a e0       	ldi	r22, 0x0A	; 10
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <delay>
		Serial.print(command_recived_i2c[2]);
     fcc:	4a e0       	ldi	r20, 0x0A	; 10
     fce:	50 e0       	ldi	r21, 0x00	; 0
     fd0:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <command_recived_i2c+0x2>
     fd4:	88 ee       	ldi	r24, 0xE8	; 232
     fd6:	91 e0       	ldi	r25, 0x01	; 1
     fd8:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <_ZN5Print5printEhi>
		Serial.println(" ");
     fdc:	69 e0       	ldi	r22, 0x09	; 9
     fde:	71 e0       	ldi	r23, 0x01	; 1
     fe0:	88 ee       	ldi	r24, 0xE8	; 232
     fe2:	91 e0       	ldi	r25, 0x01	; 1
     fe4:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <_ZN5Print7printlnEPKc>
		uint8_t response_i2c[5];
		response_i2c[0] = adress_b1;
     fe8:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <adress_b1>
     fec:	89 83       	std	Y+1, r24	; 0x01
		response_i2c[1] = adress_b2;
     fee:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <adress_b2>
     ff2:	8a 83       	std	Y+2, r24	; 0x02
		response_i2c[2] = adress_b3;
     ff4:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <adress_b3>
     ff8:	8b 83       	std	Y+3, r24	; 0x03
		if (flag_acknoledge_i2c  == 1) {
     ffa:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <flag_acknoledge_i2c>
     ffe:	81 30       	cpi	r24, 0x01	; 1
    1000:	31 f4       	brne	.+12     	; 0x100e <_Z17send_i2c_responsev+0x66>
			response_i2c[3] = command_recived_i2c[2];
    1002:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <command_recived_i2c+0x2>
    1006:	8c 83       	std	Y+4, r24	; 0x04
			response_i2c[4] = command_recived_i2c[3];
    1008:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <command_recived_i2c+0x3>
    100c:	03 c0       	rjmp	.+6      	; 0x1014 <_Z17send_i2c_responsev+0x6c>
			} else {
			response_i2c[3] = 0x4E;//N
    100e:	8e e4       	ldi	r24, 0x4E	; 78
    1010:	8c 83       	std	Y+4, r24	; 0x04
			response_i2c[4] = 0x41;//A
    1012:	81 e4       	ldi	r24, 0x41	; 65
    1014:	8d 83       	std	Y+5, r24	; 0x05
		}
		Wire.beginTransmission(10); // transmit to master device #10
    1016:	6a e0       	ldi	r22, 0x0A	; 10
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	8e e8       	ldi	r24, 0x8E	; 142
    101c:	92 e0       	ldi	r25, 0x02	; 2
    101e:	0e 94 3e 11 	call	0x227c	; 0x227c <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(response_i2c, 5);       // sends 4 bytes
    1022:	45 e0       	ldi	r20, 0x05	; 5
    1024:	50 e0       	ldi	r21, 0x00	; 0
    1026:	be 01       	movw	r22, r28
    1028:	6f 5f       	subi	r22, 0xFF	; 255
    102a:	7f 4f       	sbci	r23, 0xFF	; 255
    102c:	8e e8       	ldi	r24, 0x8E	; 142
    102e:	92 e0       	ldi	r25, 0x02	; 2
    1030:	0e 94 ab 10 	call	0x2156	; 0x2156 <_ZN7TwoWire5writeEPKhj>
		Wire.endTransmission();    // stop transmitting
    1034:	8e e8       	ldi	r24, 0x8E	; 142
    1036:	92 e0       	ldi	r25, 0x02	; 2
    1038:	0e 94 53 11 	call	0x22a6	; 0x22a6 <_ZN7TwoWire15endTransmissionEv>
		flag_acknoledge_i2c  = 0;
    103c:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <flag_acknoledge_i2c>
	}
	return 0;
}
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	08 95       	ret

00001054 <loop>:
	Wire.write("start");
	Wire.endTransmission();
}


void loop(){
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
	TIMSK2 |= (1 << TOIE2); //enable T2 OVF interrupt
    1058:	c0 e7       	ldi	r28, 0x70	; 112
    105a:	d0 e0       	ldi	r29, 0x00	; 0
    105c:	88 81       	ld	r24, Y
    105e:	81 60       	ori	r24, 0x01	; 1
    1060:	88 83       	st	Y, r24
	activare_motor();   //motor forward
    1062:	0e 94 e5 03 	call	0x7ca	; 0x7ca <_Z14activare_motorv>
	press_both_buttons();
    1066:	0e 94 3f 06 	call	0xc7e	; 0xc7e <_Z18press_both_buttonsv>
	TIMSK2 &= ~(1 << TOIE2); //disable TOVF interrupt
    106a:	88 81       	ld	r24, Y
    106c:	8e 7f       	andi	r24, 0xFE	; 254
    106e:	88 83       	st	Y, r24
	reset_pid_variables();//resset error, integral and derivative to 0
    1070:	0e 94 32 05 	call	0xa64	; 0xa64 <_Z19reset_pid_variablesv>
	
	send_i2c_response();
    1074:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <_Z17send_i2c_responsev>
	sleep_enablef();
    1078:	0e 94 ad 05 	call	0xb5a	; 0xb5a <_Z13sleep_enablefv>
	//teste begin--------------------------------
	trimiteI2C(1);
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	0e 94 83 07 	call	0xf06	; 0xf06 <_Z10trimiteI2Ci>
	//flag_directie = teste();
	//teste end--------------------------------
	delayMicroseconds(50);
    1084:	82 e3       	ldi	r24, 0x32	; 50
    1086:	90 e0       	ldi	r25, 0x00	; 0
}
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
	sleep_enablef();
	//teste begin--------------------------------
	trimiteI2C(1);
	//flag_directie = teste();
	//teste end--------------------------------
	delayMicroseconds(50);
    108c:	0c 94 10 0f 	jmp	0x1e20	; 0x1e20 <delayMicroseconds>

00001090 <setup>:
Button1 buton_black(PORTD7);
SenzorCap1 senzor_cap(PORTB0);
EncoderMotor1 encoder_motor(PORTC3);


void setup(){
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
	//setare timere-------------------------------------------------------
	TCCR1B = TCCR1B & B11111000 | B00000001;    //schimbare frecventa PWM comanda motor - B00000001-31 kHz ; B00000010-3.9 kHz (setare prescaler)
    1098:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    109c:	88 7f       	andi	r24, 0xF8	; 248
    109e:	81 60       	ori	r24, 0x01	; 1
    10a0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	
	//setare frecventa 38 kHz la Timer 4
	TCCR4A = _BV (COM4A0); // CTC, toggle OC4A on Compare Match
    10a4:	80 e4       	ldi	r24, 0x40	; 64
    10a6:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__DATA_REGION_ORIGIN__+0x40>
	TCCR4B = _BV (CS40) | _BV(WGM42); // No prescaler, CTC
    10aa:	89 e0       	ldi	r24, 0x09	; 9
    10ac:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__DATA_REGION_ORIGIN__+0x41>
	OCR4A = 209; // compare A register value (210 * clock speed)
    10b0:	81 ed       	ldi	r24, 0xD1	; 209
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__DATA_REGION_ORIGIN__+0x49>
    10b8:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__DATA_REGION_ORIGIN__+0x48>
	// = 13.125 nS , so frequency is 1 / (2 * 13.125) = 38095
	//setare timere-------------------------------------------------------

	//output pins
	//instantiere obiecte----------------------------------
	led_red.begin();
    10bc:	86 e5       	ldi	r24, 0x56	; 86
    10be:	91 e0       	ldi	r25, 0x01	; 1
    10c0:	0e 94 be 09 	call	0x137c	; 0x137c <_ZN4Led15beginEv>
	led_green.begin();
    10c4:	84 e5       	ldi	r24, 0x54	; 84
    10c6:	91 e0       	ldi	r25, 0x01	; 1
    10c8:	0e 94 be 09 	call	0x137c	; 0x137c <_ZN4Led15beginEv>
	buton_black.begin();
    10cc:	8c e4       	ldi	r24, 0x4C	; 76
    10ce:	91 e0       	ldi	r25, 0x01	; 1
    10d0:	0e 94 84 09 	call	0x1308	; 0x1308 <_ZN7Button15beginEv>
	buton_red.begin();
    10d4:	8e e4       	ldi	r24, 0x4E	; 78
    10d6:	91 e0       	ldi	r25, 0x01	; 1
    10d8:	0e 94 84 09 	call	0x1308	; 0x1308 <_ZN7Button15beginEv>
	mot.begin();
    10dc:	80 e5       	ldi	r24, 0x50	; 80
    10de:	91 e0       	ldi	r25, 0x01	; 1
    10e0:	0e 94 b5 00 	call	0x16a	; 0x16a <_ZN6Motor15beginEv>
// 	adress_b2 = SLAVE_ADRESS >> 8; //most signficant byte
// 	adress_b3 = SLAVE_ADRESS;
// 	EEPROM.write(100, adress_b1);
// 	EEPROM.write(101, adress_b2);
// 	EEPROM.write(102, adress_b3	);
	adress_b1 = EEPROM.read(100);
    10e4:	84 e6       	ldi	r24, 0x64	; 100
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	0e 94 a1 01 	call	0x342	; 0x342 <_ZN11EEPROMClass4readEi.isra.2>
    10ec:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <adress_b1>
	adress_b2 = EEPROM.read(101);
    10f0:	85 e6       	ldi	r24, 0x65	; 101
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 a1 01 	call	0x342	; 0x342 <_ZN11EEPROMClass4readEi.isra.2>
    10f8:	d8 2f       	mov	r29, r24
    10fa:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <adress_b2>
	adress_b3 = EEPROM.read(102);
    10fe:	86 e6       	ldi	r24, 0x66	; 102
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 94 a1 01 	call	0x342	; 0x342 <_ZN11EEPROMClass4readEi.isra.2>
    1106:	c8 2f       	mov	r28, r24
    1108:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <adress_b3>
	lungime_pas_mm = EEPROM.read(110); //dimensiunea pasului in mm
    110c:	8e e6       	ldi	r24, 0x6E	; 110
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	0e 94 a1 01 	call	0x342	; 0x342 <_ZN11EEPROMClass4readEi.isra.2>
    1114:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <lungime_pas_mm>
	pasul = lungime_pas_mm*125/2;
    1118:	9d e7       	ldi	r25, 0x7D	; 125
    111a:	89 9f       	mul	r24, r25
    111c:	80 01       	movw	r16, r0
    111e:	11 24       	eor	r1, r1
    1120:	15 95       	asr	r17
    1122:	07 95       	ror	r16
    1124:	10 93 cf 01 	sts	0x01CF, r17	; 0x8001cf <pasul+0x1>
    1128:	00 93 ce 01 	sts	0x01CE, r16	; 0x8001ce <pasul>
	SLAVE_ADRESS = adress_b1 << 16 | adress_b2 <<8 | adress_b3;// adresa I2C
    112c:	4c 2f       	mov	r20, r28
    112e:	50 e0       	ldi	r21, 0x00	; 0
    1130:	5d 2b       	or	r21, r29
    1132:	05 2e       	mov	r0, r21
    1134:	00 0c       	add	r0, r0
    1136:	66 0b       	sbc	r22, r22
    1138:	77 0b       	sbc	r23, r23
    113a:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <SLAVE_ADRESS>
    113e:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <SLAVE_ADRESS+0x1>
    1142:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <SLAVE_ADRESS+0x2>
    1146:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <SLAVE_ADRESS+0x3>
	encoderMotorPos = (EEPROM.read(1) + (EEPROM.read(0) << 8)) % pasul;
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	0e 94 a1 01 	call	0x342	; 0x342 <_ZN11EEPROMClass4readEi.isra.2>
    1152:	c8 2f       	mov	r28, r24
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	0e 94 a1 01 	call	0x342	; 0x342 <_ZN11EEPROMClass4readEi.isra.2>
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	98 2f       	mov	r25, r24
    1160:	88 27       	eor	r24, r24
    1162:	8c 0f       	add	r24, r28
    1164:	91 1d       	adc	r25, r1
    1166:	b8 01       	movw	r22, r16
    1168:	0e 94 1c 14 	call	0x2838	; 0x2838 <__udivmodhi4>
    116c:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <encoderMotorPos+0x1>
    1170:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <encoderMotorPos>

	//output pins

	DDRE = 0b00001111;
    1174:	8f e0       	ldi	r24, 0x0F	; 15
    1176:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0b00000111; // activare npn PE3 LOW
    1178:	87 e0       	ldi	r24, 0x07	; 7
    117a:	8e b9       	out	0x0e, r24	; 14
	// 	DDRC |= (1<<DDRC0) | (1<<DDRC1); //	0b00000011;
	// 	PORTC |= (1<<PORTC0) | (1<<PORTC1);
	// 	DDRB |= (1<<DDRB3) | (1<<DDRB4) | (1<<DDRB5);
	// 	PORTB |= (1<<PORTB3) | (1<<PORTB4) | (1<<PORTB5);

	pinMode(semnal_38k, OUTPUT);
    117c:	61 e0       	ldi	r22, 0x01	; 1
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <pinMode>
	Wire.begin(adress_b1);
    1184:	60 91 5f 01 	lds	r22, 0x015F	; 0x80015f <adress_b1>
    1188:	8e e8       	ldi	r24, 0x8E	; 142
    118a:	92 e0       	ldi	r25, 0x02	; 2
    118c:	0e 94 21 11 	call	0x2242	; 0x2242 <_ZN7TwoWire5beginEh>
	Wire.onReceive(receiveEvent);
    1190:	60 eb       	ldi	r22, 0xB0	; 176
    1192:	77 e0       	ldi	r23, 0x07	; 7
    1194:	8e e8       	ldi	r24, 0x8E	; 142
    1196:	92 e0       	ldi	r25, 0x02	; 2
    1198:	0e 94 56 11 	call	0x22ac	; 0x22ac <_ZN7TwoWire9onReceiveEPFviE>
	//input pins
	pinMode(senzor2_cap, INPUT_PULLUP);
    119c:	62 e0       	ldi	r22, 0x02	; 2
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <pinMode>
	pinMode(senzor_roata, INPUT);
    11a4:	60 e0       	ldi	r22, 0x00	; 0
    11a6:	83 e0       	ldi	r24, 0x03	; 3
    11a8:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <pinMode>
	pinMode(directie_motor_pin, INPUT);
    11ac:	60 e0       	ldi	r22, 0x00	; 0
    11ae:	81 e1       	ldi	r24, 0x11	; 17
    11b0:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <pinMode>
	pinMode(senzor_motor, INPUT);
    11b4:	60 e0       	ldi	r22, 0x00	; 0
    11b6:	82 e0       	ldi	r24, 0x02	; 2
    11b8:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <pinMode>
	pinMode(brown_out, INPUT_PULLUP);
    11bc:	62 e0       	ldi	r22, 0x02	; 2
    11be:	80 e1       	ldi	r24, 0x10	; 16
    11c0:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <pinMode>
	DDRC &=~(1 << DDRC1); //pinMode(_pin, INPUT);
    11c4:	39 98       	cbi	0x07, 1	; 7
	attachInterrupt(digitalPinToInterrupt(senzor_motor), doEncoderMotor, FALLING);
    11c6:	42 e0       	ldi	r20, 0x02	; 2
    11c8:	50 e0       	ldi	r21, 0x00	; 0
    11ca:	67 ef       	ldi	r22, 0xF7	; 247
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <attachInterrupt>
	attachInterrupt(digitalPinToInterrupt(senzor_roata), doEncoderRoata, FALLING);
    11d4:	42 e0       	ldi	r20, 0x02	; 2
    11d6:	50 e0       	ldi	r21, 0x00	; 0
    11d8:	6c e7       	ldi	r22, 0x7C	; 124
    11da:	71 e0       	ldi	r23, 0x01	; 1
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <attachInterrupt>
	//digitalWrite(alimentare_circuit, HIGH);

	//portD=================================================== intreruperi buton_red si Buton _black
	DDRD &= ~((1 << DDD6) | (1 << DDD7)); // Clear the PC2 pin
    11e2:	8a b1       	in	r24, 0x0a	; 10
    11e4:	8f 73       	andi	r24, 0x3F	; 63
    11e6:	8a b9       	out	0x0a, r24	; 10
	// PD (PCINT23 pin)is now inputs

	PORTD |= ((1 << PORTD6) | (1 << PORTD7)); // turn On the Pull-up
    11e8:	8b b1       	in	r24, 0x0b	; 11
    11ea:	80 6c       	ori	r24, 0xC0	; 192
    11ec:	8b b9       	out	0x0b, r24	; 11
	// PD is now input with pull-up enabled

	PCICR |= (1 << PCIE2);     // set PCIE2 to enable PCMSK2 scan
    11ee:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    11f2:	84 60       	ori	r24, 0x04	; 4
    11f4:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
	PCMSK2 |= (1 << PCINT22) | (1 << PCINT23);   // set PCINT23 to trigger an interrupt on state change
    11f8:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__DATA_REGION_ORIGIN__+0xd>
    11fc:	80 6c       	ori	r24, 0xC0	; 192
    11fe:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__DATA_REGION_ORIGIN__+0xd>
	//portc======================================================= intreruperi brown_out
	DDRC &= ~(1 << DDC2); // Clear the PC2 pin
    1202:	3a 98       	cbi	0x07, 2	; 7
	// PC2 (PCINT10 pin)is now inputs

	PORTC |= (1 << PORTC2); // turn On the Pull-up
    1204:	42 9a       	sbi	0x08, 2	; 8
	// PC2 is now input with pull-up enabled

	PCICR |= (1 << PCIE1);     // set PCIE1 to enable PCMSK1 scan
    1206:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    120a:	82 60       	ori	r24, 0x02	; 2
    120c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
	PCMSK1 |= (1 << PCINT10);   // set PCINT0 to trigger an interrupt on state change
    1210:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
    1214:	84 60       	ori	r24, 0x04	; 4
    1216:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
	
	//portB======================================================== intreruperi senzor_cap vsop
	DDRB &= ~(1 << DDB0); // Clear the PC pin
    121a:	20 98       	cbi	0x04, 0	; 4

	PORTB |= (1 << PORTB0); // turn On the Pull-up
    121c:	28 9a       	sbi	0x05, 0	; 5


	PCICR |= (1 << PCIE0);     // set PCIE to enable PCMSK1 scan
    121e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    1222:	81 60       	ori	r24, 0x01	; 1
    1224:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
	PCMSK0 |= (1 << PCINT0);   // set PCINT to trigger an interrupt on state change
    1228:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__DATA_REGION_ORIGIN__+0xb>
    122c:	81 60       	ori	r24, 0x01	; 1
    122e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__DATA_REGION_ORIGIN__+0xb>

	led_green.on();
    1232:	84 e5       	ldi	r24, 0x54	; 84
    1234:	91 e0       	ldi	r25, 0x01	; 1
    1236:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN4Led12onEv>
	led_red.on();
    123a:	86 e5       	ldi	r24, 0x56	; 86
    123c:	91 e0       	ldi	r25, 0x01	; 1
    123e:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN4Led12onEv>
	//timer2
	////////////////////////////
	//PRR0 |=(1 << PRTIM2);
	TCCR2B |= (1 << CS02) | (1 << CS01) | (1 << CS00); //set prescaler to 1024
    1242:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    1246:	87 60       	ori	r24, 0x07	; 7
    1248:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
	TCCR2B &= ~(1 << WGM22); //NORMAL MODE OPERATION
    124c:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    1250:	87 7f       	andi	r24, 0xF7	; 247
    1252:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
	TCCR2A &= ~(1 << WGM20) & ~(1 << WGM21); //NORMAL MODE OPERATION
    1256:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    125a:	8c 7f       	andi	r24, 0xFC	; 252
    125c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
	TIMSK2 |= (1 << TOIE2); //enable T2 OVF interrupt
    1260:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
    1264:	81 60       	ori	r24, 0x01	; 1
    1266:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>

	//////////////////////
	delay(1000);
    126a:	68 ee       	ldi	r22, 0xE8	; 232
    126c:	73 e0       	ldi	r23, 0x03	; 3
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <delay>
	led_red.off();
    1276:	86 e5       	ldi	r24, 0x56	; 86
    1278:	91 e0       	ldi	r25, 0x01	; 1
    127a:	0e 94 dd 09 	call	0x13ba	; 0x13ba <_ZN4Led13offEv>
	//in caz ca a aparut o intrerupere intrerupt lumina la pornire atunci se
	sei();                     // turn on interrupt
    127e:	78 94       	sei
	delay(100);
    1280:	64 e6       	ldi	r22, 0x64	; 100
    1282:	70 e0       	ldi	r23, 0x00	; 0
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <delay>
	flag_directie=0;
    128c:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <flag_directie>
	if ((encoderMotorPos % pasul) <= 3 || (encoderMotorPos % pasul) >= (pasul-3) )//daca encodermotorposition este mult in afara atunci se atetioneaza
    1290:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <encoderMotorPos>
    1294:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <encoderMotorPos+0x1>
    1298:	20 91 ce 01 	lds	r18, 0x01CE	; 0x8001ce <pasul>
    129c:	30 91 cf 01 	lds	r19, 0x01CF	; 0x8001cf <pasul+0x1>
    12a0:	b9 01       	movw	r22, r18
    12a2:	0e 94 1c 14 	call	0x2838	; 0x2838 <__udivmodhi4>
    12a6:	04 97       	sbiw	r24, 0x04	; 4
    12a8:	30 f1       	brcs	.+76     	; 0x12f6 <setup+0x266>
    12aa:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <encoderMotorPos>
    12ae:	90 91 d8 01 	lds	r25, 0x01D8	; 0x8001d8 <encoderMotorPos+0x1>
    12b2:	b9 01       	movw	r22, r18
    12b4:	0e 94 1c 14 	call	0x2838	; 0x2838 <__udivmodhi4>
    12b8:	23 50       	subi	r18, 0x03	; 3
    12ba:	31 09       	sbc	r19, r1
    12bc:	82 17       	cp	r24, r18
    12be:	93 07       	cpc	r25, r19
    12c0:	d0 f4       	brcc	.+52     	; 0x12f6 <setup+0x266>
	{
		led_red.off();
	}
	else
	{
		led_red.on();
    12c2:	86 e5       	ldi	r24, 0x56	; 86
    12c4:	91 e0       	ldi	r25, 0x01	; 1
    12c6:	0e 94 cd 09 	call	0x139a	; 0x139a <_ZN4Led12onEv>
	}
	Wire.beginTransmission(10);
    12ca:	6a e0       	ldi	r22, 0x0A	; 10
    12cc:	70 e0       	ldi	r23, 0x00	; 0
    12ce:	8e e8       	ldi	r24, 0x8E	; 142
    12d0:	92 e0       	ldi	r25, 0x02	; 2
    12d2:	0e 94 3e 11 	call	0x227c	; 0x227c <_ZN7TwoWire17beginTransmissionEi>
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    12d6:	45 e0       	ldi	r20, 0x05	; 5
    12d8:	50 e0       	ldi	r21, 0x00	; 0
    12da:	6b e0       	ldi	r22, 0x0B	; 11
    12dc:	71 e0       	ldi	r23, 0x01	; 1
    12de:	8e e8       	ldi	r24, 0x8E	; 142
    12e0:	92 e0       	ldi	r25, 0x02	; 2
    12e2:	0e 94 ab 10 	call	0x2156	; 0x2156 <_ZN7TwoWire5writeEPKhj>
	Wire.write("start");
	Wire.endTransmission();
    12e6:	8e e8       	ldi	r24, 0x8E	; 142
    12e8:	92 e0       	ldi	r25, 0x02	; 2
}
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	1f 91       	pop	r17
    12f0:	0f 91       	pop	r16
	{
		led_red.on();
	}
	Wire.beginTransmission(10);
	Wire.write("start");
	Wire.endTransmission();
    12f2:	0c 94 53 11 	jmp	0x22a6	; 0x22a6 <_ZN7TwoWire15endTransmissionEv>
	sei();                     // turn on interrupt
	delay(100);
	flag_directie=0;
	if ((encoderMotorPos % pasul) <= 3 || (encoderMotorPos % pasul) >= (pasul-3) )//daca encodermotorposition este mult in afara atunci se atetioneaza
	{
		led_red.off();
    12f6:	86 e5       	ldi	r24, 0x56	; 86
    12f8:	91 e0       	ldi	r25, 0x01	; 1
    12fa:	0e 94 dd 09 	call	0x13ba	; 0x13ba <_ZN4Led13offEv>
    12fe:	e5 cf       	rjmp	.-54     	; 0x12ca <setup+0x23a>

00001300 <_ZN7Button1D1Ev>:
Button1::Button1()
{
} //Button1

// default destructor
Button1::~Button1()
    1300:	08 95       	ret

00001302 <_ZN7Button1C1Eh>:
{
} //~Button1

Button1::Button1(byte pin)
{
	_pin=pin;//here we store the pin number in private variable _pin
    1302:	fc 01       	movw	r30, r24
    1304:	60 83       	st	Z, r22
    1306:	08 95       	ret

00001308 <_ZN7Button15beginEv>:
}

void Button1::begin() //this initializes the pin
{
	DDRD &=~(1 << _pin); //pinMode(_pin, INPUT);
    1308:	4a b1       	in	r20, 0x0a	; 10
    130a:	21 e0       	ldi	r18, 0x01	; 1
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	b9 01       	movw	r22, r18
    1310:	fc 01       	movw	r30, r24
    1312:	00 80       	ld	r0, Z
    1314:	02 c0       	rjmp	.+4      	; 0x131a <_ZN7Button15beginEv+0x12>
    1316:	66 0f       	add	r22, r22
    1318:	77 1f       	adc	r23, r23
    131a:	0a 94       	dec	r0
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <_ZN7Button15beginEv+0xe>
    131e:	cb 01       	movw	r24, r22
    1320:	80 95       	com	r24
    1322:	84 23       	and	r24, r20
    1324:	8a b9       	out	0x0a, r24	; 10
    1326:	08 95       	ret

00001328 <_ZN7Button16statusEv>:
}

bool Button1::status() //this returns the current status
{
    1328:	fc 01       	movw	r30, r24
	if (PIND & (1 << _pin))
    132a:	99 b1       	in	r25, 0x09	; 9
    132c:	89 2f       	mov	r24, r25
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	00 80       	ld	r0, Z
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <_ZN7Button16statusEv+0x10>
    1334:	95 95       	asr	r25
    1336:	87 95       	ror	r24
    1338:	0a 94       	dec	r0
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <_ZN7Button16statusEv+0xc>
    133c:	81 70       	andi	r24, 0x01	; 1
    133e:	99 27       	eor	r25, r25
    1340:	21 e0       	ldi	r18, 0x01	; 1
    1342:	82 27       	eor	r24, r18
	{return 0;}
	else
	{return 1;}
	//return _status
    1344:	81 70       	andi	r24, 0x01	; 1
    1346:	08 95       	ret

00001348 <_ZN13EncoderMotor1D1Ev>:
	_pin=pin;//here we store the pin number in private variable _pin
}

void EncoderMotor1::begin() //this initializes the pin
{
	DDRC &=~(1 << _pin); //pinMode(_pin, INPUT);
    1348:	08 95       	ret

0000134a <_ZN13EncoderMotor1C1Eh>:
    134a:	fc 01       	movw	r30, r24
    134c:	60 83       	st	Z, r22
    134e:	08 95       	ret

00001350 <_ZN13EncoderMotor18directieEv>:
}

int EncoderMotor1::directie() //this returns the current status
{
	if (PINC & (1 << _pin))
    1350:	26 b1       	in	r18, 0x06	; 6
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	a9 01       	movw	r20, r18
    1356:	fc 01       	movw	r30, r24
    1358:	00 80       	ld	r0, Z
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <_ZN13EncoderMotor18directieEv+0x10>
    135c:	55 95       	asr	r21
    135e:	47 95       	ror	r20
    1360:	0a 94       	dec	r0
    1362:	e2 f7       	brpl	.-8      	; 0x135c <_ZN13EncoderMotor18directieEv+0xc>
    1364:	40 fd       	sbrc	r20, 0
    1366:	03 c0       	rjmp	.+6      	; 0x136e <_ZN13EncoderMotor18directieEv+0x1e>
	{return 1;}
	else
	{return -1;}
    1368:	8f ef       	ldi	r24, 0xFF	; 255
    136a:	9f ef       	ldi	r25, 0xFF	; 255
    136c:	08 95       	ret
}

int EncoderMotor1::directie() //this returns the current status
{
	if (PINC & (1 << _pin))
	{return 1;}
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
	else
	{return -1;}
    1372:	08 95       	ret

00001374 <_ZN4Led1D1Ev>:
Led1::Led1()
{
} //Led1

// default destructor
Led1::~Led1()
    1374:	08 95       	ret

00001376 <_ZN4Led1C1Eh>:
{
} //~Led1

Led1::Led1(byte pin)
{
	_pin=pin;//here we store the pin number in private variable _pin
    1376:	fc 01       	movw	r30, r24
    1378:	60 83       	st	Z, r22
    137a:	08 95       	ret

0000137c <_ZN4Led15beginEv>:
}
void Led1::begin() //this initializes the pin (PORTD)
{
	DDRD |=(1 << _pin); //pin as output   pinMode(_pin, OUTPUT);
    137c:	4a b1       	in	r20, 0x0a	; 10
    137e:	21 e0       	ldi	r18, 0x01	; 1
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	b9 01       	movw	r22, r18
    1384:	fc 01       	movw	r30, r24
    1386:	00 80       	ld	r0, Z
    1388:	02 c0       	rjmp	.+4      	; 0x138e <_ZN4Led15beginEv+0x12>
    138a:	66 0f       	add	r22, r22
    138c:	77 1f       	adc	r23, r23
    138e:	0a 94       	dec	r0
    1390:	e2 f7       	brpl	.-8      	; 0x138a <_ZN4Led15beginEv+0xe>
    1392:	cb 01       	movw	r24, r22
    1394:	84 2b       	or	r24, r20
    1396:	8a b9       	out	0x0a, r24	; 10
    1398:	08 95       	ret

0000139a <_ZN4Led12onEv>:
}

void Led1::on() //this turns the led on
{
	PORTD &=~(1 << _pin); //pin low is on      digitalWrite(_pin, LOW);
    139a:	4b b1       	in	r20, 0x0b	; 11
    139c:	21 e0       	ldi	r18, 0x01	; 1
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	b9 01       	movw	r22, r18
    13a2:	fc 01       	movw	r30, r24
    13a4:	00 80       	ld	r0, Z
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <_ZN4Led12onEv+0x12>
    13a8:	66 0f       	add	r22, r22
    13aa:	77 1f       	adc	r23, r23
    13ac:	0a 94       	dec	r0
    13ae:	e2 f7       	brpl	.-8      	; 0x13a8 <_ZN4Led12onEv+0xe>
    13b0:	cb 01       	movw	r24, r22
    13b2:	80 95       	com	r24
    13b4:	84 23       	and	r24, r20
    13b6:	8b b9       	out	0x0b, r24	; 11
    13b8:	08 95       	ret

000013ba <_ZN4Led13offEv>:
	//_status=1; //set the status property
}

void Led1::off() //this turns the led off
{
	PORTD |= (1 << _pin);//pin high is off    digitalWrite(_pin, HIGH);
    13ba:	4b b1       	in	r20, 0x0b	; 11
    13bc:	21 e0       	ldi	r18, 0x01	; 1
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	b9 01       	movw	r22, r18
    13c2:	fc 01       	movw	r30, r24
    13c4:	00 80       	ld	r0, Z
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <_ZN4Led13offEv+0x12>
    13c8:	66 0f       	add	r22, r22
    13ca:	77 1f       	adc	r23, r23
    13cc:	0a 94       	dec	r0
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <_ZN4Led13offEv+0xe>
    13d0:	cb 01       	movw	r24, r22
    13d2:	84 2b       	or	r24, r20
    13d4:	8b b9       	out	0x0b, r24	; 11
    13d6:	08 95       	ret

000013d8 <_ZN10SenzorCap1D1Ev>:
	_pin=pin;//here we store the pin number in private variable _pin
}

void SenzorCap1::begin() //this initializes the pin
{
	DDRB &=~(1 << _pin); //pinMode(_pin, INPUT);
    13d8:	08 95       	ret

000013da <_ZN10SenzorCap1C1Eh>:
    13da:	fc 01       	movw	r30, r24
    13dc:	60 83       	st	Z, r22
    13de:	08 95       	ret

000013e0 <_ZN10SenzorCap16statusEv>:
}

bool SenzorCap1::status() //this returns the current status
{
	if (PINB & (1 << _pin))
    13e0:	23 b1       	in	r18, 0x03	; 3
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	a9 01       	movw	r20, r18
    13e6:	fc 01       	movw	r30, r24
    13e8:	00 80       	ld	r0, Z
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <_ZN10SenzorCap16statusEv+0x10>
    13ec:	55 95       	asr	r21
    13ee:	47 95       	ror	r20
    13f0:	0a 94       	dec	r0
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <_ZN10SenzorCap16statusEv+0xc>
    13f4:	ca 01       	movw	r24, r20
	{return 1;}
	else
	{return 0;}
	//return _status
}
    13f6:	81 70       	andi	r24, 0x01	; 1
    13f8:	08 95       	ret

000013fa <__subsf3>:
    13fa:	50 58       	subi	r21, 0x80	; 128

000013fc <__addsf3>:
    13fc:	bb 27       	eor	r27, r27
    13fe:	aa 27       	eor	r26, r26
    1400:	0e 94 15 0a 	call	0x142a	; 0x142a <__addsf3x>
    1404:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <__fp_round>
    1408:	0e 94 81 0b 	call	0x1702	; 0x1702 <__fp_pscA>
    140c:	38 f0       	brcs	.+14     	; 0x141c <__addsf3+0x20>
    140e:	0e 94 88 0b 	call	0x1710	; 0x1710 <__fp_pscB>
    1412:	20 f0       	brcs	.+8      	; 0x141c <__addsf3+0x20>
    1414:	39 f4       	brne	.+14     	; 0x1424 <__addsf3+0x28>
    1416:	9f 3f       	cpi	r25, 0xFF	; 255
    1418:	19 f4       	brne	.+6      	; 0x1420 <__addsf3+0x24>
    141a:	26 f4       	brtc	.+8      	; 0x1424 <__addsf3+0x28>
    141c:	0c 94 7e 0b 	jmp	0x16fc	; 0x16fc <__fp_nan>
    1420:	0e f4       	brtc	.+2      	; 0x1424 <__addsf3+0x28>
    1422:	e0 95       	com	r30
    1424:	e7 fb       	bst	r30, 7
    1426:	0c 94 78 0b 	jmp	0x16f0	; 0x16f0 <__fp_inf>

0000142a <__addsf3x>:
    142a:	e9 2f       	mov	r30, r25
    142c:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__fp_split3>
    1430:	58 f3       	brcs	.-42     	; 0x1408 <__addsf3+0xc>
    1432:	ba 17       	cp	r27, r26
    1434:	62 07       	cpc	r22, r18
    1436:	73 07       	cpc	r23, r19
    1438:	84 07       	cpc	r24, r20
    143a:	95 07       	cpc	r25, r21
    143c:	20 f0       	brcs	.+8      	; 0x1446 <__addsf3x+0x1c>
    143e:	79 f4       	brne	.+30     	; 0x145e <__addsf3x+0x34>
    1440:	a6 f5       	brtc	.+104    	; 0x14aa <__addsf3x+0x80>
    1442:	0c 94 c2 0b 	jmp	0x1784	; 0x1784 <__fp_zero>
    1446:	0e f4       	brtc	.+2      	; 0x144a <__addsf3x+0x20>
    1448:	e0 95       	com	r30
    144a:	0b 2e       	mov	r0, r27
    144c:	ba 2f       	mov	r27, r26
    144e:	a0 2d       	mov	r26, r0
    1450:	0b 01       	movw	r0, r22
    1452:	b9 01       	movw	r22, r18
    1454:	90 01       	movw	r18, r0
    1456:	0c 01       	movw	r0, r24
    1458:	ca 01       	movw	r24, r20
    145a:	a0 01       	movw	r20, r0
    145c:	11 24       	eor	r1, r1
    145e:	ff 27       	eor	r31, r31
    1460:	59 1b       	sub	r21, r25
    1462:	99 f0       	breq	.+38     	; 0x148a <__addsf3x+0x60>
    1464:	59 3f       	cpi	r21, 0xF9	; 249
    1466:	50 f4       	brcc	.+20     	; 0x147c <__addsf3x+0x52>
    1468:	50 3e       	cpi	r21, 0xE0	; 224
    146a:	68 f1       	brcs	.+90     	; 0x14c6 <__addsf3x+0x9c>
    146c:	1a 16       	cp	r1, r26
    146e:	f0 40       	sbci	r31, 0x00	; 0
    1470:	a2 2f       	mov	r26, r18
    1472:	23 2f       	mov	r18, r19
    1474:	34 2f       	mov	r19, r20
    1476:	44 27       	eor	r20, r20
    1478:	58 5f       	subi	r21, 0xF8	; 248
    147a:	f3 cf       	rjmp	.-26     	; 0x1462 <__addsf3x+0x38>
    147c:	46 95       	lsr	r20
    147e:	37 95       	ror	r19
    1480:	27 95       	ror	r18
    1482:	a7 95       	ror	r26
    1484:	f0 40       	sbci	r31, 0x00	; 0
    1486:	53 95       	inc	r21
    1488:	c9 f7       	brne	.-14     	; 0x147c <__addsf3x+0x52>
    148a:	7e f4       	brtc	.+30     	; 0x14aa <__addsf3x+0x80>
    148c:	1f 16       	cp	r1, r31
    148e:	ba 0b       	sbc	r27, r26
    1490:	62 0b       	sbc	r22, r18
    1492:	73 0b       	sbc	r23, r19
    1494:	84 0b       	sbc	r24, r20
    1496:	ba f0       	brmi	.+46     	; 0x14c6 <__addsf3x+0x9c>
    1498:	91 50       	subi	r25, 0x01	; 1
    149a:	a1 f0       	breq	.+40     	; 0x14c4 <__addsf3x+0x9a>
    149c:	ff 0f       	add	r31, r31
    149e:	bb 1f       	adc	r27, r27
    14a0:	66 1f       	adc	r22, r22
    14a2:	77 1f       	adc	r23, r23
    14a4:	88 1f       	adc	r24, r24
    14a6:	c2 f7       	brpl	.-16     	; 0x1498 <__addsf3x+0x6e>
    14a8:	0e c0       	rjmp	.+28     	; 0x14c6 <__addsf3x+0x9c>
    14aa:	ba 0f       	add	r27, r26
    14ac:	62 1f       	adc	r22, r18
    14ae:	73 1f       	adc	r23, r19
    14b0:	84 1f       	adc	r24, r20
    14b2:	48 f4       	brcc	.+18     	; 0x14c6 <__addsf3x+0x9c>
    14b4:	87 95       	ror	r24
    14b6:	77 95       	ror	r23
    14b8:	67 95       	ror	r22
    14ba:	b7 95       	ror	r27
    14bc:	f7 95       	ror	r31
    14be:	9e 3f       	cpi	r25, 0xFE	; 254
    14c0:	08 f0       	brcs	.+2      	; 0x14c4 <__addsf3x+0x9a>
    14c2:	b0 cf       	rjmp	.-160    	; 0x1424 <__addsf3+0x28>
    14c4:	93 95       	inc	r25
    14c6:	88 0f       	add	r24, r24
    14c8:	08 f0       	brcs	.+2      	; 0x14cc <__addsf3x+0xa2>
    14ca:	99 27       	eor	r25, r25
    14cc:	ee 0f       	add	r30, r30
    14ce:	97 95       	ror	r25
    14d0:	87 95       	ror	r24
    14d2:	08 95       	ret

000014d4 <__cmpsf2>:
    14d4:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__fp_cmp>
    14d8:	08 f4       	brcc	.+2      	; 0x14dc <__cmpsf2+0x8>
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	08 95       	ret

000014de <__divsf3>:
    14de:	0e 94 83 0a 	call	0x1506	; 0x1506 <__divsf3x>
    14e2:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <__fp_round>
    14e6:	0e 94 88 0b 	call	0x1710	; 0x1710 <__fp_pscB>
    14ea:	58 f0       	brcs	.+22     	; 0x1502 <__divsf3+0x24>
    14ec:	0e 94 81 0b 	call	0x1702	; 0x1702 <__fp_pscA>
    14f0:	40 f0       	brcs	.+16     	; 0x1502 <__divsf3+0x24>
    14f2:	29 f4       	brne	.+10     	; 0x14fe <__divsf3+0x20>
    14f4:	5f 3f       	cpi	r21, 0xFF	; 255
    14f6:	29 f0       	breq	.+10     	; 0x1502 <__divsf3+0x24>
    14f8:	0c 94 78 0b 	jmp	0x16f0	; 0x16f0 <__fp_inf>
    14fc:	51 11       	cpse	r21, r1
    14fe:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__fp_szero>
    1502:	0c 94 7e 0b 	jmp	0x16fc	; 0x16fc <__fp_nan>

00001506 <__divsf3x>:
    1506:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__fp_split3>
    150a:	68 f3       	brcs	.-38     	; 0x14e6 <__divsf3+0x8>

0000150c <__divsf3_pse>:
    150c:	99 23       	and	r25, r25
    150e:	b1 f3       	breq	.-20     	; 0x14fc <__divsf3+0x1e>
    1510:	55 23       	and	r21, r21
    1512:	91 f3       	breq	.-28     	; 0x14f8 <__divsf3+0x1a>
    1514:	95 1b       	sub	r25, r21
    1516:	55 0b       	sbc	r21, r21
    1518:	bb 27       	eor	r27, r27
    151a:	aa 27       	eor	r26, r26
    151c:	62 17       	cp	r22, r18
    151e:	73 07       	cpc	r23, r19
    1520:	84 07       	cpc	r24, r20
    1522:	38 f0       	brcs	.+14     	; 0x1532 <__divsf3_pse+0x26>
    1524:	9f 5f       	subi	r25, 0xFF	; 255
    1526:	5f 4f       	sbci	r21, 0xFF	; 255
    1528:	22 0f       	add	r18, r18
    152a:	33 1f       	adc	r19, r19
    152c:	44 1f       	adc	r20, r20
    152e:	aa 1f       	adc	r26, r26
    1530:	a9 f3       	breq	.-22     	; 0x151c <__divsf3_pse+0x10>
    1532:	35 d0       	rcall	.+106    	; 0x159e <__divsf3_pse+0x92>
    1534:	0e 2e       	mov	r0, r30
    1536:	3a f0       	brmi	.+14     	; 0x1546 <__divsf3_pse+0x3a>
    1538:	e0 e8       	ldi	r30, 0x80	; 128
    153a:	32 d0       	rcall	.+100    	; 0x15a0 <__divsf3_pse+0x94>
    153c:	91 50       	subi	r25, 0x01	; 1
    153e:	50 40       	sbci	r21, 0x00	; 0
    1540:	e6 95       	lsr	r30
    1542:	00 1c       	adc	r0, r0
    1544:	ca f7       	brpl	.-14     	; 0x1538 <__divsf3_pse+0x2c>
    1546:	2b d0       	rcall	.+86     	; 0x159e <__divsf3_pse+0x92>
    1548:	fe 2f       	mov	r31, r30
    154a:	29 d0       	rcall	.+82     	; 0x159e <__divsf3_pse+0x92>
    154c:	66 0f       	add	r22, r22
    154e:	77 1f       	adc	r23, r23
    1550:	88 1f       	adc	r24, r24
    1552:	bb 1f       	adc	r27, r27
    1554:	26 17       	cp	r18, r22
    1556:	37 07       	cpc	r19, r23
    1558:	48 07       	cpc	r20, r24
    155a:	ab 07       	cpc	r26, r27
    155c:	b0 e8       	ldi	r27, 0x80	; 128
    155e:	09 f0       	breq	.+2      	; 0x1562 <__divsf3_pse+0x56>
    1560:	bb 0b       	sbc	r27, r27
    1562:	80 2d       	mov	r24, r0
    1564:	bf 01       	movw	r22, r30
    1566:	ff 27       	eor	r31, r31
    1568:	93 58       	subi	r25, 0x83	; 131
    156a:	5f 4f       	sbci	r21, 0xFF	; 255
    156c:	3a f0       	brmi	.+14     	; 0x157c <__divsf3_pse+0x70>
    156e:	9e 3f       	cpi	r25, 0xFE	; 254
    1570:	51 05       	cpc	r21, r1
    1572:	78 f0       	brcs	.+30     	; 0x1592 <__divsf3_pse+0x86>
    1574:	0c 94 78 0b 	jmp	0x16f0	; 0x16f0 <__fp_inf>
    1578:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__fp_szero>
    157c:	5f 3f       	cpi	r21, 0xFF	; 255
    157e:	e4 f3       	brlt	.-8      	; 0x1578 <__divsf3_pse+0x6c>
    1580:	98 3e       	cpi	r25, 0xE8	; 232
    1582:	d4 f3       	brlt	.-12     	; 0x1578 <__divsf3_pse+0x6c>
    1584:	86 95       	lsr	r24
    1586:	77 95       	ror	r23
    1588:	67 95       	ror	r22
    158a:	b7 95       	ror	r27
    158c:	f7 95       	ror	r31
    158e:	9f 5f       	subi	r25, 0xFF	; 255
    1590:	c9 f7       	brne	.-14     	; 0x1584 <__divsf3_pse+0x78>
    1592:	88 0f       	add	r24, r24
    1594:	91 1d       	adc	r25, r1
    1596:	96 95       	lsr	r25
    1598:	87 95       	ror	r24
    159a:	97 f9       	bld	r25, 7
    159c:	08 95       	ret
    159e:	e1 e0       	ldi	r30, 0x01	; 1
    15a0:	66 0f       	add	r22, r22
    15a2:	77 1f       	adc	r23, r23
    15a4:	88 1f       	adc	r24, r24
    15a6:	bb 1f       	adc	r27, r27
    15a8:	62 17       	cp	r22, r18
    15aa:	73 07       	cpc	r23, r19
    15ac:	84 07       	cpc	r24, r20
    15ae:	ba 07       	cpc	r27, r26
    15b0:	20 f0       	brcs	.+8      	; 0x15ba <__divsf3_pse+0xae>
    15b2:	62 1b       	sub	r22, r18
    15b4:	73 0b       	sbc	r23, r19
    15b6:	84 0b       	sbc	r24, r20
    15b8:	ba 0b       	sbc	r27, r26
    15ba:	ee 1f       	adc	r30, r30
    15bc:	88 f7       	brcc	.-30     	; 0x15a0 <__divsf3_pse+0x94>
    15be:	e0 95       	com	r30
    15c0:	08 95       	ret

000015c2 <__fixsfsi>:
    15c2:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__fixunssfsi>
    15c6:	68 94       	set
    15c8:	b1 11       	cpse	r27, r1
    15ca:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__fp_szero>
    15ce:	08 95       	ret

000015d0 <__fixunssfsi>:
    15d0:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__fp_splitA>
    15d4:	88 f0       	brcs	.+34     	; 0x15f8 <__fixunssfsi+0x28>
    15d6:	9f 57       	subi	r25, 0x7F	; 127
    15d8:	98 f0       	brcs	.+38     	; 0x1600 <__fixunssfsi+0x30>
    15da:	b9 2f       	mov	r27, r25
    15dc:	99 27       	eor	r25, r25
    15de:	b7 51       	subi	r27, 0x17	; 23
    15e0:	b0 f0       	brcs	.+44     	; 0x160e <__fixunssfsi+0x3e>
    15e2:	e1 f0       	breq	.+56     	; 0x161c <__fixunssfsi+0x4c>
    15e4:	66 0f       	add	r22, r22
    15e6:	77 1f       	adc	r23, r23
    15e8:	88 1f       	adc	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	1a f0       	brmi	.+6      	; 0x15f4 <__fixunssfsi+0x24>
    15ee:	ba 95       	dec	r27
    15f0:	c9 f7       	brne	.-14     	; 0x15e4 <__fixunssfsi+0x14>
    15f2:	14 c0       	rjmp	.+40     	; 0x161c <__fixunssfsi+0x4c>
    15f4:	b1 30       	cpi	r27, 0x01	; 1
    15f6:	91 f0       	breq	.+36     	; 0x161c <__fixunssfsi+0x4c>
    15f8:	0e 94 c2 0b 	call	0x1784	; 0x1784 <__fp_zero>
    15fc:	b1 e0       	ldi	r27, 0x01	; 1
    15fe:	08 95       	ret
    1600:	0c 94 c2 0b 	jmp	0x1784	; 0x1784 <__fp_zero>
    1604:	67 2f       	mov	r22, r23
    1606:	78 2f       	mov	r23, r24
    1608:	88 27       	eor	r24, r24
    160a:	b8 5f       	subi	r27, 0xF8	; 248
    160c:	39 f0       	breq	.+14     	; 0x161c <__fixunssfsi+0x4c>
    160e:	b9 3f       	cpi	r27, 0xF9	; 249
    1610:	cc f3       	brlt	.-14     	; 0x1604 <__fixunssfsi+0x34>
    1612:	86 95       	lsr	r24
    1614:	77 95       	ror	r23
    1616:	67 95       	ror	r22
    1618:	b3 95       	inc	r27
    161a:	d9 f7       	brne	.-10     	; 0x1612 <__fixunssfsi+0x42>
    161c:	3e f4       	brtc	.+14     	; 0x162c <__fixunssfsi+0x5c>
    161e:	90 95       	com	r25
    1620:	80 95       	com	r24
    1622:	70 95       	com	r23
    1624:	61 95       	neg	r22
    1626:	7f 4f       	sbci	r23, 0xFF	; 255
    1628:	8f 4f       	sbci	r24, 0xFF	; 255
    162a:	9f 4f       	sbci	r25, 0xFF	; 255
    162c:	08 95       	ret

0000162e <__floatunsisf>:
    162e:	e8 94       	clt
    1630:	09 c0       	rjmp	.+18     	; 0x1644 <__floatsisf+0x12>

00001632 <__floatsisf>:
    1632:	97 fb       	bst	r25, 7
    1634:	3e f4       	brtc	.+14     	; 0x1644 <__floatsisf+0x12>
    1636:	90 95       	com	r25
    1638:	80 95       	com	r24
    163a:	70 95       	com	r23
    163c:	61 95       	neg	r22
    163e:	7f 4f       	sbci	r23, 0xFF	; 255
    1640:	8f 4f       	sbci	r24, 0xFF	; 255
    1642:	9f 4f       	sbci	r25, 0xFF	; 255
    1644:	99 23       	and	r25, r25
    1646:	a9 f0       	breq	.+42     	; 0x1672 <__floatsisf+0x40>
    1648:	f9 2f       	mov	r31, r25
    164a:	96 e9       	ldi	r25, 0x96	; 150
    164c:	bb 27       	eor	r27, r27
    164e:	93 95       	inc	r25
    1650:	f6 95       	lsr	r31
    1652:	87 95       	ror	r24
    1654:	77 95       	ror	r23
    1656:	67 95       	ror	r22
    1658:	b7 95       	ror	r27
    165a:	f1 11       	cpse	r31, r1
    165c:	f8 cf       	rjmp	.-16     	; 0x164e <__floatsisf+0x1c>
    165e:	fa f4       	brpl	.+62     	; 0x169e <__floatsisf+0x6c>
    1660:	bb 0f       	add	r27, r27
    1662:	11 f4       	brne	.+4      	; 0x1668 <__floatsisf+0x36>
    1664:	60 ff       	sbrs	r22, 0
    1666:	1b c0       	rjmp	.+54     	; 0x169e <__floatsisf+0x6c>
    1668:	6f 5f       	subi	r22, 0xFF	; 255
    166a:	7f 4f       	sbci	r23, 0xFF	; 255
    166c:	8f 4f       	sbci	r24, 0xFF	; 255
    166e:	9f 4f       	sbci	r25, 0xFF	; 255
    1670:	16 c0       	rjmp	.+44     	; 0x169e <__floatsisf+0x6c>
    1672:	88 23       	and	r24, r24
    1674:	11 f0       	breq	.+4      	; 0x167a <__floatsisf+0x48>
    1676:	96 e9       	ldi	r25, 0x96	; 150
    1678:	11 c0       	rjmp	.+34     	; 0x169c <__floatsisf+0x6a>
    167a:	77 23       	and	r23, r23
    167c:	21 f0       	breq	.+8      	; 0x1686 <__floatsisf+0x54>
    167e:	9e e8       	ldi	r25, 0x8E	; 142
    1680:	87 2f       	mov	r24, r23
    1682:	76 2f       	mov	r23, r22
    1684:	05 c0       	rjmp	.+10     	; 0x1690 <__floatsisf+0x5e>
    1686:	66 23       	and	r22, r22
    1688:	71 f0       	breq	.+28     	; 0x16a6 <__floatsisf+0x74>
    168a:	96 e8       	ldi	r25, 0x86	; 134
    168c:	86 2f       	mov	r24, r22
    168e:	70 e0       	ldi	r23, 0x00	; 0
    1690:	60 e0       	ldi	r22, 0x00	; 0
    1692:	2a f0       	brmi	.+10     	; 0x169e <__floatsisf+0x6c>
    1694:	9a 95       	dec	r25
    1696:	66 0f       	add	r22, r22
    1698:	77 1f       	adc	r23, r23
    169a:	88 1f       	adc	r24, r24
    169c:	da f7       	brpl	.-10     	; 0x1694 <__floatsisf+0x62>
    169e:	88 0f       	add	r24, r24
    16a0:	96 95       	lsr	r25
    16a2:	87 95       	ror	r24
    16a4:	97 f9       	bld	r25, 7
    16a6:	08 95       	ret

000016a8 <__fp_cmp>:
    16a8:	99 0f       	add	r25, r25
    16aa:	00 08       	sbc	r0, r0
    16ac:	55 0f       	add	r21, r21
    16ae:	aa 0b       	sbc	r26, r26
    16b0:	e0 e8       	ldi	r30, 0x80	; 128
    16b2:	fe ef       	ldi	r31, 0xFE	; 254
    16b4:	16 16       	cp	r1, r22
    16b6:	17 06       	cpc	r1, r23
    16b8:	e8 07       	cpc	r30, r24
    16ba:	f9 07       	cpc	r31, r25
    16bc:	c0 f0       	brcs	.+48     	; 0x16ee <__fp_cmp+0x46>
    16be:	12 16       	cp	r1, r18
    16c0:	13 06       	cpc	r1, r19
    16c2:	e4 07       	cpc	r30, r20
    16c4:	f5 07       	cpc	r31, r21
    16c6:	98 f0       	brcs	.+38     	; 0x16ee <__fp_cmp+0x46>
    16c8:	62 1b       	sub	r22, r18
    16ca:	73 0b       	sbc	r23, r19
    16cc:	84 0b       	sbc	r24, r20
    16ce:	95 0b       	sbc	r25, r21
    16d0:	39 f4       	brne	.+14     	; 0x16e0 <__fp_cmp+0x38>
    16d2:	0a 26       	eor	r0, r26
    16d4:	61 f0       	breq	.+24     	; 0x16ee <__fp_cmp+0x46>
    16d6:	23 2b       	or	r18, r19
    16d8:	24 2b       	or	r18, r20
    16da:	25 2b       	or	r18, r21
    16dc:	21 f4       	brne	.+8      	; 0x16e6 <__fp_cmp+0x3e>
    16de:	08 95       	ret
    16e0:	0a 26       	eor	r0, r26
    16e2:	09 f4       	brne	.+2      	; 0x16e6 <__fp_cmp+0x3e>
    16e4:	a1 40       	sbci	r26, 0x01	; 1
    16e6:	a6 95       	lsr	r26
    16e8:	8f ef       	ldi	r24, 0xFF	; 255
    16ea:	81 1d       	adc	r24, r1
    16ec:	81 1d       	adc	r24, r1
    16ee:	08 95       	ret

000016f0 <__fp_inf>:
    16f0:	97 f9       	bld	r25, 7
    16f2:	9f 67       	ori	r25, 0x7F	; 127
    16f4:	80 e8       	ldi	r24, 0x80	; 128
    16f6:	70 e0       	ldi	r23, 0x00	; 0
    16f8:	60 e0       	ldi	r22, 0x00	; 0
    16fa:	08 95       	ret

000016fc <__fp_nan>:
    16fc:	9f ef       	ldi	r25, 0xFF	; 255
    16fe:	80 ec       	ldi	r24, 0xC0	; 192
    1700:	08 95       	ret

00001702 <__fp_pscA>:
    1702:	00 24       	eor	r0, r0
    1704:	0a 94       	dec	r0
    1706:	16 16       	cp	r1, r22
    1708:	17 06       	cpc	r1, r23
    170a:	18 06       	cpc	r1, r24
    170c:	09 06       	cpc	r0, r25
    170e:	08 95       	ret

00001710 <__fp_pscB>:
    1710:	00 24       	eor	r0, r0
    1712:	0a 94       	dec	r0
    1714:	12 16       	cp	r1, r18
    1716:	13 06       	cpc	r1, r19
    1718:	14 06       	cpc	r1, r20
    171a:	05 06       	cpc	r0, r21
    171c:	08 95       	ret

0000171e <__fp_round>:
    171e:	09 2e       	mov	r0, r25
    1720:	03 94       	inc	r0
    1722:	00 0c       	add	r0, r0
    1724:	11 f4       	brne	.+4      	; 0x172a <__fp_round+0xc>
    1726:	88 23       	and	r24, r24
    1728:	52 f0       	brmi	.+20     	; 0x173e <__fp_round+0x20>
    172a:	bb 0f       	add	r27, r27
    172c:	40 f4       	brcc	.+16     	; 0x173e <__fp_round+0x20>
    172e:	bf 2b       	or	r27, r31
    1730:	11 f4       	brne	.+4      	; 0x1736 <__fp_round+0x18>
    1732:	60 ff       	sbrs	r22, 0
    1734:	04 c0       	rjmp	.+8      	; 0x173e <__fp_round+0x20>
    1736:	6f 5f       	subi	r22, 0xFF	; 255
    1738:	7f 4f       	sbci	r23, 0xFF	; 255
    173a:	8f 4f       	sbci	r24, 0xFF	; 255
    173c:	9f 4f       	sbci	r25, 0xFF	; 255
    173e:	08 95       	ret

00001740 <__fp_split3>:
    1740:	57 fd       	sbrc	r21, 7
    1742:	90 58       	subi	r25, 0x80	; 128
    1744:	44 0f       	add	r20, r20
    1746:	55 1f       	adc	r21, r21
    1748:	59 f0       	breq	.+22     	; 0x1760 <__fp_splitA+0x10>
    174a:	5f 3f       	cpi	r21, 0xFF	; 255
    174c:	71 f0       	breq	.+28     	; 0x176a <__fp_splitA+0x1a>
    174e:	47 95       	ror	r20

00001750 <__fp_splitA>:
    1750:	88 0f       	add	r24, r24
    1752:	97 fb       	bst	r25, 7
    1754:	99 1f       	adc	r25, r25
    1756:	61 f0       	breq	.+24     	; 0x1770 <__fp_splitA+0x20>
    1758:	9f 3f       	cpi	r25, 0xFF	; 255
    175a:	79 f0       	breq	.+30     	; 0x177a <__fp_splitA+0x2a>
    175c:	87 95       	ror	r24
    175e:	08 95       	ret
    1760:	12 16       	cp	r1, r18
    1762:	13 06       	cpc	r1, r19
    1764:	14 06       	cpc	r1, r20
    1766:	55 1f       	adc	r21, r21
    1768:	f2 cf       	rjmp	.-28     	; 0x174e <__fp_split3+0xe>
    176a:	46 95       	lsr	r20
    176c:	f1 df       	rcall	.-30     	; 0x1750 <__fp_splitA>
    176e:	08 c0       	rjmp	.+16     	; 0x1780 <__fp_splitA+0x30>
    1770:	16 16       	cp	r1, r22
    1772:	17 06       	cpc	r1, r23
    1774:	18 06       	cpc	r1, r24
    1776:	99 1f       	adc	r25, r25
    1778:	f1 cf       	rjmp	.-30     	; 0x175c <__fp_splitA+0xc>
    177a:	86 95       	lsr	r24
    177c:	71 05       	cpc	r23, r1
    177e:	61 05       	cpc	r22, r1
    1780:	08 94       	sec
    1782:	08 95       	ret

00001784 <__fp_zero>:
    1784:	e8 94       	clt

00001786 <__fp_szero>:
    1786:	bb 27       	eor	r27, r27
    1788:	66 27       	eor	r22, r22
    178a:	77 27       	eor	r23, r23
    178c:	cb 01       	movw	r24, r22
    178e:	97 f9       	bld	r25, 7
    1790:	08 95       	ret

00001792 <__gesf2>:
    1792:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__fp_cmp>
    1796:	08 f4       	brcc	.+2      	; 0x179a <__gesf2+0x8>
    1798:	8f ef       	ldi	r24, 0xFF	; 255
    179a:	08 95       	ret

0000179c <__mulsf3>:
    179c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <__mulsf3x>
    17a0:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <__fp_round>
    17a4:	0e 94 81 0b 	call	0x1702	; 0x1702 <__fp_pscA>
    17a8:	38 f0       	brcs	.+14     	; 0x17b8 <__mulsf3+0x1c>
    17aa:	0e 94 88 0b 	call	0x1710	; 0x1710 <__fp_pscB>
    17ae:	20 f0       	brcs	.+8      	; 0x17b8 <__mulsf3+0x1c>
    17b0:	95 23       	and	r25, r21
    17b2:	11 f0       	breq	.+4      	; 0x17b8 <__mulsf3+0x1c>
    17b4:	0c 94 78 0b 	jmp	0x16f0	; 0x16f0 <__fp_inf>
    17b8:	0c 94 7e 0b 	jmp	0x16fc	; 0x16fc <__fp_nan>
    17bc:	11 24       	eor	r1, r1
    17be:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__fp_szero>

000017c2 <__mulsf3x>:
    17c2:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__fp_split3>
    17c6:	70 f3       	brcs	.-36     	; 0x17a4 <__mulsf3+0x8>

000017c8 <__mulsf3_pse>:
    17c8:	95 9f       	mul	r25, r21
    17ca:	c1 f3       	breq	.-16     	; 0x17bc <__mulsf3+0x20>
    17cc:	95 0f       	add	r25, r21
    17ce:	50 e0       	ldi	r21, 0x00	; 0
    17d0:	55 1f       	adc	r21, r21
    17d2:	62 9f       	mul	r22, r18
    17d4:	f0 01       	movw	r30, r0
    17d6:	72 9f       	mul	r23, r18
    17d8:	bb 27       	eor	r27, r27
    17da:	f0 0d       	add	r31, r0
    17dc:	b1 1d       	adc	r27, r1
    17de:	63 9f       	mul	r22, r19
    17e0:	aa 27       	eor	r26, r26
    17e2:	f0 0d       	add	r31, r0
    17e4:	b1 1d       	adc	r27, r1
    17e6:	aa 1f       	adc	r26, r26
    17e8:	64 9f       	mul	r22, r20
    17ea:	66 27       	eor	r22, r22
    17ec:	b0 0d       	add	r27, r0
    17ee:	a1 1d       	adc	r26, r1
    17f0:	66 1f       	adc	r22, r22
    17f2:	82 9f       	mul	r24, r18
    17f4:	22 27       	eor	r18, r18
    17f6:	b0 0d       	add	r27, r0
    17f8:	a1 1d       	adc	r26, r1
    17fa:	62 1f       	adc	r22, r18
    17fc:	73 9f       	mul	r23, r19
    17fe:	b0 0d       	add	r27, r0
    1800:	a1 1d       	adc	r26, r1
    1802:	62 1f       	adc	r22, r18
    1804:	83 9f       	mul	r24, r19
    1806:	a0 0d       	add	r26, r0
    1808:	61 1d       	adc	r22, r1
    180a:	22 1f       	adc	r18, r18
    180c:	74 9f       	mul	r23, r20
    180e:	33 27       	eor	r19, r19
    1810:	a0 0d       	add	r26, r0
    1812:	61 1d       	adc	r22, r1
    1814:	23 1f       	adc	r18, r19
    1816:	84 9f       	mul	r24, r20
    1818:	60 0d       	add	r22, r0
    181a:	21 1d       	adc	r18, r1
    181c:	82 2f       	mov	r24, r18
    181e:	76 2f       	mov	r23, r22
    1820:	6a 2f       	mov	r22, r26
    1822:	11 24       	eor	r1, r1
    1824:	9f 57       	subi	r25, 0x7F	; 127
    1826:	50 40       	sbci	r21, 0x00	; 0
    1828:	9a f0       	brmi	.+38     	; 0x1850 <__mulsf3_pse+0x88>
    182a:	f1 f0       	breq	.+60     	; 0x1868 <__mulsf3_pse+0xa0>
    182c:	88 23       	and	r24, r24
    182e:	4a f0       	brmi	.+18     	; 0x1842 <__mulsf3_pse+0x7a>
    1830:	ee 0f       	add	r30, r30
    1832:	ff 1f       	adc	r31, r31
    1834:	bb 1f       	adc	r27, r27
    1836:	66 1f       	adc	r22, r22
    1838:	77 1f       	adc	r23, r23
    183a:	88 1f       	adc	r24, r24
    183c:	91 50       	subi	r25, 0x01	; 1
    183e:	50 40       	sbci	r21, 0x00	; 0
    1840:	a9 f7       	brne	.-22     	; 0x182c <__mulsf3_pse+0x64>
    1842:	9e 3f       	cpi	r25, 0xFE	; 254
    1844:	51 05       	cpc	r21, r1
    1846:	80 f0       	brcs	.+32     	; 0x1868 <__mulsf3_pse+0xa0>
    1848:	0c 94 78 0b 	jmp	0x16f0	; 0x16f0 <__fp_inf>
    184c:	0c 94 c3 0b 	jmp	0x1786	; 0x1786 <__fp_szero>
    1850:	5f 3f       	cpi	r21, 0xFF	; 255
    1852:	e4 f3       	brlt	.-8      	; 0x184c <__mulsf3_pse+0x84>
    1854:	98 3e       	cpi	r25, 0xE8	; 232
    1856:	d4 f3       	brlt	.-12     	; 0x184c <__mulsf3_pse+0x84>
    1858:	86 95       	lsr	r24
    185a:	77 95       	ror	r23
    185c:	67 95       	ror	r22
    185e:	b7 95       	ror	r27
    1860:	f7 95       	ror	r31
    1862:	e7 95       	ror	r30
    1864:	9f 5f       	subi	r25, 0xFF	; 255
    1866:	c1 f7       	brne	.-16     	; 0x1858 <__mulsf3_pse+0x90>
    1868:	fe 2b       	or	r31, r30
    186a:	88 0f       	add	r24, r24
    186c:	91 1d       	adc	r25, r1
    186e:	96 95       	lsr	r25
    1870:	87 95       	ror	r24
    1872:	97 f9       	bld	r25, 7
    1874:	08 95       	ret
    1876:	19 f4       	brne	.+6      	; 0x187e <__mulsf3_pse+0xb6>
    1878:	16 f4       	brtc	.+4      	; 0x187e <__mulsf3_pse+0xb6>
    187a:	0c 94 7e 0b 	jmp	0x16fc	; 0x16fc <__fp_nan>
    187e:	0c 94 81 0c 	jmp	0x1902	; 0x1902 <__fp_mpack>

00001882 <sqrt>:
    1882:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__fp_splitA>
    1886:	b8 f3       	brcs	.-18     	; 0x1876 <__mulsf3_pse+0xae>
    1888:	99 23       	and	r25, r25
    188a:	c9 f3       	breq	.-14     	; 0x187e <__mulsf3_pse+0xb6>
    188c:	b6 f3       	brts	.-20     	; 0x187a <__mulsf3_pse+0xb2>
    188e:	9f 57       	subi	r25, 0x7F	; 127
    1890:	55 0b       	sbc	r21, r21
    1892:	87 ff       	sbrs	r24, 7
    1894:	0e 94 8f 0c 	call	0x191e	; 0x191e <__fp_norm2>
    1898:	00 24       	eor	r0, r0
    189a:	a0 e6       	ldi	r26, 0x60	; 96
    189c:	40 ea       	ldi	r20, 0xA0	; 160
    189e:	90 01       	movw	r18, r0
    18a0:	80 58       	subi	r24, 0x80	; 128
    18a2:	56 95       	lsr	r21
    18a4:	97 95       	ror	r25
    18a6:	28 f4       	brcc	.+10     	; 0x18b2 <sqrt+0x30>
    18a8:	80 5c       	subi	r24, 0xC0	; 192
    18aa:	66 0f       	add	r22, r22
    18ac:	77 1f       	adc	r23, r23
    18ae:	88 1f       	adc	r24, r24
    18b0:	20 f0       	brcs	.+8      	; 0x18ba <sqrt+0x38>
    18b2:	26 17       	cp	r18, r22
    18b4:	37 07       	cpc	r19, r23
    18b6:	48 07       	cpc	r20, r24
    18b8:	30 f4       	brcc	.+12     	; 0x18c6 <sqrt+0x44>
    18ba:	62 1b       	sub	r22, r18
    18bc:	73 0b       	sbc	r23, r19
    18be:	84 0b       	sbc	r24, r20
    18c0:	20 29       	or	r18, r0
    18c2:	31 29       	or	r19, r1
    18c4:	4a 2b       	or	r20, r26
    18c6:	a6 95       	lsr	r26
    18c8:	17 94       	ror	r1
    18ca:	07 94       	ror	r0
    18cc:	20 25       	eor	r18, r0
    18ce:	31 25       	eor	r19, r1
    18d0:	4a 27       	eor	r20, r26
    18d2:	58 f7       	brcc	.-42     	; 0x18aa <sqrt+0x28>
    18d4:	66 0f       	add	r22, r22
    18d6:	77 1f       	adc	r23, r23
    18d8:	88 1f       	adc	r24, r24
    18da:	20 f0       	brcs	.+8      	; 0x18e4 <sqrt+0x62>
    18dc:	26 17       	cp	r18, r22
    18de:	37 07       	cpc	r19, r23
    18e0:	48 07       	cpc	r20, r24
    18e2:	30 f4       	brcc	.+12     	; 0x18f0 <sqrt+0x6e>
    18e4:	62 0b       	sbc	r22, r18
    18e6:	73 0b       	sbc	r23, r19
    18e8:	84 0b       	sbc	r24, r20
    18ea:	20 0d       	add	r18, r0
    18ec:	31 1d       	adc	r19, r1
    18ee:	41 1d       	adc	r20, r1
    18f0:	a0 95       	com	r26
    18f2:	81 f7       	brne	.-32     	; 0x18d4 <sqrt+0x52>
    18f4:	b9 01       	movw	r22, r18
    18f6:	84 2f       	mov	r24, r20
    18f8:	91 58       	subi	r25, 0x81	; 129
    18fa:	88 0f       	add	r24, r24
    18fc:	96 95       	lsr	r25
    18fe:	87 95       	ror	r24
    1900:	08 95       	ret

00001902 <__fp_mpack>:
    1902:	9f 3f       	cpi	r25, 0xFF	; 255
    1904:	31 f0       	breq	.+12     	; 0x1912 <__fp_mpack_finite+0xc>

00001906 <__fp_mpack_finite>:
    1906:	91 50       	subi	r25, 0x01	; 1
    1908:	20 f4       	brcc	.+8      	; 0x1912 <__fp_mpack_finite+0xc>
    190a:	87 95       	ror	r24
    190c:	77 95       	ror	r23
    190e:	67 95       	ror	r22
    1910:	b7 95       	ror	r27
    1912:	88 0f       	add	r24, r24
    1914:	91 1d       	adc	r25, r1
    1916:	96 95       	lsr	r25
    1918:	87 95       	ror	r24
    191a:	97 f9       	bld	r25, 7
    191c:	08 95       	ret

0000191e <__fp_norm2>:
    191e:	91 50       	subi	r25, 0x01	; 1
    1920:	50 40       	sbci	r21, 0x00	; 0
    1922:	66 0f       	add	r22, r22
    1924:	77 1f       	adc	r23, r23
    1926:	88 1f       	adc	r24, r24
    1928:	d2 f7       	brpl	.-12     	; 0x191e <__fp_norm2>
    192a:	08 95       	ret

0000192c <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    192c:	80 e0       	ldi	r24, 0x00	; 0
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	08 95       	ret

00001932 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1932:	1f 92       	push	r1
    1934:	0f 92       	push	r0
    1936:	0f b6       	in	r0, 0x3f	; 63
    1938:	0f 92       	push	r0
    193a:	11 24       	eor	r1, r1
    193c:	2f 93       	push	r18
    193e:	8f 93       	push	r24
    1940:	9f 93       	push	r25
    1942:	ef 93       	push	r30
    1944:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1946:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <Serial+0x10>
    194a:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <Serial+0x11>
    194e:	80 81       	ld	r24, Z
    1950:	e0 91 fe 01 	lds	r30, 0x01FE	; 0x8001fe <Serial+0x16>
    1954:	f0 91 ff 01 	lds	r31, 0x01FF	; 0x8001ff <Serial+0x17>
    1958:	82 fd       	sbrc	r24, 2
    195a:	12 c0       	rjmp	.+36     	; 0x1980 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    195c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    195e:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <Serial+0x19>
    1962:	8f 5f       	subi	r24, 0xFF	; 255
    1964:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1966:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <Serial+0x1a>
    196a:	82 17       	cp	r24, r18
    196c:	51 f0       	breq	.+20     	; 0x1982 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    196e:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <Serial+0x19>
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	e8 51       	subi	r30, 0x18	; 24
    1976:	fe 4f       	sbci	r31, 0xFE	; 254
    1978:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    197a:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <Serial+0x19>
    197e:	01 c0       	rjmp	.+2      	; 0x1982 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1980:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    1982:	ff 91       	pop	r31
    1984:	ef 91       	pop	r30
    1986:	9f 91       	pop	r25
    1988:	8f 91       	pop	r24
    198a:	2f 91       	pop	r18
    198c:	0f 90       	pop	r0
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	0f 90       	pop	r0
    1992:	1f 90       	pop	r1
    1994:	18 95       	reti

00001996 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1996:	1f 92       	push	r1
    1998:	0f 92       	push	r0
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	0f 92       	push	r0
    199e:	11 24       	eor	r1, r1
    19a0:	2f 93       	push	r18
    19a2:	3f 93       	push	r19
    19a4:	4f 93       	push	r20
    19a6:	5f 93       	push	r21
    19a8:	6f 93       	push	r22
    19aa:	7f 93       	push	r23
    19ac:	8f 93       	push	r24
    19ae:	9f 93       	push	r25
    19b0:	af 93       	push	r26
    19b2:	bf 93       	push	r27
    19b4:	ef 93       	push	r30
    19b6:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    19b8:	88 ee       	ldi	r24, 0xE8	; 232
    19ba:	91 e0       	ldi	r25, 0x01	; 1
    19bc:	0e 94 aa 11 	call	0x2354	; 0x2354 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    19c0:	ff 91       	pop	r31
    19c2:	ef 91       	pop	r30
    19c4:	bf 91       	pop	r27
    19c6:	af 91       	pop	r26
    19c8:	9f 91       	pop	r25
    19ca:	8f 91       	pop	r24
    19cc:	7f 91       	pop	r23
    19ce:	6f 91       	pop	r22
    19d0:	5f 91       	pop	r21
    19d2:	4f 91       	pop	r20
    19d4:	3f 91       	pop	r19
    19d6:	2f 91       	pop	r18
    19d8:	0f 90       	pop	r0
    19da:	0f be       	out	0x3f, r0	; 63
    19dc:	0f 90       	pop	r0
    19de:	1f 90       	pop	r1
    19e0:	18 95       	reti

000019e2 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    19e2:	88 ee       	ldi	r24, 0xE8	; 232
    19e4:	91 e0       	ldi	r25, 0x01	; 1
    19e6:	0e 94 5f 11 	call	0x22be	; 0x22be <_ZN14HardwareSerial9availableEv>
    19ea:	21 e0       	ldi	r18, 0x01	; 1
    19ec:	89 2b       	or	r24, r25
    19ee:	09 f4       	brne	.+2      	; 0x19f2 <_Z17Serial0_availablev+0x10>
    19f0:	20 e0       	ldi	r18, 0x00	; 0
}
    19f2:	82 2f       	mov	r24, r18
    19f4:	08 95       	ret

000019f6 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    19f6:	e8 ee       	ldi	r30, 0xE8	; 232
    19f8:	f1 e0       	ldi	r31, 0x01	; 1
    19fa:	13 82       	std	Z+3, r1	; 0x03
    19fc:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    19fe:	88 ee       	ldi	r24, 0xE8	; 232
    1a00:	93 e0       	ldi	r25, 0x03	; 3
    1a02:	a0 e0       	ldi	r26, 0x00	; 0
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	84 83       	std	Z+4, r24	; 0x04
    1a08:	95 83       	std	Z+5, r25	; 0x05
    1a0a:	a6 83       	std	Z+6, r26	; 0x06
    1a0c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1a0e:	86 e3       	ldi	r24, 0x36	; 54
    1a10:	91 e0       	ldi	r25, 0x01	; 1
    1a12:	91 83       	std	Z+1, r25	; 0x01
    1a14:	80 83       	st	Z, r24
    1a16:	85 ec       	ldi	r24, 0xC5	; 197
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	95 87       	std	Z+13, r25	; 0x0d
    1a1c:	84 87       	std	Z+12, r24	; 0x0c
    1a1e:	84 ec       	ldi	r24, 0xC4	; 196
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	97 87       	std	Z+15, r25	; 0x0f
    1a24:	86 87       	std	Z+14, r24	; 0x0e
    1a26:	80 ec       	ldi	r24, 0xC0	; 192
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	91 8b       	std	Z+17, r25	; 0x11
    1a2c:	80 8b       	std	Z+16, r24	; 0x10
    1a2e:	81 ec       	ldi	r24, 0xC1	; 193
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	93 8b       	std	Z+19, r25	; 0x13
    1a34:	82 8b       	std	Z+18, r24	; 0x12
    1a36:	82 ec       	ldi	r24, 0xC2	; 194
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	95 8b       	std	Z+21, r25	; 0x15
    1a3c:	84 8b       	std	Z+20, r24	; 0x14
    1a3e:	86 ec       	ldi	r24, 0xC6	; 198
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	97 8b       	std	Z+23, r25	; 0x17
    1a44:	86 8b       	std	Z+22, r24	; 0x16
    1a46:	11 8e       	std	Z+25, r1	; 0x19
    1a48:	12 8e       	std	Z+26, r1	; 0x1a
    1a4a:	13 8e       	std	Z+27, r1	; 0x1b
    1a4c:	14 8e       	std	Z+28, r1	; 0x1c
    1a4e:	08 95       	ret

00001a50 <initVariant>:
    1a50:	08 95       	ret

00001a52 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1a52:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <init>

	initVariant();
    1a56:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1a5a:	0e 94 48 08 	call	0x1090	; 0x1090 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1a5e:	cc e9       	ldi	r28, 0x9C	; 156
    1a60:	d1 e1       	ldi	r29, 0x11	; 17
#endif
	
	setup();
    
	for (;;) {
		loop();
    1a62:	0e 94 2a 08 	call	0x1054	; 0x1054 <loop>
		if (serialEventRun) serialEventRun();
    1a66:	20 97       	sbiw	r28, 0x00	; 0
    1a68:	e1 f3       	breq	.-8      	; 0x1a62 <main+0x10>
    1a6a:	0e 94 9c 11 	call	0x2338	; 0x2338 <_Z14serialEventRunv>
    1a6e:	f9 cf       	rjmp	.-14     	; 0x1a62 <main+0x10>

00001a70 <_ZN5Print5writeEPKhj>:
size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  return n;
}
    1a70:	cf 92       	push	r12
    1a72:	df 92       	push	r13
    1a74:	ef 92       	push	r14
    1a76:	ff 92       	push	r15
    1a78:	0f 93       	push	r16
    1a7a:	1f 93       	push	r17
    1a7c:	cf 93       	push	r28
    1a7e:	df 93       	push	r29
    1a80:	6c 01       	movw	r12, r24
    1a82:	7a 01       	movw	r14, r20
    1a84:	8b 01       	movw	r16, r22
    1a86:	c0 e0       	ldi	r28, 0x00	; 0
    1a88:	d0 e0       	ldi	r29, 0x00	; 0
    1a8a:	ce 15       	cp	r28, r14
    1a8c:	df 05       	cpc	r29, r15
    1a8e:	81 f0       	breq	.+32     	; 0x1ab0 <_ZN5Print5writeEPKhj+0x40>
    1a90:	d8 01       	movw	r26, r16
    1a92:	6d 91       	ld	r22, X+
    1a94:	8d 01       	movw	r16, r26
    1a96:	d6 01       	movw	r26, r12
    1a98:	ed 91       	ld	r30, X+
    1a9a:	fc 91       	ld	r31, X
    1a9c:	01 90       	ld	r0, Z+
    1a9e:	f0 81       	ld	r31, Z
    1aa0:	e0 2d       	mov	r30, r0
    1aa2:	c6 01       	movw	r24, r12
    1aa4:	09 95       	icall
    1aa6:	89 2b       	or	r24, r25
    1aa8:	11 f0       	breq	.+4      	; 0x1aae <_ZN5Print5writeEPKhj+0x3e>
    1aaa:	21 96       	adiw	r28, 0x01	; 1
    1aac:	ee cf       	rjmp	.-36     	; 0x1a8a <_ZN5Print5writeEPKhj+0x1a>
    1aae:	7e 01       	movw	r14, r28
    1ab0:	c7 01       	movw	r24, r14
    1ab2:	df 91       	pop	r29
    1ab4:	cf 91       	pop	r28
    1ab6:	1f 91       	pop	r17
    1ab8:	0f 91       	pop	r16
    1aba:	ff 90       	pop	r15
    1abc:	ef 90       	pop	r14
    1abe:	df 90       	pop	r13
    1ac0:	cf 90       	pop	r12
    1ac2:	08 95       	ret

00001ac4 <_ZN5Print5writeEPKc>:
    1ac4:	61 15       	cp	r22, r1
    1ac6:	71 05       	cpc	r23, r1
    1ac8:	79 f0       	breq	.+30     	; 0x1ae8 <_ZN5Print5writeEPKc+0x24>
    1aca:	fb 01       	movw	r30, r22
    1acc:	01 90       	ld	r0, Z+
    1ace:	00 20       	and	r0, r0
    1ad0:	e9 f7       	brne	.-6      	; 0x1acc <_ZN5Print5writeEPKc+0x8>
    1ad2:	31 97       	sbiw	r30, 0x01	; 1
    1ad4:	af 01       	movw	r20, r30
    1ad6:	46 1b       	sub	r20, r22
    1ad8:	57 0b       	sbc	r21, r23
    1ada:	dc 01       	movw	r26, r24
    1adc:	ed 91       	ld	r30, X+
    1ade:	fc 91       	ld	r31, X
    1ae0:	02 80       	ldd	r0, Z+2	; 0x02
    1ae2:	f3 81       	ldd	r31, Z+3	; 0x03
    1ae4:	e0 2d       	mov	r30, r0
    1ae6:	09 94       	ijmp
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	08 95       	ret

00001aee <_ZN5Print7printlnEv>:
    1aee:	61 e1       	ldi	r22, 0x11	; 17
    1af0:	71 e0       	ldi	r23, 0x01	; 1
    1af2:	0c 94 62 0d 	jmp	0x1ac4	; 0x1ac4 <_ZN5Print5writeEPKc>

00001af6 <_ZN5Print7printlnEPKc>:
    1af6:	0f 93       	push	r16
    1af8:	1f 93       	push	r17
    1afa:	cf 93       	push	r28
    1afc:	df 93       	push	r29
    1afe:	ec 01       	movw	r28, r24
    1b00:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <_ZN5Print5writeEPKc>
    1b04:	8c 01       	movw	r16, r24
    1b06:	ce 01       	movw	r24, r28
    1b08:	0e 94 77 0d 	call	0x1aee	; 0x1aee <_ZN5Print7printlnEv>
    1b0c:	80 0f       	add	r24, r16
    1b0e:	91 1f       	adc	r25, r17
    1b10:	df 91       	pop	r29
    1b12:	cf 91       	pop	r28
    1b14:	1f 91       	pop	r17
    1b16:	0f 91       	pop	r16
    1b18:	08 95       	ret

00001b1a <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    1b1a:	8f 92       	push	r8
    1b1c:	9f 92       	push	r9
    1b1e:	af 92       	push	r10
    1b20:	bf 92       	push	r11
    1b22:	ef 92       	push	r14
    1b24:	ff 92       	push	r15
    1b26:	0f 93       	push	r16
    1b28:	1f 93       	push	r17
    1b2a:	cf 93       	push	r28
    1b2c:	df 93       	push	r29
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
    1b32:	a1 97       	sbiw	r28, 0x21	; 33
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	f8 94       	cli
    1b38:	de bf       	out	0x3e, r29	; 62
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	cd bf       	out	0x3d, r28	; 61
    1b3e:	7c 01       	movw	r14, r24
    1b40:	fa 01       	movw	r30, r20
    1b42:	cb 01       	movw	r24, r22
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    1b44:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    1b46:	22 30       	cpi	r18, 0x02	; 2
    1b48:	08 f4       	brcc	.+2      	; 0x1b4c <_ZN5Print11printNumberEmh+0x32>
    1b4a:	2a e0       	ldi	r18, 0x0A	; 10
    1b4c:	8e 01       	movw	r16, r28
    1b4e:	0f 5d       	subi	r16, 0xDF	; 223
    1b50:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    char c = n % base;
    1b52:	82 2e       	mov	r8, r18
    1b54:	91 2c       	mov	r9, r1
    1b56:	a1 2c       	mov	r10, r1
    1b58:	b1 2c       	mov	r11, r1
    1b5a:	bf 01       	movw	r22, r30
    1b5c:	a5 01       	movw	r20, r10
    1b5e:	94 01       	movw	r18, r8
    1b60:	0e 94 44 14 	call	0x2888	; 0x2888 <__udivmodsi4>
    n /= base;
    1b64:	f9 01       	movw	r30, r18
    1b66:	ca 01       	movw	r24, r20

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1b68:	01 50       	subi	r16, 0x01	; 1
    1b6a:	11 09       	sbc	r17, r1
    1b6c:	6a 30       	cpi	r22, 0x0A	; 10
    1b6e:	10 f4       	brcc	.+4      	; 0x1b74 <_ZN5Print11printNumberEmh+0x5a>
    1b70:	60 5d       	subi	r22, 0xD0	; 208
    1b72:	01 c0       	rjmp	.+2      	; 0x1b76 <_ZN5Print11printNumberEmh+0x5c>
    1b74:	69 5c       	subi	r22, 0xC9	; 201
    1b76:	d8 01       	movw	r26, r16
    1b78:	6c 93       	st	X, r22
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    1b7a:	23 2b       	or	r18, r19
    1b7c:	24 2b       	or	r18, r20
    1b7e:	25 2b       	or	r18, r21
    1b80:	61 f7       	brne	.-40     	; 0x1b5a <_ZN5Print11printNumberEmh+0x40>
    n /= base;

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    1b82:	b8 01       	movw	r22, r16
    1b84:	c7 01       	movw	r24, r14
    1b86:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <_ZN5Print5writeEPKc>
}
    1b8a:	a1 96       	adiw	r28, 0x21	; 33
    1b8c:	0f b6       	in	r0, 0x3f	; 63
    1b8e:	f8 94       	cli
    1b90:	de bf       	out	0x3e, r29	; 62
    1b92:	0f be       	out	0x3f, r0	; 63
    1b94:	cd bf       	out	0x3d, r28	; 61
    1b96:	df 91       	pop	r29
    1b98:	cf 91       	pop	r28
    1b9a:	1f 91       	pop	r17
    1b9c:	0f 91       	pop	r16
    1b9e:	ff 90       	pop	r15
    1ba0:	ef 90       	pop	r14
    1ba2:	bf 90       	pop	r11
    1ba4:	af 90       	pop	r10
    1ba6:	9f 90       	pop	r9
    1ba8:	8f 90       	pop	r8
    1baa:	08 95       	ret

00001bac <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    1bac:	21 15       	cp	r18, r1
    1bae:	31 05       	cpc	r19, r1
    1bb0:	41 f4       	brne	.+16     	; 0x1bc2 <_ZN5Print5printEmi+0x16>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	ed 91       	ld	r30, X+
    1bb6:	fc 91       	ld	r31, X
    1bb8:	01 90       	ld	r0, Z+
    1bba:	f0 81       	ld	r31, Z
    1bbc:	e0 2d       	mov	r30, r0
    1bbe:	64 2f       	mov	r22, r20
    1bc0:	09 94       	ijmp
  else return printNumber(n, base);
    1bc2:	0c 94 8d 0d 	jmp	0x1b1a	; 0x1b1a <_ZN5Print11printNumberEmh>

00001bc6 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    1bc6:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    1bc8:	46 2f       	mov	r20, r22
    1bca:	50 e0       	ldi	r21, 0x00	; 0
    1bcc:	60 e0       	ldi	r22, 0x00	; 0
    1bce:	70 e0       	ldi	r23, 0x00	; 0
    1bd0:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <_ZN5Print5printEmi>

00001bd4 <nothing>:
    #endif
      break;       
#endif
    }
      
    intFunc[interruptNum] = nothing;
    1bd4:	08 95       	ret

00001bd6 <attachInterrupt>:
    1bd6:	82 30       	cpi	r24, 0x02	; 2
    1bd8:	e8 f4       	brcc	.+58     	; 0x1c14 <attachInterrupt+0x3e>
    1bda:	e8 2f       	mov	r30, r24
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	ee 0f       	add	r30, r30
    1be0:	ff 1f       	adc	r31, r31
    1be2:	eb 5f       	subi	r30, 0xFB	; 251
    1be4:	fe 4f       	sbci	r31, 0xFE	; 254
    1be6:	71 83       	std	Z+1, r23	; 0x01
    1be8:	60 83       	st	Z, r22
    1bea:	81 30       	cpi	r24, 0x01	; 1
    1bec:	41 f0       	breq	.+16     	; 0x1bfe <attachInterrupt+0x28>
    1bee:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    1bf2:	8c 7f       	andi	r24, 0xFC	; 252
    1bf4:	48 2b       	or	r20, r24
    1bf6:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    1bfa:	e8 9a       	sbi	0x1d, 0	; 29
    1bfc:	08 95       	ret
    1bfe:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    1c02:	83 7f       	andi	r24, 0xF3	; 243
    1c04:	44 0f       	add	r20, r20
    1c06:	55 1f       	adc	r21, r21
    1c08:	44 0f       	add	r20, r20
    1c0a:	55 1f       	adc	r21, r21
    1c0c:	48 2b       	or	r20, r24
    1c0e:	40 93 69 00 	sts	0x0069, r20	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    1c12:	e9 9a       	sbi	0x1d, 1	; 29
    1c14:	08 95       	ret

00001c16 <__vector_1>:
IMPLEMENT_ISR(INT6_vect, EXTERNAL_INT_6)
IMPLEMENT_ISR(INT7_vect, EXTERNAL_INT_7)

#else

IMPLEMENT_ISR(INT0_vect, EXTERNAL_INT_0)
    1c16:	1f 92       	push	r1
    1c18:	0f 92       	push	r0
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	0f 92       	push	r0
    1c1e:	11 24       	eor	r1, r1
    1c20:	2f 93       	push	r18
    1c22:	3f 93       	push	r19
    1c24:	4f 93       	push	r20
    1c26:	5f 93       	push	r21
    1c28:	6f 93       	push	r22
    1c2a:	7f 93       	push	r23
    1c2c:	8f 93       	push	r24
    1c2e:	9f 93       	push	r25
    1c30:	af 93       	push	r26
    1c32:	bf 93       	push	r27
    1c34:	ef 93       	push	r30
    1c36:	ff 93       	push	r31
    1c38:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <intFunc>
    1c3c:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <intFunc+0x1>
    1c40:	09 95       	icall
    1c42:	ff 91       	pop	r31
    1c44:	ef 91       	pop	r30
    1c46:	bf 91       	pop	r27
    1c48:	af 91       	pop	r26
    1c4a:	9f 91       	pop	r25
    1c4c:	8f 91       	pop	r24
    1c4e:	7f 91       	pop	r23
    1c50:	6f 91       	pop	r22
    1c52:	5f 91       	pop	r21
    1c54:	4f 91       	pop	r20
    1c56:	3f 91       	pop	r19
    1c58:	2f 91       	pop	r18
    1c5a:	0f 90       	pop	r0
    1c5c:	0f be       	out	0x3f, r0	; 63
    1c5e:	0f 90       	pop	r0
    1c60:	1f 90       	pop	r1
    1c62:	18 95       	reti

00001c64 <__vector_2>:
IMPLEMENT_ISR(INT1_vect, EXTERNAL_INT_1)
    1c64:	1f 92       	push	r1
    1c66:	0f 92       	push	r0
    1c68:	0f b6       	in	r0, 0x3f	; 63
    1c6a:	0f 92       	push	r0
    1c6c:	11 24       	eor	r1, r1
    1c6e:	2f 93       	push	r18
    1c70:	3f 93       	push	r19
    1c72:	4f 93       	push	r20
    1c74:	5f 93       	push	r21
    1c76:	6f 93       	push	r22
    1c78:	7f 93       	push	r23
    1c7a:	8f 93       	push	r24
    1c7c:	9f 93       	push	r25
    1c7e:	af 93       	push	r26
    1c80:	bf 93       	push	r27
    1c82:	ef 93       	push	r30
    1c84:	ff 93       	push	r31
    1c86:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <intFunc+0x2>
    1c8a:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <intFunc+0x3>
    1c8e:	09 95       	icall
    1c90:	ff 91       	pop	r31
    1c92:	ef 91       	pop	r30
    1c94:	bf 91       	pop	r27
    1c96:	af 91       	pop	r26
    1c98:	9f 91       	pop	r25
    1c9a:	8f 91       	pop	r24
    1c9c:	7f 91       	pop	r23
    1c9e:	6f 91       	pop	r22
    1ca0:	5f 91       	pop	r21
    1ca2:	4f 91       	pop	r20
    1ca4:	3f 91       	pop	r19
    1ca6:	2f 91       	pop	r18
    1ca8:	0f 90       	pop	r0
    1caa:	0f be       	out	0x3f, r0	; 63
    1cac:	0f 90       	pop	r0
    1cae:	1f 90       	pop	r1
    1cb0:	18 95       	reti

00001cb2 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1cb2:	1f 92       	push	r1
    1cb4:	0f 92       	push	r0
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	0f 92       	push	r0
    1cba:	11 24       	eor	r1, r1
    1cbc:	2f 93       	push	r18
    1cbe:	3f 93       	push	r19
    1cc0:	8f 93       	push	r24
    1cc2:	9f 93       	push	r25
    1cc4:	af 93       	push	r26
    1cc6:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1cc8:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <timer0_millis>
    1ccc:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <timer0_millis+0x1>
    1cd0:	a0 91 88 02 	lds	r26, 0x0288	; 0x800288 <timer0_millis+0x2>
    1cd4:	b0 91 89 02 	lds	r27, 0x0289	; 0x800289 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    1cd8:	30 91 85 02 	lds	r19, 0x0285	; 0x800285 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    1cdc:	23 e0       	ldi	r18, 0x03	; 3
    1cde:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    1ce0:	2d 37       	cpi	r18, 0x7D	; 125
    1ce2:	20 f4       	brcc	.+8      	; 0x1cec <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1ce4:	01 96       	adiw	r24, 0x01	; 1
    1ce6:	a1 1d       	adc	r26, r1
    1ce8:	b1 1d       	adc	r27, r1
    1cea:	05 c0       	rjmp	.+10     	; 0x1cf6 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1cec:	26 e8       	ldi	r18, 0x86	; 134
    1cee:	23 0f       	add	r18, r19
		m += 1;
    1cf0:	02 96       	adiw	r24, 0x02	; 2
    1cf2:	a1 1d       	adc	r26, r1
    1cf4:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1cf6:	20 93 85 02 	sts	0x0285, r18	; 0x800285 <timer0_fract>
	timer0_millis = m;
    1cfa:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <timer0_millis>
    1cfe:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <timer0_millis+0x1>
    1d02:	a0 93 88 02 	sts	0x0288, r26	; 0x800288 <timer0_millis+0x2>
    1d06:	b0 93 89 02 	sts	0x0289, r27	; 0x800289 <timer0_millis+0x3>
	timer0_overflow_count++;
    1d0a:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <timer0_overflow_count>
    1d0e:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <timer0_overflow_count+0x1>
    1d12:	a0 91 8c 02 	lds	r26, 0x028C	; 0x80028c <timer0_overflow_count+0x2>
    1d16:	b0 91 8d 02 	lds	r27, 0x028D	; 0x80028d <timer0_overflow_count+0x3>
    1d1a:	01 96       	adiw	r24, 0x01	; 1
    1d1c:	a1 1d       	adc	r26, r1
    1d1e:	b1 1d       	adc	r27, r1
    1d20:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <timer0_overflow_count>
    1d24:	90 93 8b 02 	sts	0x028B, r25	; 0x80028b <timer0_overflow_count+0x1>
    1d28:	a0 93 8c 02 	sts	0x028C, r26	; 0x80028c <timer0_overflow_count+0x2>
    1d2c:	b0 93 8d 02 	sts	0x028D, r27	; 0x80028d <timer0_overflow_count+0x3>
}
    1d30:	bf 91       	pop	r27
    1d32:	af 91       	pop	r26
    1d34:	9f 91       	pop	r25
    1d36:	8f 91       	pop	r24
    1d38:	3f 91       	pop	r19
    1d3a:	2f 91       	pop	r18
    1d3c:	0f 90       	pop	r0
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	0f 90       	pop	r0
    1d42:	1f 90       	pop	r1
    1d44:	18 95       	reti

00001d46 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    1d46:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1d48:	f8 94       	cli
	m = timer0_millis;
    1d4a:	60 91 86 02 	lds	r22, 0x0286	; 0x800286 <timer0_millis>
    1d4e:	70 91 87 02 	lds	r23, 0x0287	; 0x800287 <timer0_millis+0x1>
    1d52:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <timer0_millis+0x2>
    1d56:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <timer0_millis+0x3>
	SREG = oldSREG;
    1d5a:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    1d5c:	08 95       	ret

00001d5e <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1d5e:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    1d60:	f8 94       	cli
	m = timer0_overflow_count;
    1d62:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <timer0_overflow_count>
    1d66:	90 91 8b 02 	lds	r25, 0x028B	; 0x80028b <timer0_overflow_count+0x1>
    1d6a:	a0 91 8c 02 	lds	r26, 0x028C	; 0x80028c <timer0_overflow_count+0x2>
    1d6e:	b0 91 8d 02 	lds	r27, 0x028D	; 0x80028d <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    1d72:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1d74:	a8 9b       	sbis	0x15, 0	; 21
    1d76:	05 c0       	rjmp	.+10     	; 0x1d82 <micros+0x24>
    1d78:	2f 3f       	cpi	r18, 0xFF	; 255
    1d7a:	19 f0       	breq	.+6      	; 0x1d82 <micros+0x24>
		m++;
    1d7c:	01 96       	adiw	r24, 0x01	; 1
    1d7e:	a1 1d       	adc	r26, r1
    1d80:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1d82:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1d84:	ba 2f       	mov	r27, r26
    1d86:	a9 2f       	mov	r26, r25
    1d88:	98 2f       	mov	r25, r24
    1d8a:	88 27       	eor	r24, r24
    1d8c:	82 0f       	add	r24, r18
    1d8e:	91 1d       	adc	r25, r1
    1d90:	a1 1d       	adc	r26, r1
    1d92:	b1 1d       	adc	r27, r1
    1d94:	bc 01       	movw	r22, r24
    1d96:	cd 01       	movw	r24, r26
    1d98:	42 e0       	ldi	r20, 0x02	; 2
    1d9a:	66 0f       	add	r22, r22
    1d9c:	77 1f       	adc	r23, r23
    1d9e:	88 1f       	adc	r24, r24
    1da0:	99 1f       	adc	r25, r25
    1da2:	4a 95       	dec	r20
    1da4:	d1 f7       	brne	.-12     	; 0x1d9a <micros+0x3c>
}
    1da6:	08 95       	ret

00001da8 <delay>:

void delay(unsigned long ms)
{
    1da8:	8f 92       	push	r8
    1daa:	9f 92       	push	r9
    1dac:	af 92       	push	r10
    1dae:	bf 92       	push	r11
    1db0:	cf 92       	push	r12
    1db2:	df 92       	push	r13
    1db4:	ef 92       	push	r14
    1db6:	ff 92       	push	r15
    1db8:	6b 01       	movw	r12, r22
    1dba:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    1dbc:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <micros>
    1dc0:	4b 01       	movw	r8, r22
    1dc2:	5c 01       	movw	r10, r24

	while (ms > 0) {
    1dc4:	c1 14       	cp	r12, r1
    1dc6:	d1 04       	cpc	r13, r1
    1dc8:	e1 04       	cpc	r14, r1
    1dca:	f1 04       	cpc	r15, r1
    1dcc:	01 f1       	breq	.+64     	; 0x1e0e <delay+0x66>
		yield();
    1dce:	0e 94 34 12 	call	0x2468	; 0x2468 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    1dd2:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <micros>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	88 19       	sub	r24, r8
    1ddc:	99 09       	sbc	r25, r9
    1dde:	aa 09       	sbc	r26, r10
    1de0:	bb 09       	sbc	r27, r11
    1de2:	88 3e       	cpi	r24, 0xE8	; 232
    1de4:	93 40       	sbci	r25, 0x03	; 3
    1de6:	a1 05       	cpc	r26, r1
    1de8:	b1 05       	cpc	r27, r1
    1dea:	60 f3       	brcs	.-40     	; 0x1dc4 <delay+0x1c>
			ms--;
    1dec:	21 e0       	ldi	r18, 0x01	; 1
    1dee:	c2 1a       	sub	r12, r18
    1df0:	d1 08       	sbc	r13, r1
    1df2:	e1 08       	sbc	r14, r1
    1df4:	f1 08       	sbc	r15, r1
			start += 1000;
    1df6:	88 ee       	ldi	r24, 0xE8	; 232
    1df8:	88 0e       	add	r8, r24
    1dfa:	83 e0       	ldi	r24, 0x03	; 3
    1dfc:	98 1e       	adc	r9, r24
    1dfe:	a1 1c       	adc	r10, r1
    1e00:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    1e02:	c1 14       	cp	r12, r1
    1e04:	d1 04       	cpc	r13, r1
    1e06:	e1 04       	cpc	r14, r1
    1e08:	f1 04       	cpc	r15, r1
    1e0a:	19 f7       	brne	.-58     	; 0x1dd2 <delay+0x2a>
    1e0c:	db cf       	rjmp	.-74     	; 0x1dc4 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    1e0e:	ff 90       	pop	r15
    1e10:	ef 90       	pop	r14
    1e12:	df 90       	pop	r13
    1e14:	cf 90       	pop	r12
    1e16:	bf 90       	pop	r11
    1e18:	af 90       	pop	r10
    1e1a:	9f 90       	pop	r9
    1e1c:	8f 90       	pop	r8
    1e1e:	08 95       	ret

00001e20 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    1e20:	82 30       	cpi	r24, 0x02	; 2
    1e22:	91 05       	cpc	r25, r1
    1e24:	38 f0       	brcs	.+14     	; 0x1e34 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    1e26:	88 0f       	add	r24, r24
    1e28:	99 1f       	adc	r25, r25
    1e2a:	88 0f       	add	r24, r24
    1e2c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    1e2e:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	f1 f7       	brne	.-4      	; 0x1e30 <delayMicroseconds+0x10>
    1e34:	08 95       	ret

00001e36 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1e36:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1e38:	84 b5       	in	r24, 0x24	; 36
    1e3a:	82 60       	ori	r24, 0x02	; 2
    1e3c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1e3e:	84 b5       	in	r24, 0x24	; 36
    1e40:	81 60       	ori	r24, 0x01	; 1
    1e42:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1e44:	85 b5       	in	r24, 0x25	; 37
    1e46:	82 60       	ori	r24, 0x02	; 2
    1e48:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1e4a:	85 b5       	in	r24, 0x25	; 37
    1e4c:	81 60       	ori	r24, 0x01	; 1
    1e4e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1e50:	ee e6       	ldi	r30, 0x6E	; 110
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	81 60       	ori	r24, 0x01	; 1
    1e58:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1e5a:	e1 e8       	ldi	r30, 0x81	; 129
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1e60:	80 81       	ld	r24, Z
    1e62:	82 60       	ori	r24, 0x02	; 2
    1e64:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1e66:	80 81       	ld	r24, Z
    1e68:	81 60       	ori	r24, 0x01	; 1
    1e6a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1e6c:	e0 e8       	ldi	r30, 0x80	; 128
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	81 60       	ori	r24, 0x01	; 1
    1e74:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1e76:	e1 eb       	ldi	r30, 0xB1	; 177
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	84 60       	ori	r24, 0x04	; 4
    1e7e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1e80:	e0 eb       	ldi	r30, 0xB0	; 176
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	81 60       	ori	r24, 0x01	; 1
    1e88:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1e8a:	ea e7       	ldi	r30, 0x7A	; 122
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	80 81       	ld	r24, Z
    1e90:	84 60       	ori	r24, 0x04	; 4
    1e92:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1e94:	80 81       	ld	r24, Z
    1e96:	82 60       	ori	r24, 0x02	; 2
    1e98:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1e9a:	80 81       	ld	r24, Z
    1e9c:	81 60       	ori	r24, 0x01	; 1
    1e9e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1ea0:	80 81       	ld	r24, Z
    1ea2:	80 68       	ori	r24, 0x80	; 128
    1ea4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1ea6:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    1eaa:	08 95       	ret

00001eac <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    1eac:	1f 93       	push	r17
    1eae:	cf 93       	push	r28
    1eb0:	df 93       	push	r29
    1eb2:	18 2f       	mov	r17, r24
    1eb4:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    1eb6:	61 e0       	ldi	r22, 0x01	; 1
    1eb8:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <pinMode>
	if (val == 0)
    1ebc:	20 97       	sbiw	r28, 0x00	; 0
    1ebe:	11 f4       	brne	.+4      	; 0x1ec4 <analogWrite+0x18>
	{
		digitalWrite(pin, LOW);
    1ec0:	60 e0       	ldi	r22, 0x00	; 0
    1ec2:	04 c0       	rjmp	.+8      	; 0x1ecc <analogWrite+0x20>
	}
	else if (val == 255)
    1ec4:	cf 3f       	cpi	r28, 0xFF	; 255
    1ec6:	d1 05       	cpc	r29, r1
    1ec8:	39 f4       	brne	.+14     	; 0x1ed8 <analogWrite+0x2c>
	{
		digitalWrite(pin, HIGH);
    1eca:	61 e0       	ldi	r22, 0x01	; 1
    1ecc:	81 2f       	mov	r24, r17
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    1ece:	df 91       	pop	r29
    1ed0:	cf 91       	pop	r28
    1ed2:	1f 91       	pop	r17
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
	{
		digitalWrite(pin, HIGH);
    1ed4:	0c 94 1a 10 	jmp	0x2034	; 0x2034 <digitalWrite>
	}
	else
	{
		switch(digitalPinToTimer(pin))
    1ed8:	e1 2f       	mov	r30, r17
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	ec 54       	subi	r30, 0x4C	; 76
    1ede:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee0:	e4 91       	lpm	r30, Z
    1ee2:	e3 30       	cpi	r30, 0x03	; 3
    1ee4:	f9 f0       	breq	.+62     	; 0x1f24 <analogWrite+0x78>
    1ee6:	48 f4       	brcc	.+18     	; 0x1efa <analogWrite+0x4e>
    1ee8:	e1 30       	cpi	r30, 0x01	; 1
    1eea:	b9 f0       	breq	.+46     	; 0x1f1a <analogWrite+0x6e>
    1eec:	e2 30       	cpi	r30, 0x02	; 2
    1eee:	a1 f5       	brne	.+104    	; 0x1f58 <analogWrite+0xac>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    1ef0:	84 b5       	in	r24, 0x24	; 36
    1ef2:	80 62       	ori	r24, 0x20	; 32
    1ef4:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    1ef6:	c8 bd       	out	0x28, r28	; 40
				break;
    1ef8:	34 c0       	rjmp	.+104    	; 0x1f62 <analogWrite+0xb6>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    1efa:	e7 30       	cpi	r30, 0x07	; 7
    1efc:	e9 f0       	breq	.+58     	; 0x1f38 <analogWrite+0x8c>
    1efe:	e8 30       	cpi	r30, 0x08	; 8
    1f00:	19 f1       	breq	.+70     	; 0x1f48 <analogWrite+0x9c>
    1f02:	e4 30       	cpi	r30, 0x04	; 4
    1f04:	49 f5       	brne	.+82     	; 0x1f58 <analogWrite+0xac>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    1f06:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1f0a:	80 62       	ori	r24, 0x20	; 32
    1f0c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
				OCR1B = val; // set pwm duty
    1f10:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
    1f14:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
				break;
    1f18:	24 c0       	rjmp	.+72     	; 0x1f62 <analogWrite+0xb6>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    1f1a:	84 b5       	in	r24, 0x24	; 36
    1f1c:	80 68       	ori	r24, 0x80	; 128
    1f1e:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    1f20:	c7 bd       	out	0x27, r28	; 39
				break;
    1f22:	1f c0       	rjmp	.+62     	; 0x1f62 <analogWrite+0xb6>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    1f24:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1f28:	80 68       	ori	r24, 0x80	; 128
    1f2a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
				OCR1A = val; // set pwm duty
    1f2e:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1f32:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
				break;
    1f36:	15 c0       	rjmp	.+42     	; 0x1f62 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    1f38:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1f3c:	80 68       	ori	r24, 0x80	; 128
    1f3e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
				OCR2A = val; // set pwm duty
    1f42:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
				break;
    1f46:	0d c0       	rjmp	.+26     	; 0x1f62 <analogWrite+0xb6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    1f48:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1f4c:	80 62       	ori	r24, 0x20	; 32
    1f4e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
				OCR2B = val; // set pwm duty
    1f52:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
				break;
    1f56:	05 c0       	rjmp	.+10     	; 0x1f62 <analogWrite+0xb6>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    1f58:	c0 38       	cpi	r28, 0x80	; 128
    1f5a:	d1 05       	cpc	r29, r1
    1f5c:	0c f0       	brlt	.+2      	; 0x1f60 <analogWrite+0xb4>
    1f5e:	b5 cf       	rjmp	.-150    	; 0x1eca <analogWrite+0x1e>
    1f60:	af cf       	rjmp	.-162    	; 0x1ec0 <analogWrite+0x14>
				} else {
					digitalWrite(pin, HIGH);
				}
		}
	}
}
    1f62:	df 91       	pop	r29
    1f64:	cf 91       	pop	r28
    1f66:	1f 91       	pop	r17
    1f68:	08 95       	ret

00001f6a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1f6a:	83 30       	cpi	r24, 0x03	; 3
    1f6c:	81 f0       	breq	.+32     	; 0x1f8e <turnOffPWM+0x24>
    1f6e:	28 f4       	brcc	.+10     	; 0x1f7a <turnOffPWM+0x10>
    1f70:	81 30       	cpi	r24, 0x01	; 1
    1f72:	99 f0       	breq	.+38     	; 0x1f9a <turnOffPWM+0x30>
    1f74:	82 30       	cpi	r24, 0x02	; 2
    1f76:	a1 f0       	breq	.+40     	; 0x1fa0 <turnOffPWM+0x36>
    1f78:	08 95       	ret
    1f7a:	87 30       	cpi	r24, 0x07	; 7
    1f7c:	a9 f0       	breq	.+42     	; 0x1fa8 <turnOffPWM+0x3e>
    1f7e:	88 30       	cpi	r24, 0x08	; 8
    1f80:	b9 f0       	breq	.+46     	; 0x1fb0 <turnOffPWM+0x46>
    1f82:	84 30       	cpi	r24, 0x04	; 4
    1f84:	d1 f4       	brne	.+52     	; 0x1fba <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1f86:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1f8a:	8f 7d       	andi	r24, 0xDF	; 223
    1f8c:	03 c0       	rjmp	.+6      	; 0x1f94 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1f8e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1f92:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1f94:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1f98:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1f9a:	84 b5       	in	r24, 0x24	; 36
    1f9c:	8f 77       	andi	r24, 0x7F	; 127
    1f9e:	02 c0       	rjmp	.+4      	; 0x1fa4 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1fa0:	84 b5       	in	r24, 0x24	; 36
    1fa2:	8f 7d       	andi	r24, 0xDF	; 223
    1fa4:	84 bd       	out	0x24, r24	; 36
    1fa6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1fa8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1fac:	8f 77       	andi	r24, 0x7F	; 127
    1fae:	03 c0       	rjmp	.+6      	; 0x1fb6 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1fb0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1fb4:	8f 7d       	andi	r24, 0xDF	; 223
    1fb6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1fba:	08 95       	ret

00001fbc <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1fbc:	cf 93       	push	r28
    1fbe:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	e8 53       	subi	r30, 0x38	; 56
    1fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1fca:	fc 01       	movw	r30, r24
    1fcc:	e4 52       	subi	r30, 0x24	; 36
    1fce:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1fd2:	88 23       	and	r24, r24
    1fd4:	61 f1       	breq	.+88     	; 0x202e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	88 0f       	add	r24, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	fc 01       	movw	r30, r24
    1fde:	e6 50       	subi	r30, 0x06	; 6
    1fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe2:	c5 91       	lpm	r28, Z+
    1fe4:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	e0 51       	subi	r30, 0x10	; 16
    1fea:	ff 4f       	sbci	r31, 0xFF	; 255
    1fec:	a5 91       	lpm	r26, Z+
    1fee:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1ff0:	61 11       	cpse	r22, r1
    1ff2:	09 c0       	rjmp	.+18     	; 0x2006 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1ff4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1ff6:	f8 94       	cli
		*reg &= ~bit;
    1ff8:	88 81       	ld	r24, Y
    1ffa:	20 95       	com	r18
    1ffc:	82 23       	and	r24, r18
    1ffe:	88 83       	st	Y, r24
		*out &= ~bit;
    2000:	ec 91       	ld	r30, X
    2002:	2e 23       	and	r18, r30
    2004:	0b c0       	rjmp	.+22     	; 0x201c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2006:	62 30       	cpi	r22, 0x02	; 2
    2008:	61 f4       	brne	.+24     	; 0x2022 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    200a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    200c:	f8 94       	cli
		*reg &= ~bit;
    200e:	88 81       	ld	r24, Y
    2010:	32 2f       	mov	r19, r18
    2012:	30 95       	com	r19
    2014:	83 23       	and	r24, r19
    2016:	88 83       	st	Y, r24
		*out |= bit;
    2018:	ec 91       	ld	r30, X
    201a:	2e 2b       	or	r18, r30
    201c:	2c 93       	st	X, r18
		SREG = oldSREG;
    201e:	9f bf       	out	0x3f, r25	; 63
    2020:	06 c0       	rjmp	.+12     	; 0x202e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2022:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2024:	f8 94       	cli
		*reg |= bit;
    2026:	e8 81       	ld	r30, Y
    2028:	2e 2b       	or	r18, r30
    202a:	28 83       	st	Y, r18
		SREG = oldSREG;
    202c:	8f bf       	out	0x3f, r24	; 63
	}
}
    202e:	df 91       	pop	r29
    2030:	cf 91       	pop	r28
    2032:	08 95       	ret

00002034 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2034:	1f 93       	push	r17
    2036:	cf 93       	push	r28
    2038:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    203a:	28 2f       	mov	r18, r24
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	f9 01       	movw	r30, r18
    2040:	ec 54       	subi	r30, 0x4C	; 76
    2042:	ff 4f       	sbci	r31, 0xFF	; 255
    2044:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    2046:	f9 01       	movw	r30, r18
    2048:	e8 53       	subi	r30, 0x38	; 56
    204a:	ff 4f       	sbci	r31, 0xFF	; 255
    204c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    204e:	f9 01       	movw	r30, r18
    2050:	e4 52       	subi	r30, 0x24	; 36
    2052:	ff 4f       	sbci	r31, 0xFF	; 255
    2054:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2056:	cc 23       	and	r28, r28
    2058:	c1 f0       	breq	.+48     	; 0x208a <digitalWrite+0x56>
    205a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    205c:	81 11       	cpse	r24, r1
    205e:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <turnOffPWM>

	out = portOutputRegister(port);
    2062:	ec 2f       	mov	r30, r28
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	ee 0f       	add	r30, r30
    2068:	ff 1f       	adc	r31, r31
    206a:	e0 51       	subi	r30, 0x10	; 16
    206c:	ff 4f       	sbci	r31, 0xFF	; 255
    206e:	a5 91       	lpm	r26, Z+
    2070:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    2072:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2074:	f8 94       	cli

	if (val == LOW) {
    2076:	11 11       	cpse	r17, r1
    2078:	04 c0       	rjmp	.+8      	; 0x2082 <digitalWrite+0x4e>
		*out &= ~bit;
    207a:	8c 91       	ld	r24, X
    207c:	d0 95       	com	r29
    207e:	d8 23       	and	r29, r24
    2080:	02 c0       	rjmp	.+4      	; 0x2086 <digitalWrite+0x52>
	} else {
		*out |= bit;
    2082:	ec 91       	ld	r30, X
    2084:	de 2b       	or	r29, r30
    2086:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    2088:	9f bf       	out	0x3f, r25	; 63
}
    208a:	df 91       	pop	r29
    208c:	cf 91       	pop	r28
    208e:	1f 91       	pop	r17
    2090:	08 95       	ret

00002092 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2092:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <_ZN7TwoWire14rxBufferLengthE>
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	20 91 c3 02 	lds	r18, 0x02C3	; 0x8002c3 <_ZN7TwoWire13rxBufferIndexE>
    209c:	82 1b       	sub	r24, r18
    209e:	91 09       	sbc	r25, r1
    20a0:	08 95       	ret

000020a2 <_ZN7TwoWire4readEv>:
    20a2:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <_ZN7TwoWire13rxBufferIndexE>
    20a6:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <_ZN7TwoWire14rxBufferLengthE>
    20aa:	98 17       	cp	r25, r24
    20ac:	50 f4       	brcc	.+20     	; 0x20c2 <_ZN7TwoWire4readEv+0x20>
    20ae:	e9 2f       	mov	r30, r25
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	ec 53       	subi	r30, 0x3C	; 60
    20b4:	fd 4f       	sbci	r31, 0xFD	; 253
    20b6:	20 81       	ld	r18, Z
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	9f 5f       	subi	r25, 0xFF	; 255
    20bc:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <_ZN7TwoWire13rxBufferIndexE>
    20c0:	02 c0       	rjmp	.+4      	; 0x20c6 <_ZN7TwoWire4readEv+0x24>
    20c2:	2f ef       	ldi	r18, 0xFF	; 255
    20c4:	3f ef       	ldi	r19, 0xFF	; 255
    20c6:	c9 01       	movw	r24, r18
    20c8:	08 95       	ret

000020ca <_ZN7TwoWire4peekEv>:
    20ca:	e0 91 c3 02 	lds	r30, 0x02C3	; 0x8002c3 <_ZN7TwoWire13rxBufferIndexE>
    20ce:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <_ZN7TwoWire14rxBufferLengthE>
    20d2:	e8 17       	cp	r30, r24
    20d4:	30 f4       	brcc	.+12     	; 0x20e2 <_ZN7TwoWire4peekEv+0x18>
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	ec 53       	subi	r30, 0x3C	; 60
    20da:	fd 4f       	sbci	r31, 0xFD	; 253
    20dc:	80 81       	ld	r24, Z
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	08 95       	ret
    20e2:	8f ef       	ldi	r24, 0xFF	; 255
    20e4:	9f ef       	ldi	r25, 0xFF	; 255
    20e6:	08 95       	ret

000020e8 <_ZN7TwoWire5flushEv>:
    20e8:	08 95       	ret

000020ea <_ZN7TwoWire16onReceiveServiceEPhi>:
    20ea:	cf 93       	push	r28
    20ec:	df 93       	push	r29
    20ee:	ec 01       	movw	r28, r24
    20f0:	e0 91 9a 02 	lds	r30, 0x029A	; 0x80029a <_ZN7TwoWire14user_onReceiveE>
    20f4:	f0 91 9b 02 	lds	r31, 0x029B	; 0x80029b <_ZN7TwoWire14user_onReceiveE+0x1>
    20f8:	30 97       	sbiw	r30, 0x00	; 0
    20fa:	f1 f0       	breq	.+60     	; 0x2138 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    20fc:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <_ZN7TwoWire13rxBufferIndexE>
    2100:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <_ZN7TwoWire14rxBufferLengthE>
    2104:	98 17       	cp	r25, r24
    2106:	c0 f0       	brcs	.+48     	; 0x2138 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	29 2f       	mov	r18, r25
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	26 17       	cp	r18, r22
    2110:	37 07       	cpc	r19, r23
    2112:	54 f4       	brge	.+20     	; 0x2128 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    2114:	de 01       	movw	r26, r28
    2116:	a2 0f       	add	r26, r18
    2118:	b3 1f       	adc	r27, r19
    211a:	4c 91       	ld	r20, X
    211c:	d9 01       	movw	r26, r18
    211e:	ac 53       	subi	r26, 0x3C	; 60
    2120:	bd 4f       	sbci	r27, 0xFD	; 253
    2122:	4c 93       	st	X, r20
    2124:	9f 5f       	subi	r25, 0xFF	; 255
    2126:	f1 cf       	rjmp	.-30     	; 0x210a <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    2128:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <_ZN7TwoWire13rxBufferIndexE>
    212c:	60 93 c2 02 	sts	0x02C2, r22	; 0x8002c2 <_ZN7TwoWire14rxBufferLengthE>
    2130:	cb 01       	movw	r24, r22
    2132:	df 91       	pop	r29
    2134:	cf 91       	pop	r28
    2136:	09 94       	ijmp
    2138:	df 91       	pop	r29
    213a:	cf 91       	pop	r28
    213c:	08 95       	ret

0000213e <_ZN7TwoWire16onRequestServiceEv>:
    213e:	e0 91 9c 02 	lds	r30, 0x029C	; 0x80029c <_ZN7TwoWire14user_onRequestE>
    2142:	f0 91 9d 02 	lds	r31, 0x029D	; 0x80029d <_ZN7TwoWire14user_onRequestE+0x1>
    2146:	30 97       	sbiw	r30, 0x00	; 0
    2148:	29 f0       	breq	.+10     	; 0x2154 <_ZN7TwoWire16onRequestServiceEv+0x16>
    214a:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <_ZN7TwoWire13txBufferIndexE>
    214e:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <_ZN7TwoWire14txBufferLengthE>
    2152:	09 94       	ijmp
    2154:	08 95       	ret

00002156 <_ZN7TwoWire5writeEPKhj>:
    2156:	cf 92       	push	r12
    2158:	df 92       	push	r13
    215a:	ef 92       	push	r14
    215c:	ff 92       	push	r15
    215e:	0f 93       	push	r16
    2160:	1f 93       	push	r17
    2162:	cf 93       	push	r28
    2164:	df 93       	push	r29
    2166:	7c 01       	movw	r14, r24
    2168:	cb 01       	movw	r24, r22
    216a:	8a 01       	movw	r16, r20
    216c:	20 91 9e 02 	lds	r18, 0x029E	; 0x80029e <_ZN7TwoWire12transmittingE>
    2170:	22 23       	and	r18, r18
    2172:	89 f0       	breq	.+34     	; 0x2196 <_ZN7TwoWire5writeEPKhj+0x40>
    2174:	eb 01       	movw	r28, r22
    2176:	6b 01       	movw	r12, r22
    2178:	c4 0e       	add	r12, r20
    217a:	d5 1e       	adc	r13, r21
    217c:	cc 15       	cp	r28, r12
    217e:	dd 05       	cpc	r29, r13
    2180:	69 f0       	breq	.+26     	; 0x219c <_ZN7TwoWire5writeEPKhj+0x46>
    2182:	69 91       	ld	r22, Y+
    2184:	d7 01       	movw	r26, r14
    2186:	ed 91       	ld	r30, X+
    2188:	fc 91       	ld	r31, X
    218a:	01 90       	ld	r0, Z+
    218c:	f0 81       	ld	r31, Z
    218e:	e0 2d       	mov	r30, r0
    2190:	c7 01       	movw	r24, r14
    2192:	09 95       	icall
    2194:	f3 cf       	rjmp	.-26     	; 0x217c <_ZN7TwoWire5writeEPKhj+0x26>
    2196:	64 2f       	mov	r22, r20
    2198:	0e 94 ad 12 	call	0x255a	; 0x255a <twi_transmit>
    219c:	c8 01       	movw	r24, r16
    219e:	df 91       	pop	r29
    21a0:	cf 91       	pop	r28
    21a2:	1f 91       	pop	r17
    21a4:	0f 91       	pop	r16
    21a6:	ff 90       	pop	r15
    21a8:	ef 90       	pop	r14
    21aa:	df 90       	pop	r13
    21ac:	cf 90       	pop	r12
    21ae:	08 95       	ret

000021b0 <_ZN7TwoWire5writeEh>:
    21b0:	cf 93       	push	r28
    21b2:	df 93       	push	r29
    21b4:	1f 92       	push	r1
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
    21ba:	69 83       	std	Y+1, r22	; 0x01
    21bc:	20 91 9e 02 	lds	r18, 0x029E	; 0x80029e <_ZN7TwoWire12transmittingE>
    21c0:	22 23       	and	r18, r18
    21c2:	d1 f0       	breq	.+52     	; 0x21f8 <_ZN7TwoWire5writeEh+0x48>
    21c4:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <_ZN7TwoWire14txBufferLengthE>
    21c8:	20 32       	cpi	r18, 0x20	; 32
    21ca:	40 f0       	brcs	.+16     	; 0x21dc <_ZN7TwoWire5writeEh+0x2c>
    21cc:	21 e0       	ldi	r18, 0x01	; 1
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	fc 01       	movw	r30, r24
    21d2:	33 83       	std	Z+3, r19	; 0x03
    21d4:	22 83       	std	Z+2, r18	; 0x02
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	15 c0       	rjmp	.+42     	; 0x2206 <_ZN7TwoWire5writeEh+0x56>
    21dc:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <_ZN7TwoWire13txBufferIndexE>
    21e0:	e8 2f       	mov	r30, r24
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	ef 55       	subi	r30, 0x5F	; 95
    21e6:	fd 4f       	sbci	r31, 0xFD	; 253
    21e8:	99 81       	ldd	r25, Y+1	; 0x01
    21ea:	90 83       	st	Z, r25
    21ec:	8f 5f       	subi	r24, 0xFF	; 255
    21ee:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <_ZN7TwoWire13txBufferIndexE>
    21f2:	80 93 9f 02 	sts	0x029F, r24	; 0x80029f <_ZN7TwoWire14txBufferLengthE>
    21f6:	05 c0       	rjmp	.+10     	; 0x2202 <_ZN7TwoWire5writeEh+0x52>
    21f8:	61 e0       	ldi	r22, 0x01	; 1
    21fa:	ce 01       	movw	r24, r28
    21fc:	01 96       	adiw	r24, 0x01	; 1
    21fe:	0e 94 ad 12 	call	0x255a	; 0x255a <twi_transmit>
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	0f 90       	pop	r0
    2208:	df 91       	pop	r29
    220a:	cf 91       	pop	r28
    220c:	08 95       	ret

0000220e <_ZN7TwoWireC1Ev>:
    220e:	fc 01       	movw	r30, r24
    2210:	13 82       	std	Z+3, r1	; 0x03
    2212:	12 82       	std	Z+2, r1	; 0x02
    2214:	88 ee       	ldi	r24, 0xE8	; 232
    2216:	93 e0       	ldi	r25, 0x03	; 3
    2218:	a0 e0       	ldi	r26, 0x00	; 0
    221a:	b0 e0       	ldi	r27, 0x00	; 0
    221c:	84 83       	std	Z+4, r24	; 0x04
    221e:	95 83       	std	Z+5, r25	; 0x05
    2220:	a6 83       	std	Z+6, r26	; 0x06
    2222:	b7 83       	std	Z+7, r27	; 0x07
    2224:	84 e2       	ldi	r24, 0x24	; 36
    2226:	91 e0       	ldi	r25, 0x01	; 1
    2228:	91 83       	std	Z+1, r25	; 0x01
    222a:	80 83       	st	Z, r24
    222c:	08 95       	ret

0000222e <_ZN7TwoWire5beginEv>:
    222e:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <_ZN7TwoWire13rxBufferIndexE>
    2232:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <_ZN7TwoWire14rxBufferLengthE>
    2236:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <_ZN7TwoWire13txBufferIndexE>
    223a:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <_ZN7TwoWire14txBufferLengthE>
    223e:	0c 94 35 12 	jmp	0x246a	; 0x246a <twi_init>

00002242 <_ZN7TwoWire5beginEh>:
    2242:	cf 93       	push	r28
    2244:	df 93       	push	r29
    2246:	ec 01       	movw	r28, r24
    2248:	86 2f       	mov	r24, r22
    224a:	0e 94 53 12 	call	0x24a6	; 0x24a6 <twi_setAddress>
    224e:	8f e9       	ldi	r24, 0x9F	; 159
    2250:	90 e1       	ldi	r25, 0x10	; 16
    2252:	0e 94 da 12 	call	0x25b4	; 0x25b4 <twi_attachSlaveTxEvent>
    2256:	85 e7       	ldi	r24, 0x75	; 117
    2258:	90 e1       	ldi	r25, 0x10	; 16
    225a:	0e 94 d5 12 	call	0x25aa	; 0x25aa <twi_attachSlaveRxEvent>
    225e:	ce 01       	movw	r24, r28
    2260:	df 91       	pop	r29
    2262:	cf 91       	pop	r28
    2264:	0c 94 17 11 	jmp	0x222e	; 0x222e <_ZN7TwoWire5beginEv>

00002268 <_ZN7TwoWire17beginTransmissionEh>:
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <_ZN7TwoWire12transmittingE>
    226e:	60 93 c1 02 	sts	0x02C1, r22	; 0x8002c1 <_ZN7TwoWire9txAddressE>
    2272:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <_ZN7TwoWire13txBufferIndexE>
    2276:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <_ZN7TwoWire14txBufferLengthE>
    227a:	08 95       	ret

0000227c <_ZN7TwoWire17beginTransmissionEi>:
    227c:	0c 94 34 11 	jmp	0x2268	; 0x2268 <_ZN7TwoWire17beginTransmissionEh>

00002280 <_ZN7TwoWire15endTransmissionEh>:
    2280:	0f 93       	push	r16
    2282:	06 2f       	mov	r16, r22
    2284:	21 e0       	ldi	r18, 0x01	; 1
    2286:	40 91 9f 02 	lds	r20, 0x029F	; 0x80029f <_ZN7TwoWire14txBufferLengthE>
    228a:	61 ea       	ldi	r22, 0xA1	; 161
    228c:	72 e0       	ldi	r23, 0x02	; 2
    228e:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <_ZN7TwoWire9txAddressE>
    2292:	0e 94 57 12 	call	0x24ae	; 0x24ae <twi_writeTo>
    2296:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <_ZN7TwoWire13txBufferIndexE>
    229a:	10 92 9f 02 	sts	0x029F, r1	; 0x80029f <_ZN7TwoWire14txBufferLengthE>
    229e:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <_ZN7TwoWire12transmittingE>
    22a2:	0f 91       	pop	r16
    22a4:	08 95       	ret

000022a6 <_ZN7TwoWire15endTransmissionEv>:
    22a6:	61 e0       	ldi	r22, 0x01	; 1
    22a8:	0c 94 40 11 	jmp	0x2280	; 0x2280 <_ZN7TwoWire15endTransmissionEh>

000022ac <_ZN7TwoWire9onReceiveEPFviE>:
    22ac:	70 93 9b 02 	sts	0x029B, r23	; 0x80029b <_ZN7TwoWire14user_onReceiveE+0x1>
    22b0:	60 93 9a 02 	sts	0x029A, r22	; 0x80029a <_ZN7TwoWire14user_onReceiveE>
    22b4:	08 95       	ret

000022b6 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    22b6:	8e e8       	ldi	r24, 0x8E	; 142
    22b8:	92 e0       	ldi	r25, 0x02	; 2
    22ba:	0c 94 07 11 	jmp	0x220e	; 0x220e <_ZN7TwoWireC1Ev>

000022be <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    22be:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    22c0:	91 8d       	ldd	r25, Z+25	; 0x19
    22c2:	22 8d       	ldd	r18, Z+26	; 0x1a
    22c4:	89 2f       	mov	r24, r25
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	80 5c       	subi	r24, 0xC0	; 192
    22ca:	9f 4f       	sbci	r25, 0xFF	; 255
    22cc:	82 1b       	sub	r24, r18
    22ce:	91 09       	sbc	r25, r1
}
    22d0:	8f 73       	andi	r24, 0x3F	; 63
    22d2:	99 27       	eor	r25, r25
    22d4:	08 95       	ret

000022d6 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    22d6:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    22d8:	91 8d       	ldd	r25, Z+25	; 0x19
    22da:	82 8d       	ldd	r24, Z+26	; 0x1a
    22dc:	98 17       	cp	r25, r24
    22de:	31 f0       	breq	.+12     	; 0x22ec <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    22e0:	82 8d       	ldd	r24, Z+26	; 0x1a
    22e2:	e8 0f       	add	r30, r24
    22e4:	f1 1d       	adc	r31, r1
    22e6:	85 8d       	ldd	r24, Z+29	; 0x1d
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    22ec:	8f ef       	ldi	r24, 0xFF	; 255
    22ee:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    22f0:	08 95       	ret

000022f2 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    22f2:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    22f4:	91 8d       	ldd	r25, Z+25	; 0x19
    22f6:	82 8d       	ldd	r24, Z+26	; 0x1a
    22f8:	98 17       	cp	r25, r24
    22fa:	61 f0       	breq	.+24     	; 0x2314 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    22fc:	82 8d       	ldd	r24, Z+26	; 0x1a
    22fe:	df 01       	movw	r26, r30
    2300:	a8 0f       	add	r26, r24
    2302:	b1 1d       	adc	r27, r1
    2304:	5d 96       	adiw	r26, 0x1d	; 29
    2306:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2308:	92 8d       	ldd	r25, Z+26	; 0x1a
    230a:	9f 5f       	subi	r25, 0xFF	; 255
    230c:	9f 73       	andi	r25, 0x3F	; 63
    230e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2314:	8f ef       	ldi	r24, 0xFF	; 255
    2316:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2318:	08 95       	ret

0000231a <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    231a:	fc 01       	movw	r30, r24
    231c:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
    231e:	44 8d       	ldd	r20, Z+28	; 0x1c
    2320:	25 2f       	mov	r18, r21
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	84 2f       	mov	r24, r20
    2326:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    2328:	82 1b       	sub	r24, r18
    232a:	93 0b       	sbc	r25, r19
    232c:	54 17       	cp	r21, r20
    232e:	10 f0       	brcs	.+4      	; 0x2334 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
    2330:	cf 96       	adiw	r24, 0x3f	; 63
    2332:	08 95       	ret
  return tail - head - 1;
    2334:	01 97       	sbiw	r24, 0x01	; 1
}
    2336:	08 95       	ret

00002338 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2338:	81 ef       	ldi	r24, 0xF1	; 241
    233a:	9c e0       	ldi	r25, 0x0C	; 12
    233c:	89 2b       	or	r24, r25
    233e:	49 f0       	breq	.+18     	; 0x2352 <_Z14serialEventRunv+0x1a>
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	89 2b       	or	r24, r25
    2346:	29 f0       	breq	.+10     	; 0x2352 <_Z14serialEventRunv+0x1a>
    2348:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <_Z17Serial0_availablev>
    234c:	81 11       	cpse	r24, r1
    234e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    2352:	08 95       	ret

00002354 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2354:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2356:	84 8d       	ldd	r24, Z+28	; 0x1c
    2358:	df 01       	movw	r26, r30
    235a:	a8 0f       	add	r26, r24
    235c:	b1 1d       	adc	r27, r1
    235e:	a3 5a       	subi	r26, 0xA3	; 163
    2360:	bf 4f       	sbci	r27, 0xFF	; 255
    2362:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2364:	84 8d       	ldd	r24, Z+28	; 0x1c
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	01 96       	adiw	r24, 0x01	; 1
    236a:	8f 73       	andi	r24, 0x3F	; 63
    236c:	99 27       	eor	r25, r25
    236e:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    2370:	a6 89       	ldd	r26, Z+22	; 0x16
    2372:	b7 89       	ldd	r27, Z+23	; 0x17
    2374:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    2376:	a0 89       	ldd	r26, Z+16	; 0x10
    2378:	b1 89       	ldd	r27, Z+17	; 0x11
    237a:	8c 91       	ld	r24, X
    237c:	80 64       	ori	r24, 0x40	; 64
    237e:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    2380:	93 8d       	ldd	r25, Z+27	; 0x1b
    2382:	84 8d       	ldd	r24, Z+28	; 0x1c
    2384:	98 13       	cpse	r25, r24
    2386:	06 c0       	rjmp	.+12     	; 0x2394 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    2388:	02 88       	ldd	r0, Z+18	; 0x12
    238a:	f3 89       	ldd	r31, Z+19	; 0x13
    238c:	e0 2d       	mov	r30, r0
    238e:	80 81       	ld	r24, Z
    2390:	8f 7d       	andi	r24, 0xDF	; 223
    2392:	80 83       	st	Z, r24
    2394:	08 95       	ret

00002396 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    2396:	ef 92       	push	r14
    2398:	ff 92       	push	r15
    239a:	0f 93       	push	r16
    239c:	1f 93       	push	r17
    239e:	cf 93       	push	r28
    23a0:	df 93       	push	r29
    23a2:	ec 01       	movw	r28, r24
  _written = true;
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    23a8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    23aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23ac:	98 13       	cpse	r25, r24
    23ae:	05 c0       	rjmp	.+10     	; 0x23ba <_ZN14HardwareSerial5writeEh+0x24>
    23b0:	e8 89       	ldd	r30, Y+16	; 0x10
    23b2:	f9 89       	ldd	r31, Y+17	; 0x11
    23b4:	80 81       	ld	r24, Z
    23b6:	85 fd       	sbrc	r24, 5
    23b8:	24 c0       	rjmp	.+72     	; 0x2402 <_ZN14HardwareSerial5writeEh+0x6c>
    23ba:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    23bc:	0b 8d       	ldd	r16, Y+27	; 0x1b
    23be:	10 e0       	ldi	r17, 0x00	; 0
    23c0:	0f 5f       	subi	r16, 0xFF	; 255
    23c2:	1f 4f       	sbci	r17, 0xFF	; 255
    23c4:	0f 73       	andi	r16, 0x3F	; 63
    23c6:	11 27       	eor	r17, r17
    23c8:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    23ca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23cc:	e8 12       	cpse	r14, r24
    23ce:	0c c0       	rjmp	.+24     	; 0x23e8 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    23d0:	0f b6       	in	r0, 0x3f	; 63
    23d2:	07 fc       	sbrc	r0, 7
    23d4:	fa cf       	rjmp	.-12     	; 0x23ca <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    23d6:	e8 89       	ldd	r30, Y+16	; 0x10
    23d8:	f9 89       	ldd	r31, Y+17	; 0x11
    23da:	80 81       	ld	r24, Z
    23dc:	85 ff       	sbrs	r24, 5
    23de:	f5 cf       	rjmp	.-22     	; 0x23ca <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    23e0:	ce 01       	movw	r24, r28
    23e2:	0e 94 aa 11 	call	0x2354	; 0x2354 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    23e6:	f1 cf       	rjmp	.-30     	; 0x23ca <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    23e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23ea:	fe 01       	movw	r30, r28
    23ec:	e8 0f       	add	r30, r24
    23ee:	f1 1d       	adc	r31, r1
    23f0:	e3 5a       	subi	r30, 0xA3	; 163
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    23f6:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    23f8:	ea 89       	ldd	r30, Y+18	; 0x12
    23fa:	fb 89       	ldd	r31, Y+19	; 0x13
    23fc:	80 81       	ld	r24, Z
    23fe:	80 62       	ori	r24, 0x20	; 32
    2400:	07 c0       	rjmp	.+14     	; 0x2410 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    2402:	ee 89       	ldd	r30, Y+22	; 0x16
    2404:	ff 89       	ldd	r31, Y+23	; 0x17
    2406:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    2408:	e8 89       	ldd	r30, Y+16	; 0x10
    240a:	f9 89       	ldd	r31, Y+17	; 0x11
    240c:	80 81       	ld	r24, Z
    240e:	80 64       	ori	r24, 0x40	; 64
    2410:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	df 91       	pop	r29
    2418:	cf 91       	pop	r28
    241a:	1f 91       	pop	r17
    241c:	0f 91       	pop	r16
    241e:	ff 90       	pop	r15
    2420:	ef 90       	pop	r14
    2422:	08 95       	ret

00002424 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2424:	cf 93       	push	r28
    2426:	df 93       	push	r29
    2428:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    242a:	88 8d       	ldd	r24, Y+24	; 0x18
    242c:	88 23       	and	r24, r24
    242e:	c9 f0       	breq	.+50     	; 0x2462 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2430:	ea 89       	ldd	r30, Y+18	; 0x12
    2432:	fb 89       	ldd	r31, Y+19	; 0x13
    2434:	80 81       	ld	r24, Z
    2436:	85 fd       	sbrc	r24, 5
    2438:	05 c0       	rjmp	.+10     	; 0x2444 <_ZN14HardwareSerial5flushEv+0x20>
    243a:	a8 89       	ldd	r26, Y+16	; 0x10
    243c:	b9 89       	ldd	r27, Y+17	; 0x11
    243e:	8c 91       	ld	r24, X
    2440:	86 fd       	sbrc	r24, 6
    2442:	0f c0       	rjmp	.+30     	; 0x2462 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2444:	0f b6       	in	r0, 0x3f	; 63
    2446:	07 fc       	sbrc	r0, 7
    2448:	f5 cf       	rjmp	.-22     	; 0x2434 <_ZN14HardwareSerial5flushEv+0x10>
    244a:	80 81       	ld	r24, Z
    244c:	85 ff       	sbrs	r24, 5
    244e:	f2 cf       	rjmp	.-28     	; 0x2434 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    2450:	a8 89       	ldd	r26, Y+16	; 0x10
    2452:	b9 89       	ldd	r27, Y+17	; 0x11
    2454:	8c 91       	ld	r24, X
    2456:	85 ff       	sbrs	r24, 5
    2458:	ed cf       	rjmp	.-38     	; 0x2434 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    245a:	ce 01       	movw	r24, r28
    245c:	0e 94 aa 11 	call	0x2354	; 0x2354 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    2460:	e7 cf       	rjmp	.-50     	; 0x2430 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2462:	df 91       	pop	r29
    2464:	cf 91       	pop	r28
    2466:	08 95       	ret

00002468 <yield>:
    2468:	08 95       	ret

0000246a <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    246a:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <twi_state>
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <twi_sendStop>
    2474:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <twi_inRepStart>
    2478:	61 e0       	ldi	r22, 0x01	; 1
    247a:	82 e1       	ldi	r24, 0x12	; 18
    247c:	0e 94 1a 10 	call	0x2034	; 0x2034 <digitalWrite>
    2480:	61 e0       	ldi	r22, 0x01	; 1
    2482:	83 e1       	ldi	r24, 0x13	; 19
    2484:	0e 94 1a 10 	call	0x2034	; 0x2034 <digitalWrite>
    2488:	e9 eb       	ldi	r30, 0xB9	; 185
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 81       	ld	r24, Z
    248e:	8e 7f       	andi	r24, 0xFE	; 254
    2490:	80 83       	st	Z, r24
    2492:	80 81       	ld	r24, Z
    2494:	8d 7f       	andi	r24, 0xFD	; 253
    2496:	80 83       	st	Z, r24
    2498:	88 e4       	ldi	r24, 0x48	; 72
    249a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    249e:	85 e4       	ldi	r24, 0x45	; 69
    24a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    24a4:	08 95       	ret

000024a6 <twi_setAddress>:
    24a6:	88 0f       	add	r24, r24
    24a8:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
    24ac:	08 95       	ret

000024ae <twi_writeTo>:
    24ae:	0f 93       	push	r16
    24b0:	41 32       	cpi	r20, 0x21	; 33
    24b2:	08 f0       	brcs	.+2      	; 0x24b6 <twi_writeTo+0x8>
    24b4:	4a c0       	rjmp	.+148    	; 0x254a <twi_writeTo+0x9c>
    24b6:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <twi_state>
    24ba:	91 11       	cpse	r25, r1
    24bc:	fc cf       	rjmp	.-8      	; 0x24b6 <twi_writeTo+0x8>
    24be:	32 e0       	ldi	r19, 0x02	; 2
    24c0:	30 93 51 03 	sts	0x0351, r19	; 0x800351 <twi_state>
    24c4:	00 93 4f 03 	sts	0x034F, r16	; 0x80034f <twi_sendStop>
    24c8:	3f ef       	ldi	r19, 0xFF	; 255
    24ca:	30 93 e4 02 	sts	0x02E4, r19	; 0x8002e4 <twi_error>
    24ce:	10 92 29 03 	sts	0x0329, r1	; 0x800329 <twi_masterBufferIndex>
    24d2:	40 93 28 03 	sts	0x0328, r20	; 0x800328 <twi_masterBufferLength>
    24d6:	56 2f       	mov	r21, r22
    24d8:	aa e2       	ldi	r26, 0x2A	; 42
    24da:	b3 e0       	ldi	r27, 0x03	; 3
    24dc:	fb 01       	movw	r30, r22
    24de:	3e 2f       	mov	r19, r30
    24e0:	35 1b       	sub	r19, r21
    24e2:	34 17       	cp	r19, r20
    24e4:	18 f4       	brcc	.+6      	; 0x24ec <twi_writeTo+0x3e>
    24e6:	31 91       	ld	r19, Z+
    24e8:	3d 93       	st	X+, r19
    24ea:	f9 cf       	rjmp	.-14     	; 0x24de <twi_writeTo+0x30>
    24ec:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <twi_slarw>
    24f0:	30 91 50 03 	lds	r19, 0x0350	; 0x800350 <twi_slarw>
    24f4:	88 0f       	add	r24, r24
    24f6:	83 2b       	or	r24, r19
    24f8:	80 93 50 03 	sts	0x0350, r24	; 0x800350 <twi_slarw>
    24fc:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <twi_inRepStart>
    2500:	81 30       	cpi	r24, 0x01	; 1
    2502:	61 f4       	brne	.+24     	; 0x251c <twi_writeTo+0x6e>
    2504:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <twi_inRepStart>
    2508:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <twi_slarw>
    250c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    2510:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2514:	83 fd       	sbrc	r24, 3
    2516:	f8 cf       	rjmp	.-16     	; 0x2508 <twi_writeTo+0x5a>
    2518:	85 ec       	ldi	r24, 0xC5	; 197
    251a:	01 c0       	rjmp	.+2      	; 0x251e <twi_writeTo+0x70>
    251c:	85 ee       	ldi	r24, 0xE5	; 229
    251e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2522:	22 23       	and	r18, r18
    2524:	21 f0       	breq	.+8      	; 0x252e <twi_writeTo+0x80>
    2526:	80 91 51 03 	lds	r24, 0x0351	; 0x800351 <twi_state>
    252a:	82 30       	cpi	r24, 0x02	; 2
    252c:	d1 f3       	breq	.-12     	; 0x2522 <twi_writeTo+0x74>
    252e:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <twi_error>
    2532:	8f 3f       	cpi	r24, 0xFF	; 255
    2534:	79 f0       	breq	.+30     	; 0x2554 <twi_writeTo+0xa6>
    2536:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <twi_error>
    253a:	80 32       	cpi	r24, 0x20	; 32
    253c:	41 f0       	breq	.+16     	; 0x254e <twi_writeTo+0xa0>
    253e:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <twi_error>
    2542:	80 33       	cpi	r24, 0x30	; 48
    2544:	31 f0       	breq	.+12     	; 0x2552 <twi_writeTo+0xa4>
    2546:	94 e0       	ldi	r25, 0x04	; 4
    2548:	05 c0       	rjmp	.+10     	; 0x2554 <twi_writeTo+0xa6>
    254a:	91 e0       	ldi	r25, 0x01	; 1
    254c:	03 c0       	rjmp	.+6      	; 0x2554 <twi_writeTo+0xa6>
    254e:	92 e0       	ldi	r25, 0x02	; 2
    2550:	01 c0       	rjmp	.+2      	; 0x2554 <twi_writeTo+0xa6>
    2552:	93 e0       	ldi	r25, 0x03	; 3
    2554:	89 2f       	mov	r24, r25
    2556:	0f 91       	pop	r16
    2558:	08 95       	ret

0000255a <twi_transmit>:
    255a:	40 91 06 03 	lds	r20, 0x0306	; 0x800306 <twi_txBufferLength>
    255e:	26 2f       	mov	r18, r22
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	24 0f       	add	r18, r20
    2564:	31 1d       	adc	r19, r1
    2566:	21 32       	cpi	r18, 0x21	; 33
    2568:	31 05       	cpc	r19, r1
    256a:	dc f4       	brge	.+54     	; 0x25a2 <twi_transmit+0x48>
    256c:	20 91 51 03 	lds	r18, 0x0351	; 0x800351 <twi_state>
    2570:	24 30       	cpi	r18, 0x04	; 4
    2572:	c9 f4       	brne	.+50     	; 0x25a6 <twi_transmit+0x4c>
    2574:	fc 01       	movw	r30, r24
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	86 17       	cp	r24, r22
    257c:	58 f4       	brcc	.+22     	; 0x2594 <twi_transmit+0x3a>
    257e:	30 91 06 03 	lds	r19, 0x0306	; 0x800306 <twi_txBufferLength>
    2582:	21 91       	ld	r18, Z+
    2584:	dc 01       	movw	r26, r24
    2586:	a8 5f       	subi	r26, 0xF8	; 248
    2588:	bc 4f       	sbci	r27, 0xFC	; 252
    258a:	a3 0f       	add	r26, r19
    258c:	b1 1d       	adc	r27, r1
    258e:	2c 93       	st	X, r18
    2590:	01 96       	adiw	r24, 0x01	; 1
    2592:	f3 cf       	rjmp	.-26     	; 0x257a <twi_transmit+0x20>
    2594:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <twi_txBufferLength>
    2598:	68 0f       	add	r22, r24
    259a:	60 93 06 03 	sts	0x0306, r22	; 0x800306 <twi_txBufferLength>
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	08 95       	ret
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	08 95       	ret
    25a6:	82 e0       	ldi	r24, 0x02	; 2
    25a8:	08 95       	ret

000025aa <twi_attachSlaveRxEvent>:
    25aa:	90 93 4b 03 	sts	0x034B, r25	; 0x80034b <twi_onSlaveReceive+0x1>
    25ae:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <twi_onSlaveReceive>
    25b2:	08 95       	ret

000025b4 <twi_attachSlaveTxEvent>:
    25b4:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <twi_onSlaveTransmit+0x1>
    25b8:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <twi_onSlaveTransmit>
    25bc:	08 95       	ret

000025be <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    25be:	85 ed       	ldi	r24, 0xD5	; 213
    25c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    25c4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    25c8:	84 fd       	sbrc	r24, 4
    25ca:	fc cf       	rjmp	.-8      	; 0x25c4 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    25cc:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <twi_state>
    25d0:	08 95       	ret

000025d2 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    25d2:	85 ec       	ldi	r24, 0xC5	; 197
    25d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

  // update twi state
  twi_state = TWI_READY;
    25d8:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <twi_state>
    25dc:	08 95       	ret

000025de <__vector_24>:
}

ISR(TWI_vect)
{
    25de:	1f 92       	push	r1
    25e0:	0f 92       	push	r0
    25e2:	0f b6       	in	r0, 0x3f	; 63
    25e4:	0f 92       	push	r0
    25e6:	11 24       	eor	r1, r1
    25e8:	2f 93       	push	r18
    25ea:	3f 93       	push	r19
    25ec:	4f 93       	push	r20
    25ee:	5f 93       	push	r21
    25f0:	6f 93       	push	r22
    25f2:	7f 93       	push	r23
    25f4:	8f 93       	push	r24
    25f6:	9f 93       	push	r25
    25f8:	af 93       	push	r26
    25fa:	bf 93       	push	r27
    25fc:	ef 93       	push	r30
    25fe:	ff 93       	push	r31
  switch(TW_STATUS){
    2600:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    2604:	88 7f       	andi	r24, 0xF8	; 248
    2606:	80 36       	cpi	r24, 0x60	; 96
    2608:	09 f4       	brne	.+2      	; 0x260c <__vector_24+0x2e>
    260a:	9e c0       	rjmp	.+316    	; 0x2748 <__vector_24+0x16a>
    260c:	78 f5       	brcc	.+94     	; 0x266c <__vector_24+0x8e>
    260e:	88 32       	cpi	r24, 0x28	; 40
    2610:	09 f4       	brne	.+2      	; 0x2614 <__vector_24+0x36>
    2612:	5d c0       	rjmp	.+186    	; 0x26ce <__vector_24+0xf0>
    2614:	90 f4       	brcc	.+36     	; 0x263a <__vector_24+0x5c>
    2616:	80 31       	cpi	r24, 0x10	; 16
    2618:	09 f4       	brne	.+2      	; 0x261c <__vector_24+0x3e>
    261a:	56 c0       	rjmp	.+172    	; 0x26c8 <__vector_24+0xea>
    261c:	38 f4       	brcc	.+14     	; 0x262c <__vector_24+0x4e>
    261e:	88 23       	and	r24, r24
    2620:	09 f4       	brne	.+2      	; 0x2624 <__vector_24+0x46>
    2622:	f5 c0       	rjmp	.+490    	; 0x280e <__vector_24+0x230>
    2624:	88 30       	cpi	r24, 0x08	; 8
    2626:	09 f4       	brne	.+2      	; 0x262a <__vector_24+0x4c>
    2628:	4f c0       	rjmp	.+158    	; 0x26c8 <__vector_24+0xea>
    262a:	f5 c0       	rjmp	.+490    	; 0x2816 <__vector_24+0x238>
    262c:	88 31       	cpi	r24, 0x18	; 24
    262e:	09 f4       	brne	.+2      	; 0x2632 <__vector_24+0x54>
    2630:	4e c0       	rjmp	.+156    	; 0x26ce <__vector_24+0xf0>
    2632:	80 32       	cpi	r24, 0x20	; 32
    2634:	09 f4       	brne	.+2      	; 0x2638 <__vector_24+0x5a>
    2636:	5f c0       	rjmp	.+190    	; 0x26f6 <__vector_24+0x118>
    2638:	ee c0       	rjmp	.+476    	; 0x2816 <__vector_24+0x238>
    263a:	80 34       	cpi	r24, 0x40	; 64
    263c:	09 f4       	brne	.+2      	; 0x2640 <__vector_24+0x62>
    263e:	6a c0       	rjmp	.+212    	; 0x2714 <__vector_24+0x136>
    2640:	58 f4       	brcc	.+22     	; 0x2658 <__vector_24+0x7a>
    2642:	80 33       	cpi	r24, 0x30	; 48
    2644:	09 f4       	brne	.+2      	; 0x2648 <__vector_24+0x6a>
    2646:	57 c0       	rjmp	.+174    	; 0x26f6 <__vector_24+0x118>
    2648:	88 33       	cpi	r24, 0x38	; 56
    264a:	09 f0       	breq	.+2      	; 0x264e <__vector_24+0x70>
    264c:	e4 c0       	rjmp	.+456    	; 0x2816 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    264e:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <twi_error>
      twi_releaseBus();
    2652:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <twi_releaseBus>
      break;
    2656:	df c0       	rjmp	.+446    	; 0x2816 <__vector_24+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2658:	80 35       	cpi	r24, 0x50	; 80
    265a:	09 f4       	brne	.+2      	; 0x265e <__vector_24+0x80>
    265c:	4f c0       	rjmp	.+158    	; 0x26fc <__vector_24+0x11e>
    265e:	88 35       	cpi	r24, 0x58	; 88
    2660:	09 f4       	brne	.+2      	; 0x2664 <__vector_24+0x86>
    2662:	5d c0       	rjmp	.+186    	; 0x271e <__vector_24+0x140>
    2664:	88 34       	cpi	r24, 0x48	; 72
    2666:	09 f0       	breq	.+2      	; 0x266a <__vector_24+0x8c>
    2668:	d6 c0       	rjmp	.+428    	; 0x2816 <__vector_24+0x238>
    266a:	d3 c0       	rjmp	.+422    	; 0x2812 <__vector_24+0x234>
    266c:	88 39       	cpi	r24, 0x98	; 152
    266e:	09 f4       	brne	.+2      	; 0x2672 <__vector_24+0x94>
    2670:	c4 c0       	rjmp	.+392    	; 0x27fa <__vector_24+0x21c>
    2672:	a8 f4       	brcc	.+42     	; 0x269e <__vector_24+0xc0>
    2674:	88 37       	cpi	r24, 0x78	; 120
    2676:	09 f4       	brne	.+2      	; 0x267a <__vector_24+0x9c>
    2678:	67 c0       	rjmp	.+206    	; 0x2748 <__vector_24+0x16a>
    267a:	38 f4       	brcc	.+14     	; 0x268a <__vector_24+0xac>
    267c:	88 36       	cpi	r24, 0x68	; 104
    267e:	09 f4       	brne	.+2      	; 0x2682 <__vector_24+0xa4>
    2680:	63 c0       	rjmp	.+198    	; 0x2748 <__vector_24+0x16a>
    2682:	80 37       	cpi	r24, 0x70	; 112
    2684:	09 f4       	brne	.+2      	; 0x2688 <__vector_24+0xaa>
    2686:	60 c0       	rjmp	.+192    	; 0x2748 <__vector_24+0x16a>
    2688:	c6 c0       	rjmp	.+396    	; 0x2816 <__vector_24+0x238>
    268a:	88 38       	cpi	r24, 0x88	; 136
    268c:	09 f4       	brne	.+2      	; 0x2690 <__vector_24+0xb2>
    268e:	b5 c0       	rjmp	.+362    	; 0x27fa <__vector_24+0x21c>
    2690:	80 39       	cpi	r24, 0x90	; 144
    2692:	09 f4       	brne	.+2      	; 0x2696 <__vector_24+0xb8>
    2694:	5f c0       	rjmp	.+190    	; 0x2754 <__vector_24+0x176>
    2696:	80 38       	cpi	r24, 0x80	; 128
    2698:	09 f0       	breq	.+2      	; 0x269c <__vector_24+0xbe>
    269a:	bd c0       	rjmp	.+378    	; 0x2816 <__vector_24+0x238>
    269c:	5b c0       	rjmp	.+182    	; 0x2754 <__vector_24+0x176>
    269e:	80 3b       	cpi	r24, 0xB0	; 176
    26a0:	09 f4       	brne	.+2      	; 0x26a4 <__vector_24+0xc6>
    26a2:	83 c0       	rjmp	.+262    	; 0x27aa <__vector_24+0x1cc>
    26a4:	38 f4       	brcc	.+14     	; 0x26b4 <__vector_24+0xd6>
    26a6:	80 3a       	cpi	r24, 0xA0	; 160
    26a8:	09 f4       	brne	.+2      	; 0x26ac <__vector_24+0xce>
    26aa:	66 c0       	rjmp	.+204    	; 0x2778 <__vector_24+0x19a>
    26ac:	88 3a       	cpi	r24, 0xA8	; 168
    26ae:	09 f4       	brne	.+2      	; 0x26b2 <__vector_24+0xd4>
    26b0:	7c c0       	rjmp	.+248    	; 0x27aa <__vector_24+0x1cc>
    26b2:	b1 c0       	rjmp	.+354    	; 0x2816 <__vector_24+0x238>
    26b4:	80 3c       	cpi	r24, 0xC0	; 192
    26b6:	09 f4       	brne	.+2      	; 0x26ba <__vector_24+0xdc>
    26b8:	a4 c0       	rjmp	.+328    	; 0x2802 <__vector_24+0x224>
    26ba:	88 3c       	cpi	r24, 0xC8	; 200
    26bc:	09 f4       	brne	.+2      	; 0x26c0 <__vector_24+0xe2>
    26be:	a1 c0       	rjmp	.+322    	; 0x2802 <__vector_24+0x224>
    26c0:	88 3b       	cpi	r24, 0xB8	; 184
    26c2:	09 f4       	brne	.+2      	; 0x26c6 <__vector_24+0xe8>
    26c4:	87 c0       	rjmp	.+270    	; 0x27d4 <__vector_24+0x1f6>
    26c6:	a7 c0       	rjmp	.+334    	; 0x2816 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    26c8:	80 91 50 03 	lds	r24, 0x0350	; 0x800350 <twi_slarw>
    26cc:	10 c0       	rjmp	.+32     	; 0x26ee <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    26ce:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <twi_masterBufferIndex>
    26d2:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <twi_masterBufferLength>
    26d6:	98 17       	cp	r25, r24
    26d8:	70 f5       	brcc	.+92     	; 0x2736 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    26da:	e0 91 29 03 	lds	r30, 0x0329	; 0x800329 <twi_masterBufferIndex>
    26de:	81 e0       	ldi	r24, 0x01	; 1
    26e0:	8e 0f       	add	r24, r30
    26e2:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <twi_masterBufferIndex>
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	e6 5d       	subi	r30, 0xD6	; 214
    26ea:	fc 4f       	sbci	r31, 0xFC	; 252
    26ec:	80 81       	ld	r24, Z
    26ee:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    26f2:	85 ec       	ldi	r24, 0xC5	; 197
    26f4:	83 c0       	rjmp	.+262    	; 0x27fc <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    26f6:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <twi_error>
    26fa:	8b c0       	rjmp	.+278    	; 0x2812 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    26fc:	e0 91 29 03 	lds	r30, 0x0329	; 0x800329 <twi_masterBufferIndex>
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	8e 0f       	add	r24, r30
    2704:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <twi_masterBufferIndex>
    2708:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	e6 5d       	subi	r30, 0xD6	; 214
    2710:	fc 4f       	sbci	r31, 0xFC	; 252
    2712:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2714:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <twi_masterBufferIndex>
    2718:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <twi_masterBufferLength>
    271c:	6b c0       	rjmp	.+214    	; 0x27f4 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    271e:	e0 91 29 03 	lds	r30, 0x0329	; 0x800329 <twi_masterBufferIndex>
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	8e 0f       	add	r24, r30
    2726:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <twi_masterBufferIndex>
    272a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	e6 5d       	subi	r30, 0xD6	; 214
    2732:	fc 4f       	sbci	r31, 0xFC	; 252
    2734:	80 83       	st	Z, r24
	if (twi_sendStop)
    2736:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <twi_sendStop>
    273a:	81 11       	cpse	r24, r1
    273c:	6a c0       	rjmp	.+212    	; 0x2812 <__vector_24+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2744:	84 ea       	ldi	r24, 0xA4	; 164
    2746:	5e c0       	rjmp	.+188    	; 0x2804 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2748:	83 e0       	ldi	r24, 0x03	; 3
    274a:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    274e:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <twi_rxBufferIndex>
    2752:	cf cf       	rjmp	.-98     	; 0x26f2 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2754:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <twi_rxBufferIndex>
    2758:	80 32       	cpi	r24, 0x20	; 32
    275a:	08 f0       	brcs	.+2      	; 0x275e <__vector_24+0x180>
    275c:	4e c0       	rjmp	.+156    	; 0x27fa <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    275e:	e0 91 e5 02 	lds	r30, 0x02E5	; 0x8002e5 <twi_rxBufferIndex>
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	8e 0f       	add	r24, r30
    2766:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <twi_rxBufferIndex>
    276a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	ea 51       	subi	r30, 0x1A	; 26
    2772:	fd 4f       	sbci	r31, 0xFD	; 253
    2774:	80 83       	st	Z, r24
    2776:	bd cf       	rjmp	.-134    	; 0x26f2 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2778:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    277c:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <twi_rxBufferIndex>
    2780:	80 32       	cpi	r24, 0x20	; 32
    2782:	30 f4       	brcc	.+12     	; 0x2790 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    2784:	e0 91 e5 02 	lds	r30, 0x02E5	; 0x8002e5 <twi_rxBufferIndex>
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	ea 51       	subi	r30, 0x1A	; 26
    278c:	fd 4f       	sbci	r31, 0xFD	; 253
    278e:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2790:	60 91 e5 02 	lds	r22, 0x02E5	; 0x8002e5 <twi_rxBufferIndex>
    2794:	70 e0       	ldi	r23, 0x00	; 0
    2796:	e0 91 4a 03 	lds	r30, 0x034A	; 0x80034a <twi_onSlaveReceive>
    279a:	f0 91 4b 03 	lds	r31, 0x034B	; 0x80034b <twi_onSlaveReceive+0x1>
    279e:	86 ee       	ldi	r24, 0xE6	; 230
    27a0:	92 e0       	ldi	r25, 0x02	; 2
    27a2:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    27a4:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <twi_rxBufferIndex>
      break;
    27a8:	36 c0       	rjmp	.+108    	; 0x2816 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    27aa:	84 e0       	ldi	r24, 0x04	; 4
    27ac:	80 93 51 03 	sts	0x0351, r24	; 0x800351 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    27b0:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    27b4:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    27b8:	e0 91 4c 03 	lds	r30, 0x034C	; 0x80034c <twi_onSlaveTransmit>
    27bc:	f0 91 4d 03 	lds	r31, 0x034D	; 0x80034d <twi_onSlaveTransmit+0x1>
    27c0:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    27c2:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <twi_txBufferLength>
    27c6:	81 11       	cpse	r24, r1
    27c8:	05 c0       	rjmp	.+10     	; 0x27d4 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    27d0:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    27d4:	e0 91 07 03 	lds	r30, 0x0307	; 0x800307 <twi_txBufferIndex>
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	8e 0f       	add	r24, r30
    27dc:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <twi_txBufferIndex>
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	e8 5f       	subi	r30, 0xF8	; 248
    27e4:	fc 4f       	sbci	r31, 0xFC	; 252
    27e6:	80 81       	ld	r24, Z
    27e8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    27ec:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <twi_txBufferIndex>
    27f0:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <twi_txBufferLength>
    27f4:	98 17       	cp	r25, r24
    27f6:	08 f4       	brcc	.+2      	; 0x27fa <__vector_24+0x21c>
    27f8:	7c cf       	rjmp	.-264    	; 0x26f2 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    27fa:	85 e8       	ldi	r24, 0x85	; 133
    27fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    2800:	0a c0       	rjmp	.+20     	; 0x2816 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2802:	85 ec       	ldi	r24, 0xC5	; 197
    2804:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2808:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <twi_state>
      break;
    280c:	04 c0       	rjmp	.+8      	; 0x2816 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    280e:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <twi_error>
      twi_stop();
    2812:	0e 94 df 12 	call	0x25be	; 0x25be <twi_stop>
      break;
  }
}
    2816:	ff 91       	pop	r31
    2818:	ef 91       	pop	r30
    281a:	bf 91       	pop	r27
    281c:	af 91       	pop	r26
    281e:	9f 91       	pop	r25
    2820:	8f 91       	pop	r24
    2822:	7f 91       	pop	r23
    2824:	6f 91       	pop	r22
    2826:	5f 91       	pop	r21
    2828:	4f 91       	pop	r20
    282a:	3f 91       	pop	r19
    282c:	2f 91       	pop	r18
    282e:	0f 90       	pop	r0
    2830:	0f be       	out	0x3f, r0	; 63
    2832:	0f 90       	pop	r0
    2834:	1f 90       	pop	r1
    2836:	18 95       	reti

00002838 <__udivmodhi4>:
    2838:	aa 1b       	sub	r26, r26
    283a:	bb 1b       	sub	r27, r27
    283c:	51 e1       	ldi	r21, 0x11	; 17
    283e:	07 c0       	rjmp	.+14     	; 0x284e <__udivmodhi4_ep>

00002840 <__udivmodhi4_loop>:
    2840:	aa 1f       	adc	r26, r26
    2842:	bb 1f       	adc	r27, r27
    2844:	a6 17       	cp	r26, r22
    2846:	b7 07       	cpc	r27, r23
    2848:	10 f0       	brcs	.+4      	; 0x284e <__udivmodhi4_ep>
    284a:	a6 1b       	sub	r26, r22
    284c:	b7 0b       	sbc	r27, r23

0000284e <__udivmodhi4_ep>:
    284e:	88 1f       	adc	r24, r24
    2850:	99 1f       	adc	r25, r25
    2852:	5a 95       	dec	r21
    2854:	a9 f7       	brne	.-22     	; 0x2840 <__udivmodhi4_loop>
    2856:	80 95       	com	r24
    2858:	90 95       	com	r25
    285a:	bc 01       	movw	r22, r24
    285c:	cd 01       	movw	r24, r26
    285e:	08 95       	ret

00002860 <__divmodhi4>:
    2860:	97 fb       	bst	r25, 7
    2862:	07 2e       	mov	r0, r23
    2864:	16 f4       	brtc	.+4      	; 0x286a <__divmodhi4+0xa>
    2866:	00 94       	com	r0
    2868:	07 d0       	rcall	.+14     	; 0x2878 <__divmodhi4_neg1>
    286a:	77 fd       	sbrc	r23, 7
    286c:	09 d0       	rcall	.+18     	; 0x2880 <__divmodhi4_neg2>
    286e:	0e 94 1c 14 	call	0x2838	; 0x2838 <__udivmodhi4>
    2872:	07 fc       	sbrc	r0, 7
    2874:	05 d0       	rcall	.+10     	; 0x2880 <__divmodhi4_neg2>
    2876:	3e f4       	brtc	.+14     	; 0x2886 <__divmodhi4_exit>

00002878 <__divmodhi4_neg1>:
    2878:	90 95       	com	r25
    287a:	81 95       	neg	r24
    287c:	9f 4f       	sbci	r25, 0xFF	; 255
    287e:	08 95       	ret

00002880 <__divmodhi4_neg2>:
    2880:	70 95       	com	r23
    2882:	61 95       	neg	r22
    2884:	7f 4f       	sbci	r23, 0xFF	; 255

00002886 <__divmodhi4_exit>:
    2886:	08 95       	ret

00002888 <__udivmodsi4>:
    2888:	a1 e2       	ldi	r26, 0x21	; 33
    288a:	1a 2e       	mov	r1, r26
    288c:	aa 1b       	sub	r26, r26
    288e:	bb 1b       	sub	r27, r27
    2890:	fd 01       	movw	r30, r26
    2892:	0d c0       	rjmp	.+26     	; 0x28ae <__udivmodsi4_ep>

00002894 <__udivmodsi4_loop>:
    2894:	aa 1f       	adc	r26, r26
    2896:	bb 1f       	adc	r27, r27
    2898:	ee 1f       	adc	r30, r30
    289a:	ff 1f       	adc	r31, r31
    289c:	a2 17       	cp	r26, r18
    289e:	b3 07       	cpc	r27, r19
    28a0:	e4 07       	cpc	r30, r20
    28a2:	f5 07       	cpc	r31, r21
    28a4:	20 f0       	brcs	.+8      	; 0x28ae <__udivmodsi4_ep>
    28a6:	a2 1b       	sub	r26, r18
    28a8:	b3 0b       	sbc	r27, r19
    28aa:	e4 0b       	sbc	r30, r20
    28ac:	f5 0b       	sbc	r31, r21

000028ae <__udivmodsi4_ep>:
    28ae:	66 1f       	adc	r22, r22
    28b0:	77 1f       	adc	r23, r23
    28b2:	88 1f       	adc	r24, r24
    28b4:	99 1f       	adc	r25, r25
    28b6:	1a 94       	dec	r1
    28b8:	69 f7       	brne	.-38     	; 0x2894 <__udivmodsi4_loop>
    28ba:	60 95       	com	r22
    28bc:	70 95       	com	r23
    28be:	80 95       	com	r24
    28c0:	90 95       	com	r25
    28c2:	9b 01       	movw	r18, r22
    28c4:	ac 01       	movw	r20, r24
    28c6:	bd 01       	movw	r22, r26
    28c8:	cf 01       	movw	r24, r30
    28ca:	08 95       	ret

000028cc <__tablejump2__>:
    28cc:	ee 0f       	add	r30, r30
    28ce:	ff 1f       	adc	r31, r31
    28d0:	05 90       	lpm	r0, Z+
    28d2:	f4 91       	lpm	r31, Z
    28d4:	e0 2d       	mov	r30, r0
    28d6:	09 94       	ijmp

000028d8 <eeprom_read_byte>:
    28d8:	f9 99       	sbic	0x1f, 1	; 31
    28da:	fe cf       	rjmp	.-4      	; 0x28d8 <eeprom_read_byte>
    28dc:	92 bd       	out	0x22, r25	; 34
    28de:	81 bd       	out	0x21, r24	; 33
    28e0:	f8 9a       	sbi	0x1f, 0	; 31
    28e2:	99 27       	eor	r25, r25
    28e4:	80 b5       	in	r24, 0x20	; 32
    28e6:	08 95       	ret

000028e8 <eeprom_write_byte>:
    28e8:	26 2f       	mov	r18, r22

000028ea <eeprom_write_r18>:
    28ea:	f9 99       	sbic	0x1f, 1	; 31
    28ec:	fe cf       	rjmp	.-4      	; 0x28ea <eeprom_write_r18>
    28ee:	1f ba       	out	0x1f, r1	; 31
    28f0:	92 bd       	out	0x22, r25	; 34
    28f2:	81 bd       	out	0x21, r24	; 33
    28f4:	20 bd       	out	0x20, r18	; 32
    28f6:	0f b6       	in	r0, 0x3f	; 63
    28f8:	f8 94       	cli
    28fa:	fa 9a       	sbi	0x1f, 2	; 31
    28fc:	f9 9a       	sbi	0x1f, 1	; 31
    28fe:	0f be       	out	0x3f, r0	; 63
    2900:	01 96       	adiw	r24, 0x01	; 1
    2902:	08 95       	ret

00002904 <__do_global_dtors>:
    2904:	10 e0       	ldi	r17, 0x00	; 0
    2906:	c5 e8       	ldi	r28, 0x85	; 133
    2908:	d0 e0       	ldi	r29, 0x00	; 0
    290a:	04 c0       	rjmp	.+8      	; 0x2914 <__do_global_dtors+0x10>
    290c:	fe 01       	movw	r30, r28
    290e:	0e 94 66 14 	call	0x28cc	; 0x28cc <__tablejump2__>
    2912:	21 96       	adiw	r28, 0x01	; 1
    2914:	c6 38       	cpi	r28, 0x86	; 134
    2916:	d1 07       	cpc	r29, r17
    2918:	c9 f7       	brne	.-14     	; 0x290c <__do_global_dtors+0x8>
    291a:	f8 94       	cli

0000291c <__stop_program>:
    291c:	ff cf       	rjmp	.-2      	; 0x291c <__stop_program>
